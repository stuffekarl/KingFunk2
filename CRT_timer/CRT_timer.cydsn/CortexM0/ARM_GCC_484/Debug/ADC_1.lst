ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_1_initVar
  18              		.bss
  19              		.type	ADC_1_initVar, %object
  20              		.size	ADC_1_initVar, 1
  21              	ADC_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_1_offset,2,4
  24              		.comm	ADC_1_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_1_channelsConfig, %object
  28              		.size	ADC_1_channelsConfig, 4
  29              	ADC_1_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_1_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_1_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_1_Start, %function
  37              	ADC_1_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_1.c"
   1:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_1.c **** * File Name: ADC_1.c
   3:.\Generated_Source\PSoC4/ADC_1.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_1.c **** #include "ADC_1.h"
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 2


  19:.\Generated_Source\PSoC4/ADC_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_1.c **** uint8 ADC_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_1.c **** volatile int16 ADC_1_offset[ADC_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_1.c **** volatile int32 ADC_1_countsPer10Volt[ADC_1_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_1.c **** static const uint32 CYCODE ADC_1_channelsConfig[] = { 0x00000000u };
  34:.\Generated_Source\PSoC4/ADC_1.c **** 
  35:.\Generated_Source\PSoC4/ADC_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Start
  38:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_1.c **** *
  40:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_1.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_1.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_1.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_1.c **** *
  45:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_1.c **** *
  48:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_1.c **** *
  51:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_1.c **** *  The ADC_1_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_1.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_1.c **** *  to zero before call of ADC_1_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Init() and ADC_1_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_1.c **** *
  62:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Start(void)
  64:.\Generated_Source\PSoC4/ADC_1.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_1.c ****     if(ADC_1_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_1.c ****     {
  68:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_1_Init
  69:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC_1.c ****     }
  71:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_1_Enable
  72:.\Generated_Source\PSoC4/ADC_1.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_1_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_1_Start, .-ADC_1_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_1_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_1_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_1_Init, %function
  80              	ADC_1_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC_1.c **** 
  74:.\Generated_Source\PSoC4/ADC_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Init
  77:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_1.c **** *
  79:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start().
  83:.\Generated_Source\PSoC4/ADC_1.c **** *
  84:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_1.c **** *
  87:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_1.c **** *
  90:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 4


  91:.\Generated_Source\PSoC4/ADC_1.c **** *  The ADC_1_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC_1.c **** *
  93:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Init(void)
  95:.\Generated_Source\PSoC4/ADC_1.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_1.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_1.c **** 
 100:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_1.c ****         static const uint8 CYCODE ADC_1_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_1.c ****         {
 103:.\Generated_Source\PSoC4/ADC_1.c ****             (uint8)(ADC_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_1.c ****             (uint8)ADC_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_1.c ****             ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_1.c ****              (uint8)ADC_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_1.c ****         };
 136:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 5


 137:.\Generated_Source\PSoC4/ADC_1.c **** 
 138:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC_1.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC_1.c ****         CyIntSetPriority(ADC_1_INTC_NUMBER, ADC_1_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0E20     		mov	r0, #14
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC_1.c ****         (void)CyIntSetVector(ADC_1_INTC_NUMBER, &ADC_1_ISR);
  97              		.loc 1 141 0
  98 000e 4E4B     		ldr	r3, .L14
  99 0010 0E20     		mov	r0, #14
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC_1.c ****     #endif   /* End ADC_1_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC_1.c **** 
 144:.\Generated_Source\PSoC4/ADC_1.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CHAN_EN_REG = ADC_1_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 4C4B     		ldr	r3, .L14+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG = ADC_1_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 4C4B     		ldr	r3, .L14+8
 108 0020 4C4A     		ldr	r2, .L14+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_CTRL_REG = ADC_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 4C4B     		ldr	r3, .L14+16
 112 0026 4D4A     		ldr	r2, .L14+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG = ADC_1_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 4D4B     		ldr	r3, .L14+24
 116 002c 4D4A     		ldr	r2, .L14+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_COND_REG  = ADC_1_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 4D4B     		ldr	r3, .L14+32
 120 0032 0022     		mov	r2, #0
 121 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_TIME01_REG = ADC_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 122              		.loc 1 150 0
 123 0036 4D4B     		ldr	r3, .L14+36
 124 0038 4D4A     		ldr	r2, .L14+40
 125 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_TIME23_REG = ADC_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 126              		.loc 1 151 0
 127 003c 4D4B     		ldr	r3, .L14+44
 128 003e 4C4A     		ldr	r2, .L14+40
 129 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC_1.c ****     
 153:.\Generated_Source\PSoC4/ADC_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_MUX_SWITCH0_REG |= ADC_1_DEFAULT_MUX_SWITCH0;
 130              		.loc 1 155 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 6


 131 0042 4D4B     		ldr	r3, .L14+48
 132 0044 4C4A     		ldr	r2, .L14+48
 133 0046 1268     		ldr	r2, [r2]
 134 0048 8021     		mov	r1, #128
 135 004a 4902     		lsl	r1, r1, #9
 136 004c 0A43     		orr	r2, r1
 137 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC_1.c ****             ADC_1_MUX_SWITCH_HW_CTRL_REG |= ADC_1_DEFAULT_MUX_SWITCH0;
 159:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /*ADC_1_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC_1.c **** 
 162:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 138              		.loc 1 162 0
 139 0050 4A4B     		ldr	r3, .L14+52
 140 0052 0022     		mov	r2, #0
 141 0054 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_INTR_MASK_REG = 0u;
 142              		.loc 1 163 0
 143 0056 4A4B     		ldr	r3, .L14+56
 144 0058 0022     		mov	r2, #0
 145 005a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_INTR_MASK_REG = ADC_1_SAR_INTR_MASK;
 146              		.loc 1 164 0
 147 005c 494B     		ldr	r3, .L14+60
 148 005e 0122     		mov	r2, #1
 149 0060 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC_1.c **** 
 166:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_ANA_TRIM_REG = ADC_1_TRIM_COEF;
 150              		.loc 1 167 0
 151 0062 494B     		ldr	r3, .L14+64
 152 0064 0222     		mov	r2, #2
 153 0066 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* (ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC_1.c **** 
 170:.\Generated_Source\PSoC4/ADC_1.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC_1.c ****     tmpRegVal = ADC_1_SAR_DFT_CTRL_REG;
 154              		.loc 1 171 0
 155 0068 484B     		ldr	r3, .L14+68
 156 006a 1B68     		ldr	r3, [r3]
 157 006c 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC_1.c ****     tmpRegVal &= (uint32)~ADC_1_DCEN;
 158              		.loc 1 172 0
 159 006e 7A68     		ldr	r2, [r7, #4]
 160 0070 474B     		ldr	r3, .L14+72
 161 0072 1340     		and	r3, r2
 162 0074 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC_1.c ****     
 174:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_NOMINAL_CLOCK_FREQ > (ADC_1_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC_1.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DLY_INC;
 163              		.loc 1 178 0
 164 0076 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 7


 165 0078 0122     		mov	r2, #1
 166 007a 1343     		orr	r3, r2
 167 007c 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC_1.c ****     #else
 181:.\Generated_Source\PSoC4/ADC_1.c ****         #if ((ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC_1.c ****              (ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC_1.c ****         #else
 185:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DCEN;
 186:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal &= (uint32)~ADC_1_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ((ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC_1.c ****                    (ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* (ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC_1.c ****     
 191:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_DFT_CTRL_REG = tmpRegVal;
 168              		.loc 1 191 0
 169 007e 434B     		ldr	r3, .L14+68
 170 0080 7A68     		ldr	r2, [r7, #4]
 171 0082 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC_1.c **** 
 193:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_WOUNDING_REG = ADC_1_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC_1.c **** 
 197:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 172              		.loc 1 197 0
 173 0084 0023     		mov	r3, #0
 174 0086 FB60     		str	r3, [r7, #12]
 175 0088 57E0     		b	.L6
 176              	.L13:
 198:.\Generated_Source\PSoC4/ADC_1.c ****     {
 199:.\Generated_Source\PSoC4/ADC_1.c ****         tmpRegVal = (ADC_1_channelsConfig[chNum] & ADC_1_CHANNEL_CONFIG_MASK);
 177              		.loc 1 199 0
 178 008a 0022     		mov	r2, #0
 179 008c DC23     		mov	r3, #220
 180 008e 9B01     		lsl	r3, r3, #6
 181 0090 1340     		and	r3, r2
 182 0092 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_InputsPlacement[chNum];
 202:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC_1.c ****         
 204:.\Generated_Source\PSoC4/ADC_1.c ****         
 205:.\Generated_Source\PSoC4/ADC_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC_1.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC_1.c ****         */
 209:.\Generated_Source\PSoC4/ADC_1.c ****         #if((ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC_1.c ****             (ADC_1_ALT_WOUNDING == ADC_1_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal &= (uint32)(~ADC_1_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC_1.c **** 
 214:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC_1.c ****         if(chNum < ADC_1_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC_1.c ****         {
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 8


 218:.\Generated_Source\PSoC4/ADC_1.c ****             CY_SET_REG32((reg32 *)(ADC_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 183              		.loc 1 218 0
 184 0094 FB68     		ldr	r3, [r7, #12]
 185 0096 9B00     		lsl	r3, r3, #2
 186 0098 3E4A     		ldr	r2, .L14+76
 187 009a 9B18     		add	r3, r3, r2
 188 009c 7A68     		ldr	r2, [r7, #4]
 189 009e 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC_1.c **** 
 220:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chNum] & ADC_1_IS_SATURATE_EN_MASK) != 0u)
 190              		.loc 1 220 0
 191 00a0 0022     		mov	r2, #0
 192 00a2 0123     		mov	r3, #1
 193 00a4 1340     		and	r3, r2
 194 00a6 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC_1.c ****             {
 222:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 195              		.loc 1 222 0
 196 00a8 344B     		ldr	r3, .L14+52
 197 00aa 344A     		ldr	r2, .L14+52
 198 00ac 1168     		ldr	r1, [r2]
 199 00ae FA68     		ldr	r2, [r7, #12]
 200 00b0 0120     		mov	r0, #1
 201 00b2 041C     		mov	r4, r0
 202 00b4 9440     		lsl	r4, r4, r2
 203 00b6 221C     		mov	r2, r4
 204 00b8 92B2     		uxth	r2, r2
 205 00ba 0A43     		orr	r2, r1
 206 00bc 1A60     		str	r2, [r3]
 207              	.L7:
 223:.\Generated_Source\PSoC4/ADC_1.c ****             }
 224:.\Generated_Source\PSoC4/ADC_1.c **** 
 225:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chNum] & ADC_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 208              		.loc 1 225 0
 209 00be 0022     		mov	r2, #0
 210 00c0 0223     		mov	r3, #2
 211 00c2 1340     		and	r3, r2
 212 00c4 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC_1.c ****             {
 227:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 213              		.loc 1 227 0
 214 00c6 2E4B     		ldr	r3, .L14+56
 215 00c8 2D4A     		ldr	r2, .L14+56
 216 00ca 1168     		ldr	r1, [r2]
 217 00cc FA68     		ldr	r2, [r7, #12]
 218 00ce 0120     		mov	r0, #1
 219 00d0 041C     		mov	r4, r0
 220 00d2 9440     		lsl	r4, r4, r2
 221 00d4 221C     		mov	r2, r4
 222 00d6 92B2     		uxth	r2, r2
 223 00d8 0A43     		orr	r2, r1
 224 00da 1A60     		str	r2, [r3]
 225              	.L8:
 228:.\Generated_Source\PSoC4/ADC_1.c ****             }
 229:.\Generated_Source\PSoC4/ADC_1.c ****         }
 230:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC_1.c ****             else
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 9


 232:.\Generated_Source\PSoC4/ADC_1.c ****             {
 233:.\Generated_Source\PSoC4/ADC_1.c ****                 CY_SET_REG32(ADC_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_1_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC_1.c **** 
 235:.\Generated_Source\PSoC4/ADC_1.c ****                 if((ADC_1_channelsConfig[chNum] & ADC_1_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC_1.c ****                 {
 237:.\Generated_Source\PSoC4/ADC_1.c ****                     ADC_1_SAR_INTR_MASK_REG |= ADC_1_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC_1.c ****                 }
 239:.\Generated_Source\PSoC4/ADC_1.c **** 
 240:.\Generated_Source\PSoC4/ADC_1.c ****                 if((ADC_1_channelsConfig[chNum] & ADC_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC_1.c ****                 {
 242:.\Generated_Source\PSoC4/ADC_1.c ****                     ADC_1_SAR_INTR_MASK_REG |= ADC_1_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC_1.c ****                 }
 244:.\Generated_Source\PSoC4/ADC_1.c ****             }
 245:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC_1.c **** 
 247:.\Generated_Source\PSoC4/ADC_1.c ****         if((ADC_1_channelsConfig[chNum] & ADC_1_ALT_RESOLUTION_ON) != 0u)
 226              		.loc 1 247 0
 227 00dc 0022     		mov	r2, #0
 228 00de 8023     		mov	r3, #128
 229 00e0 9B00     		lsl	r3, r3, #2
 230 00e2 1340     		and	r3, r2
 231 00e4 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC_1.c ****         {
 249:.\Generated_Source\PSoC4/ADC_1.c ****                counts = (int32)ADC_1_DEFAULT_MAX_WRK_ALT;
 232              		.loc 1 249 0
 233 00e6 8023     		mov	r3, #128
 234 00e8 5B00     		lsl	r3, r3, #1
 235 00ea BB60     		str	r3, [r7, #8]
 236 00ec 02E0     		b	.L10
 237              	.L9:
 250:.\Generated_Source\PSoC4/ADC_1.c ****         }
 251:.\Generated_Source\PSoC4/ADC_1.c ****         else
 252:.\Generated_Source\PSoC4/ADC_1.c ****         {
 253:.\Generated_Source\PSoC4/ADC_1.c ****                counts = (int32)ADC_1_SAR_WRK_MAX_12BIT;
 238              		.loc 1 253 0
 239 00ee 8023     		mov	r3, #128
 240 00f0 5B01     		lsl	r3, r3, #5
 241 00f2 BB60     		str	r3, [r7, #8]
 242              	.L10:
 254:.\Generated_Source\PSoC4/ADC_1.c ****         }
 255:.\Generated_Source\PSoC4/ADC_1.c **** 
 256:.\Generated_Source\PSoC4/ADC_1.c ****         if((ADC_1_channelsConfig[chNum] & ADC_1_DIFFERENTIAL_EN) == 0u)
 243              		.loc 1 256 0
 244 00f4 0022     		mov	r2, #0
 245 00f6 8023     		mov	r3, #128
 246 00f8 5B00     		lsl	r3, r3, #1
 247 00fa 1340     		and	r3, r2
 248 00fc 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC_1.c ****         {
 258:.\Generated_Source\PSoC4/ADC_1.c ****             #if((ADC_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_1__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC_1.c ****                 (ADC_1_DEFAULT_NEG_INPUT_SEL == ADC_1__VREF))
 260:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC_1.c ****             #else
 263:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = 0;
 249              		.loc 1 263 0
 250 00fe 264B     		ldr	r3, .L14+80
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 10


 251 0100 FA68     		ldr	r2, [r7, #12]
 252 0102 5200     		lsl	r2, r2, #1
 253 0104 0021     		mov	r1, #0
 254 0106 D152     		strh	r1, [r2, r3]
 255 0108 04E0     		b	.L12
 256              	.L11:
 264:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_1__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC_1.c ****         }
 266:.\Generated_Source\PSoC4/ADC_1.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC_1.c ****         {
 268:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_1__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = (int16)(counts / 2);
 271:.\Generated_Source\PSoC4/ADC_1.c ****             #else
 272:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = 0;
 257              		.loc 1 272 0
 258 010a 234B     		ldr	r3, .L14+80
 259 010c FA68     		ldr	r2, [r7, #12]
 260 010e 5200     		lsl	r2, r2, #1
 261 0110 0021     		mov	r1, #0
 262 0112 D152     		strh	r1, [r2, r3]
 263              	.L12:
 273:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* end ADC_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_1__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC_1.c ****         }
 275:.\Generated_Source\PSoC4/ADC_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_1_10MV_COUNTS) +
 264              		.loc 1 276 0
 265 0114 BB68     		ldr	r3, [r7, #8]
 266 0116 214A     		ldr	r2, .L14+84
 267 0118 5343     		mul	r3, r2
 268 011a 214A     		ldr	r2, .L14+88
 269 011c 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC_1.c ****                             ADC_1_DEFAULT_VREF_MV_VALUE) / (ADC_1_DEFAULT_VREF_MV_VALUE * 2));
 270              		.loc 1 277 0
 271 011e 181C     		mov	r0, r3
 272 0120 2049     		ldr	r1, .L14+92
 273 0122 FFF7FEFF 		bl	__aeabi_idiv
 274 0126 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_1_10MV_COUNTS) +
 275              		.loc 1 276 0
 276 0128 9BB2     		uxth	r3, r3
 277 012a 19B2     		sxth	r1, r3
 278 012c 1E4B     		ldr	r3, .L14+96
 279 012e FA68     		ldr	r2, [r7, #12]
 280 0130 9200     		lsl	r2, r2, #2
 281 0132 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 282              		.loc 1 197 0
 283 0134 FB68     		ldr	r3, [r7, #12]
 284 0136 0133     		add	r3, r3, #1
 285 0138 FB60     		str	r3, [r7, #12]
 286              	.L6:
 197:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 287              		.loc 1 197 0 is_stmt 0 discriminator 1
 288 013a FB68     		ldr	r3, [r7, #12]
 289 013c 002B     		cmp	r3, #0
 290 013e A4D0     		beq	.L13
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 11


 278:.\Generated_Source\PSoC4/ADC_1.c ****     }
 279:.\Generated_Source\PSoC4/ADC_1.c **** }
 291              		.loc 1 279 0 is_stmt 1
 292 0140 BD46     		mov	sp, r7
 293 0142 05B0     		add	sp, sp, #20
 294              		@ sp needed
 295 0144 90BD     		pop	{r4, r7, pc}
 296              	.L15:
 297 0146 C046     		.align	2
 298              	.L14:
 299 0148 00000000 		.word	ADC_1_ISR
 300 014c 20001A40 		.word	1075445792
 301 0150 00001A40 		.word	1075445760
 302 0154 70020051 		.word	1358955120
 303 0158 04001A40 		.word	1075445764
 304 015c 8C000080 		.word	-2147483508
 305 0160 18001A40 		.word	1075445784
 306 0164 0000FF07 		.word	134152192
 307 0168 1C001A40 		.word	1075445788
 308 016c 10001A40 		.word	1075445776
 309 0170 02000200 		.word	131074
 310 0174 14001A40 		.word	1075445780
 311 0178 00031A40 		.word	1075446528
 312 017c 28021A40 		.word	1075446312
 313 0180 38021A40 		.word	1075446328
 314 0184 18021A40 		.word	1075446296
 315 0188 000F1A40 		.word	1075449600
 316 018c 30001A40 		.word	1075445808
 317 0190 FFFFFFDF 		.word	-536870913
 318 0194 80001A40 		.word	1075445888
 319 0198 00000000 		.word	ADC_1_offset
 320 019c 10270000 		.word	10000
 321 01a0 E40C0000 		.word	3300
 322 01a4 C8190000 		.word	6600
 323 01a8 00000000 		.word	ADC_1_countsPer10Volt
 324              		.cfi_endproc
 325              	.LFE1:
 326              		.size	ADC_1_Init, .-ADC_1_Init
 327              		.section	.text.ADC_1_Enable,"ax",%progbits
 328              		.align	2
 329              		.global	ADC_1_Enable
 330              		.code	16
 331              		.thumb_func
 332              		.type	ADC_1_Enable, %function
 333              	ADC_1_Enable:
 334              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC_1.c **** 
 281:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC_1.c **** *
 285:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC_1.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC_1.c **** *
 288:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC_1.c **** *
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 12


 291:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC_1.c **** *
 294:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Enable(void)
 296:.\Generated_Source\PSoC4/ADC_1.c **** {
 335              		.loc 1 296 0
 336              		.cfi_startproc
 337 0000 80B5     		push	{r7, lr}
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 7, -8
 340              		.cfi_offset 14, -4
 341 0002 00AF     		add	r7, sp, #0
 342              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC_1.c ****     if (0u == (ADC_1_SAR_CTRL_REG & ADC_1_ENABLE))
 343              		.loc 1 297 0
 344 0004 074B     		ldr	r3, .L18
 345 0006 1B68     		ldr	r3, [r3]
 346 0008 002B     		cmp	r3, #0
 347 000a 09DB     		blt	.L16
 298:.\Generated_Source\PSoC4/ADC_1.c ****     {
 299:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_CY_SAR_IP_VER != ADC_1_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC_1.c **** 
 301:.\Generated_Source\PSoC4/ADC_1.c ****             while (0u != (ADC_1_SAR_STATUS_REG & ADC_1_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC_1.c ****             {
 303:.\Generated_Source\PSoC4/ADC_1.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC_1.c ****             }
 305:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* (ADC_1_CY_SAR_IP_VER != ADC_1_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC_1.c ****         
 307:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_CTRL_REG |= ADC_1_ENABLE;
 348              		.loc 1 307 0
 349 000c 054B     		ldr	r3, .L18
 350 000e 054A     		ldr	r2, .L18
 351 0010 1268     		ldr	r2, [r2]
 352 0012 8021     		mov	r1, #128
 353 0014 0906     		lsl	r1, r1, #24
 354 0016 0A43     		orr	r2, r1
 355 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC_1.c ****         
 309:.\Generated_Source\PSoC4/ADC_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC_1.c ****         CyDelayUs(ADC_1_10US_DELAY);         
 356              		.loc 1 310 0
 357 001a 0A20     		mov	r0, #10
 358 001c FFF7FEFF 		bl	CyDelayUs
 359              	.L16:
 311:.\Generated_Source\PSoC4/ADC_1.c ****     }
 312:.\Generated_Source\PSoC4/ADC_1.c **** }
 360              		.loc 1 312 0
 361 0020 BD46     		mov	sp, r7
 362              		@ sp needed
 363 0022 80BD     		pop	{r7, pc}
 364              	.L19:
 365              		.align	2
 366              	.L18:
 367 0024 00001A40 		.word	1075445760
 368              		.cfi_endproc
 369              	.LFE2:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 13


 370              		.size	ADC_1_Enable, .-ADC_1_Enable
 371              		.section	.text.ADC_1_Stop,"ax",%progbits
 372              		.align	2
 373              		.global	ADC_1_Stop
 374              		.code	16
 375              		.thumb_func
 376              		.type	ADC_1_Stop, %function
 377              	ADC_1_Stop:
 378              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC_1.c **** 
 314:.\Generated_Source\PSoC4/ADC_1.c **** 
 315:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Stop
 317:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC_1.c **** *
 319:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC_1.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC_1.c **** *
 323:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_1.c **** *
 326:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_1.c **** *
 329:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Stop(void)
 331:.\Generated_Source\PSoC4/ADC_1.c **** {
 379              		.loc 1 331 0
 380              		.cfi_startproc
 381 0000 80B5     		push	{r7, lr}
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 7, -8
 384              		.cfi_offset 14, -4
 385 0002 00AF     		add	r7, sp, #0
 386              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG &= (uint32)~ADC_1_ENABLE;
 387              		.loc 1 332 0
 388 0004 034B     		ldr	r3, .L21
 389 0006 034A     		ldr	r2, .L21
 390 0008 1268     		ldr	r2, [r2]
 391 000a 5200     		lsl	r2, r2, #1
 392 000c 5208     		lsr	r2, r2, #1
 393 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC_1.c **** }
 394              		.loc 1 333 0
 395 0010 BD46     		mov	sp, r7
 396              		@ sp needed
 397 0012 80BD     		pop	{r7, pc}
 398              	.L22:
 399              		.align	2
 400              	.L21:
 401 0014 00001A40 		.word	1075445760
 402              		.cfi_endproc
 403              	.LFE3:
 404              		.size	ADC_1_Stop, .-ADC_1_Stop
 405              		.section	.text.ADC_1_StartConvert,"ax",%progbits
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 14


 406              		.align	2
 407              		.global	ADC_1_StartConvert
 408              		.code	16
 409              		.thumb_func
 410              		.type	ADC_1_StartConvert, %function
 411              	ADC_1_StartConvert:
 412              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC_1.c **** 
 335:.\Generated_Source\PSoC4/ADC_1.c **** 
 336:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_StartConvert
 338:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC_1.c **** *
 340:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC_1.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC_1.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC_1.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC_1.c **** *
 345:.\Generated_Source\PSoC4/ADC_1.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC_1.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC_1.c **** *
 349:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC_1.c **** *
 352:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC_1.c **** *
 355:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC_1.c **** {
 413              		.loc 1 357 0
 414              		.cfi_startproc
 415 0000 80B5     		push	{r7, lr}
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 7, -8
 418              		.cfi_offset 14, -4
 419 0002 00AF     		add	r7, sp, #0
 420              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_SAMPLE_MODE_SEL == ADC_1__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_SAMPLE_CTRL_REG |= ADC_1_CONTINUOUS_EN;
 421              		.loc 1 359 0
 422 0004 044B     		ldr	r3, .L24
 423 0006 044A     		ldr	r2, .L24
 424 0008 1268     		ldr	r2, [r2]
 425 000a 8021     		mov	r1, #128
 426 000c 4902     		lsl	r1, r1, #9
 427 000e 0A43     		orr	r2, r1
 428 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC_1.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_START_CTRL_REG = ADC_1_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* End ADC_1_DEFAULT_SAMPLE_MODE == ADC_1__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC_1.c **** 
 364:.\Generated_Source\PSoC4/ADC_1.c **** }
 429              		.loc 1 364 0
 430 0012 BD46     		mov	sp, r7
 431              		@ sp needed
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 15


 432 0014 80BD     		pop	{r7, pc}
 433              	.L25:
 434 0016 C046     		.align	2
 435              	.L24:
 436 0018 04001A40 		.word	1075445764
 437              		.cfi_endproc
 438              	.LFE4:
 439              		.size	ADC_1_StartConvert, .-ADC_1_StartConvert
 440              		.section	.text.ADC_1_StopConvert,"ax",%progbits
 441              		.align	2
 442              		.global	ADC_1_StopConvert
 443              		.code	16
 444              		.thumb_func
 445              		.type	ADC_1_StopConvert, %function
 446              	ADC_1_StopConvert:
 447              	.LFB5:
 365:.\Generated_Source\PSoC4/ADC_1.c **** 
 366:.\Generated_Source\PSoC4/ADC_1.c **** 
 367:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_StopConvert
 369:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC_1.c **** *
 371:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC_1.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC_1.c **** *
 374:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC_1.c **** *
 377:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC_1.c **** *
 380:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC_1.c **** {
 448              		.loc 1 382 0
 449              		.cfi_startproc
 450 0000 80B5     		push	{r7, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 00AF     		add	r7, sp, #0
 455              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_SAMPLE_MODE_SEL == ADC_1__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_1_CONTINUOUS_EN);
 456              		.loc 1 384 0
 457 0004 034B     		ldr	r3, .L27
 458 0006 034A     		ldr	r2, .L27
 459 0008 1168     		ldr	r1, [r2]
 460 000a 034A     		ldr	r2, .L27+4
 461 000c 0A40     		and	r2, r1
 462 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_DEFAULT_SAMPLE_MODE == ADC_1__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC_1.c **** }
 463              		.loc 1 386 0
 464 0010 BD46     		mov	sp, r7
 465              		@ sp needed
 466 0012 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 16


 467              	.L28:
 468              		.align	2
 469              	.L27:
 470 0014 04001A40 		.word	1075445764
 471 0018 FFFFFEFF 		.word	-65537
 472              		.cfi_endproc
 473              	.LFE5:
 474              		.size	ADC_1_StopConvert, .-ADC_1_StopConvert
 475              		.section	.text.ADC_1_IsEndConversion,"ax",%progbits
 476              		.align	2
 477              		.global	ADC_1_IsEndConversion
 478              		.code	16
 479              		.thumb_func
 480              		.type	ADC_1_IsEndConversion, %function
 481              	ADC_1_IsEndConversion:
 482              	.LFB6:
 387:.\Generated_Source\PSoC4/ADC_1.c **** 
 388:.\Generated_Source\PSoC4/ADC_1.c **** 
 389:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC_1.c **** *
 393:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC_1.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC_1.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC_1.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC_1.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC_1.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC_1.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC_1.c **** *
 402:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC_1.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC_1.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC_1.c **** *
 410:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC_1.c **** *
 414:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC_1.c **** uint32 ADC_1_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC_1.c **** {
 483              		.loc 1 416 0
 484              		.cfi_startproc
 485 0000 80B5     		push	{r7, lr}
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 7, -8
 488              		.cfi_offset 14, -4
 489 0002 84B0     		sub	sp, sp, #16
 490              		.cfi_def_cfa_offset 24
 491 0004 00AF     		add	r7, sp, #0
 492              		.cfi_def_cfa_register 7
 493 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 17


 417:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 status = 0u;
 494              		.loc 1 417 0
 495 0008 0023     		mov	r3, #0
 496 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC_1.c **** 
 419:.\Generated_Source\PSoC4/ADC_1.c ****     if((retMode & (ADC_1_RETURN_STATUS | ADC_1_WAIT_FOR_RESULT)) != 0u)
 497              		.loc 1 419 0
 498 000c 7A68     		ldr	r2, [r7, #4]
 499 000e 0323     		mov	r3, #3
 500 0010 1340     		and	r3, r2
 501 0012 11D0     		beq	.L30
 502              	.L32:
 420:.\Generated_Source\PSoC4/ADC_1.c ****     {
 421:.\Generated_Source\PSoC4/ADC_1.c ****         do
 422:.\Generated_Source\PSoC4/ADC_1.c ****         {
 423:.\Generated_Source\PSoC4/ADC_1.c ****             status = ADC_1_SAR_INTR_REG & ADC_1_EOS_MASK;
 503              		.loc 1 423 0 discriminator 1
 504 0014 0B4B     		ldr	r3, .L34
 505 0016 1A68     		ldr	r2, [r3]
 506 0018 0123     		mov	r3, #1
 507 001a 1340     		and	r3, r2
 508 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC_1.c ****         }while((status == 0u) && ((retMode & ADC_1_WAIT_FOR_RESULT) != 0u));
 509              		.loc 1 424 0 discriminator 1
 510 001e FB68     		ldr	r3, [r7, #12]
 511 0020 002B     		cmp	r3, #0
 512 0022 03D1     		bne	.L31
 513 0024 7A68     		ldr	r2, [r7, #4]
 514 0026 0223     		mov	r3, #2
 515 0028 1340     		and	r3, r2
 516 002a F3D1     		bne	.L32
 517              	.L31:
 425:.\Generated_Source\PSoC4/ADC_1.c **** 
 426:.\Generated_Source\PSoC4/ADC_1.c ****         if(status != 0u)
 518              		.loc 1 426 0
 519 002c FB68     		ldr	r3, [r7, #12]
 520 002e 002B     		cmp	r3, #0
 521 0030 02D0     		beq	.L30
 427:.\Generated_Source\PSoC4/ADC_1.c ****         {
 428:.\Generated_Source\PSoC4/ADC_1.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC_1.c ****             ADC_1_SAR_INTR_REG = ADC_1_EOS_MASK;
 522              		.loc 1 429 0
 523 0032 044B     		ldr	r3, .L34
 524 0034 0122     		mov	r2, #1
 525 0036 1A60     		str	r2, [r3]
 526              	.L30:
 430:.\Generated_Source\PSoC4/ADC_1.c ****         }
 431:.\Generated_Source\PSoC4/ADC_1.c ****     }
 432:.\Generated_Source\PSoC4/ADC_1.c **** 
 433:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC_1.c ****         if((retMode & (ADC_1_RETURN_STATUS_INJ | ADC_1_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC_1.c ****         {
 436:.\Generated_Source\PSoC4/ADC_1.c ****             do
 437:.\Generated_Source\PSoC4/ADC_1.c ****             {
 438:.\Generated_Source\PSoC4/ADC_1.c ****                 status |= ADC_1_SAR_INTR_REG & ADC_1_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC_1.c ****             }while(((status & ADC_1_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC_1.c ****                    ((retMode & ADC_1_WAIT_FOR_RESULT_INJ) != 0u));
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 18


 441:.\Generated_Source\PSoC4/ADC_1.c **** 
 442:.\Generated_Source\PSoC4/ADC_1.c ****             if((status & ADC_1_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC_1.c ****             {
 444:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_INTR_REG = ADC_1_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC_1.c ****             }
 447:.\Generated_Source\PSoC4/ADC_1.c ****         }
 448:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC_1.c **** 
 450:.\Generated_Source\PSoC4/ADC_1.c ****     return (status);
 527              		.loc 1 450 0
 528 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC_1.c **** }
 529              		.loc 1 451 0
 530 003a 181C     		mov	r0, r3
 531 003c BD46     		mov	sp, r7
 532 003e 04B0     		add	sp, sp, #16
 533              		@ sp needed
 534 0040 80BD     		pop	{r7, pc}
 535              	.L35:
 536 0042 C046     		.align	2
 537              	.L34:
 538 0044 10021A40 		.word	1075446288
 539              		.cfi_endproc
 540              	.LFE6:
 541              		.size	ADC_1_IsEndConversion, .-ADC_1_IsEndConversion
 542              		.section	.text.ADC_1_GetResult16,"ax",%progbits
 543              		.align	2
 544              		.global	ADC_1_GetResult16
 545              		.code	16
 546              		.thumb_func
 547              		.type	ADC_1_GetResult16, %function
 548              	ADC_1_GetResult16:
 549              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC_1.c **** 
 453:.\Generated_Source\PSoC4/ADC_1.c **** 
 454:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_GetResult16
 456:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC_1.c **** *
 458:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC_1.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC_1.c **** *
 461:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC_1.c **** *
 465:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC_1.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC_1.c **** *
 468:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC_1.c **** int16 ADC_1_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC_1.c **** {
 550              		.loc 1 470 0
 551              		.cfi_startproc
 552 0000 80B5     		push	{r7, lr}
 553              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 19


 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 84B0     		sub	sp, sp, #16
 557              		.cfi_def_cfa_offset 24
 558 0004 00AF     		add	r7, sp, #0
 559              		.cfi_def_cfa_register 7
 560 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC_1.c **** 
 473:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 561              		.loc 1 474 0
 562 0008 7B68     		ldr	r3, [r7, #4]
 563 000a 002B     		cmp	r3, #0
 564 000c 02D0     		beq	.L37
 565              		.loc 1 474 0 is_stmt 0 discriminator 1
 566 000e 0020     		mov	r0, #0
 567 0010 FFF7FEFF 		bl	CyHalt
 568              	.L37:
 475:.\Generated_Source\PSoC4/ADC_1.c **** 
 476:.\Generated_Source\PSoC4/ADC_1.c ****     if(chan < ADC_1_SEQUENCED_CHANNELS_NUM)
 569              		.loc 1 476 0 is_stmt 1
 570 0014 7B68     		ldr	r3, [r7, #4]
 571 0016 002B     		cmp	r3, #0
 572 0018 08D1     		bne	.L38
 477:.\Generated_Source\PSoC4/ADC_1.c ****     {
 478:.\Generated_Source\PSoC4/ADC_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 573              		.loc 1 478 0
 574 001a 7B68     		ldr	r3, [r7, #4]
 575 001c 9B00     		lsl	r3, r3, #2
 576 001e 084A     		ldr	r2, .L41
 577 0020 9B18     		add	r3, r3, r2
 578 0022 1B68     		ldr	r3, [r3]
 579 0024 1B04     		lsl	r3, r3, #16
 580 0026 1B0C     		lsr	r3, r3, #16
 581 0028 FB60     		str	r3, [r7, #12]
 582 002a 01E0     		b	.L39
 583              	.L38:
 479:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC_1.c ****     }
 481:.\Generated_Source\PSoC4/ADC_1.c ****     else
 482:.\Generated_Source\PSoC4/ADC_1.c ****     {
 483:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC_1.c ****             result = ADC_1_SAR_INJ_RESULT_REG & ADC_1_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC_1.c ****         #else
 486:.\Generated_Source\PSoC4/ADC_1.c ****             result = 0u;
 584              		.loc 1 486 0
 585 002c 0023     		mov	r3, #0
 586 002e FB60     		str	r3, [r7, #12]
 587              	.L39:
 487:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC_1.c ****     }
 489:.\Generated_Source\PSoC4/ADC_1.c **** 
 490:.\Generated_Source\PSoC4/ADC_1.c ****     return ( (int16)result );
 588              		.loc 1 490 0
 589 0030 FB68     		ldr	r3, [r7, #12]
 590 0032 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 20


 591 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC_1.c **** }
 592              		.loc 1 491 0
 593 0036 181C     		mov	r0, r3
 594 0038 BD46     		mov	sp, r7
 595 003a 04B0     		add	sp, sp, #16
 596              		@ sp needed
 597 003c 80BD     		pop	{r7, pc}
 598              	.L42:
 599 003e C046     		.align	2
 600              	.L41:
 601 0040 80011A40 		.word	1075446144
 602              		.cfi_endproc
 603              	.LFE7:
 604              		.size	ADC_1_GetResult16, .-ADC_1_GetResult16
 605              		.section	.text.ADC_1_SetChanMask,"ax",%progbits
 606              		.align	2
 607              		.global	ADC_1_SetChanMask
 608              		.code	16
 609              		.thumb_func
 610              		.type	ADC_1_SetChanMask, %function
 611              	ADC_1_SetChanMask:
 612              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC_1.c **** 
 493:.\Generated_Source\PSoC4/ADC_1.c **** 
 494:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetChanMask
 496:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC_1.c **** *
 498:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC_1.c **** *
 501:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC_1.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC_1.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC_1.c **** *
 510:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC_1.c **** *
 513:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC_1.c **** {
 613              		.loc 1 515 0
 614              		.cfi_startproc
 615 0000 80B5     		push	{r7, lr}
 616              		.cfi_def_cfa_offset 8
 617              		.cfi_offset 7, -8
 618              		.cfi_offset 14, -4
 619 0002 82B0     		sub	sp, sp, #8
 620              		.cfi_def_cfa_offset 16
 621 0004 00AF     		add	r7, sp, #0
 622              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 21


 623 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CHAN_EN_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 624              		.loc 1 516 0
 625 0008 034B     		ldr	r3, .L44
 626 000a 7968     		ldr	r1, [r7, #4]
 627 000c 0122     		mov	r2, #1
 628 000e 0A40     		and	r2, r1
 629 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC_1.c **** }
 630              		.loc 1 517 0
 631 0012 BD46     		mov	sp, r7
 632 0014 02B0     		add	sp, sp, #8
 633              		@ sp needed
 634 0016 80BD     		pop	{r7, pc}
 635              	.L45:
 636              		.align	2
 637              	.L44:
 638 0018 20001A40 		.word	1075445792
 639              		.cfi_endproc
 640              	.LFE8:
 641              		.size	ADC_1_SetChanMask, .-ADC_1_SetChanMask
 642              		.section	.text.ADC_1_SetLowLimit,"ax",%progbits
 643              		.align	2
 644              		.global	ADC_1_SetLowLimit
 645              		.code	16
 646              		.thumb_func
 647              		.type	ADC_1_SetLowLimit, %function
 648              	ADC_1_SetLowLimit:
 649              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC_1.c **** 
 519:.\Generated_Source\PSoC4/ADC_1.c **** #if(ADC_1_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC_1.c **** 
 521:.\Generated_Source\PSoC4/ADC_1.c **** 
 522:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_EnableInjection
 524:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC_1.c ****     *
 526:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC_1.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC_1.c ****     *
 529:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC_1.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC_1.c ****     *
 532:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC_1.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC_1.c ****     *
 535:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC_1.c ****     void ADC_1_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC_1.c ****     {
 538:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_1_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC_1.c ****     }
 540:.\Generated_Source\PSoC4/ADC_1.c **** 
 541:.\Generated_Source\PSoC4/ADC_1.c **** #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC_1.c **** 
 543:.\Generated_Source\PSoC4/ADC_1.c **** 
 544:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetLowLimit
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 22


 546:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC_1.c **** *
 548:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC_1.c **** *
 551:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC_1.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC_1.c **** *
 554:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC_1.c **** *
 557:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC_1.c **** {
 650              		.loc 1 559 0
 651              		.cfi_startproc
 652 0000 80B5     		push	{r7, lr}
 653              		.cfi_def_cfa_offset 8
 654              		.cfi_offset 7, -8
 655              		.cfi_offset 14, -4
 656 0002 82B0     		sub	sp, sp, #8
 657              		.cfi_def_cfa_offset 16
 658 0004 00AF     		add	r7, sp, #0
 659              		.cfi_def_cfa_register 7
 660 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_1_RANGE_LOW_MASK);
 661              		.loc 1 560 0
 662 0008 084B     		ldr	r3, .L47
 663 000a 084A     		ldr	r2, .L47
 664 000c 1268     		ldr	r2, [r2]
 665 000e 120C     		lsr	r2, r2, #16
 666 0010 1204     		lsl	r2, r2, #16
 667 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_1_RANGE_LOW_MASK;
 668              		.loc 1 561 0
 669 0014 054B     		ldr	r3, .L47
 670 0016 054A     		ldr	r2, .L47
 671 0018 1168     		ldr	r1, [r2]
 672 001a 7A68     		ldr	r2, [r7, #4]
 673 001c 1204     		lsl	r2, r2, #16
 674 001e 120C     		lsr	r2, r2, #16
 675 0020 0A43     		orr	r2, r1
 676 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC_1.c **** }
 677              		.loc 1 562 0
 678 0024 BD46     		mov	sp, r7
 679 0026 02B0     		add	sp, sp, #8
 680              		@ sp needed
 681 0028 80BD     		pop	{r7, pc}
 682              	.L48:
 683 002a C046     		.align	2
 684              	.L47:
 685 002c 18001A40 		.word	1075445784
 686              		.cfi_endproc
 687              	.LFE9:
 688              		.size	ADC_1_SetLowLimit, .-ADC_1_SetLowLimit
 689              		.section	.text.ADC_1_SetHighLimit,"ax",%progbits
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 23


 690              		.align	2
 691              		.global	ADC_1_SetHighLimit
 692              		.code	16
 693              		.thumb_func
 694              		.type	ADC_1_SetHighLimit, %function
 695              	ADC_1_SetHighLimit:
 696              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC_1.c **** 
 564:.\Generated_Source\PSoC4/ADC_1.c **** 
 565:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC_1.c **** *
 569:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC_1.c **** *
 572:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC_1.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC_1.c **** *
 575:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC_1.c **** *
 578:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC_1.c **** {
 697              		.loc 1 580 0
 698              		.cfi_startproc
 699 0000 80B5     		push	{r7, lr}
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 7, -8
 702              		.cfi_offset 14, -4
 703 0002 82B0     		sub	sp, sp, #8
 704              		.cfi_def_cfa_offset 16
 705 0004 00AF     		add	r7, sp, #0
 706              		.cfi_def_cfa_register 7
 707 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_1_RANGE_HIGH_MASK);
 708              		.loc 1 581 0
 709 0008 074B     		ldr	r3, .L50
 710 000a 074A     		ldr	r2, .L50
 711 000c 1268     		ldr	r2, [r2]
 712 000e 1204     		lsl	r2, r2, #16
 713 0010 120C     		lsr	r2, r2, #16
 714 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_1_RANGE_HIGH_OFFSET);
 715              		.loc 1 582 0
 716 0014 044B     		ldr	r3, .L50
 717 0016 044A     		ldr	r2, .L50
 718 0018 1168     		ldr	r1, [r2]
 719 001a 7A68     		ldr	r2, [r7, #4]
 720 001c 1204     		lsl	r2, r2, #16
 721 001e 0A43     		orr	r2, r1
 722 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC_1.c **** }
 723              		.loc 1 583 0
 724 0022 BD46     		mov	sp, r7
 725 0024 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 24


 726              		@ sp needed
 727 0026 80BD     		pop	{r7, pc}
 728              	.L51:
 729              		.align	2
 730              	.L50:
 731 0028 18001A40 		.word	1075445784
 732              		.cfi_endproc
 733              	.LFE10:
 734              		.size	ADC_1_SetHighLimit, .-ADC_1_SetHighLimit
 735              		.section	.text.ADC_1_SetLimitMask,"ax",%progbits
 736              		.align	2
 737              		.global	ADC_1_SetLimitMask
 738              		.code	16
 739              		.thumb_func
 740              		.type	ADC_1_SetLimitMask, %function
 741              	ADC_1_SetLimitMask:
 742              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC_1.c **** 
 585:.\Generated_Source\PSoC4/ADC_1.c **** 
 586:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC_1.c **** *
 590:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC_1.c **** *
 593:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC_1.c **** *
 599:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC_1.c **** *
 602:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC_1.c **** {
 743              		.loc 1 604 0
 744              		.cfi_startproc
 745 0000 80B5     		push	{r7, lr}
 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 7, -8
 748              		.cfi_offset 14, -4
 749 0002 82B0     		sub	sp, sp, #8
 750              		.cfi_def_cfa_offset 16
 751 0004 00AF     		add	r7, sp, #0
 752              		.cfi_def_cfa_register 7
 753 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 754              		.loc 1 605 0
 755 0008 034B     		ldr	r3, .L53
 756 000a 7968     		ldr	r1, [r7, #4]
 757 000c 0122     		mov	r2, #1
 758 000e 0A40     		and	r2, r1
 759 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC_1.c **** }
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 25


 760              		.loc 1 606 0
 761 0012 BD46     		mov	sp, r7
 762 0014 02B0     		add	sp, sp, #8
 763              		@ sp needed
 764 0016 80BD     		pop	{r7, pc}
 765              	.L54:
 766              		.align	2
 767              	.L53:
 768 0018 38021A40 		.word	1075446328
 769              		.cfi_endproc
 770              	.LFE11:
 771              		.size	ADC_1_SetLimitMask, .-ADC_1_SetLimitMask
 772              		.section	.text.ADC_1_SetSatMask,"ax",%progbits
 773              		.align	2
 774              		.global	ADC_1_SetSatMask
 775              		.code	16
 776              		.thumb_func
 777              		.type	ADC_1_SetSatMask, %function
 778              	ADC_1_SetSatMask:
 779              	.LFB12:
 607:.\Generated_Source\PSoC4/ADC_1.c **** 
 608:.\Generated_Source\PSoC4/ADC_1.c **** 
 609:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetSatMask
 611:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC_1.c **** *
 613:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC_1.c **** *
 616:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC_1.c **** *
 622:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC_1.c **** *
 625:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC_1.c **** {
 780              		.loc 1 627 0
 781              		.cfi_startproc
 782 0000 80B5     		push	{r7, lr}
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 82B0     		sub	sp, sp, #8
 787              		.cfi_def_cfa_offset 16
 788 0004 00AF     		add	r7, sp, #0
 789              		.cfi_def_cfa_register 7
 790 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 791              		.loc 1 628 0
 792 0008 034B     		ldr	r3, .L56
 793 000a 7968     		ldr	r1, [r7, #4]
 794 000c 0122     		mov	r2, #1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 26


 795 000e 0A40     		and	r2, r1
 796 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC_1.c **** }
 797              		.loc 1 629 0
 798 0012 BD46     		mov	sp, r7
 799 0014 02B0     		add	sp, sp, #8
 800              		@ sp needed
 801 0016 80BD     		pop	{r7, pc}
 802              	.L57:
 803              		.align	2
 804              	.L56:
 805 0018 28021A40 		.word	1075446312
 806              		.cfi_endproc
 807              	.LFE12:
 808              		.size	ADC_1_SetSatMask, .-ADC_1_SetSatMask
 809              		.section	.text.ADC_1_SetOffset,"ax",%progbits
 810              		.align	2
 811              		.global	ADC_1_SetOffset
 812              		.code	16
 813              		.thumb_func
 814              		.type	ADC_1_SetOffset, %function
 815              	ADC_1_SetOffset:
 816              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC_1.c **** 
 631:.\Generated_Source\PSoC4/ADC_1.c **** 
 632:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetOffset
 634:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC_1.c **** *
 636:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC_1.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC_1.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC_1.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC_1.c **** *
 642:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC_1.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC_1.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC_1.c **** *
 647:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC_1.c **** *
 650:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC_1.c **** *
 653:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC_1.c **** {
 817              		.loc 1 655 0
 818              		.cfi_startproc
 819 0000 80B5     		push	{r7, lr}
 820              		.cfi_def_cfa_offset 8
 821              		.cfi_offset 7, -8
 822              		.cfi_offset 14, -4
 823 0002 82B0     		sub	sp, sp, #8
 824              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 27


 825 0004 00AF     		add	r7, sp, #0
 826              		.cfi_def_cfa_register 7
 827 0006 7860     		str	r0, [r7, #4]
 828 0008 0A1C     		mov	r2, r1
 829 000a BB1C     		add	r3, r7, #2
 830 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 831              		.loc 1 657 0
 832 000e 7B68     		ldr	r3, [r7, #4]
 833 0010 002B     		cmp	r3, #0
 834 0012 02D0     		beq	.L59
 835              		.loc 1 657 0 is_stmt 0 discriminator 1
 836 0014 0020     		mov	r0, #0
 837 0016 FFF7FEFF 		bl	CyHalt
 838              	.L59:
 658:.\Generated_Source\PSoC4/ADC_1.c **** 
 659:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_offset[chan] = offset;
 839              		.loc 1 659 0 is_stmt 1
 840 001a 044B     		ldr	r3, .L60
 841 001c 7A68     		ldr	r2, [r7, #4]
 842 001e 5200     		lsl	r2, r2, #1
 843 0020 B91C     		add	r1, r7, #2
 844 0022 0988     		ldrh	r1, [r1]
 845 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC_1.c **** }
 846              		.loc 1 660 0
 847 0026 BD46     		mov	sp, r7
 848 0028 02B0     		add	sp, sp, #8
 849              		@ sp needed
 850 002a 80BD     		pop	{r7, pc}
 851              	.L61:
 852              		.align	2
 853              	.L60:
 854 002c 00000000 		.word	ADC_1_offset
 855              		.cfi_endproc
 856              	.LFE13:
 857              		.size	ADC_1_SetOffset, .-ADC_1_SetOffset
 858              		.section	.text.ADC_1_SetGain,"ax",%progbits
 859              		.align	2
 860              		.global	ADC_1_SetGain
 861              		.code	16
 862              		.thumb_func
 863              		.type	ADC_1_SetGain, %function
 864              	ADC_1_SetGain:
 865              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC_1.c **** 
 662:.\Generated_Source\PSoC4/ADC_1.c **** 
 663:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetGain
 665:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC_1.c **** *
 667:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC_1.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC_1.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC_1.c **** *  calibrate the ADC with a known input or if an external reference is
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 28


 672:.\Generated_Source\PSoC4/ADC_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC_1.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC_1.c **** *
 676:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC_1.c **** *
 680:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC_1.c **** *
 683:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC_1.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC_1.c **** *
 687:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC_1.c **** {
 866              		.loc 1 689 0
 867              		.cfi_startproc
 868 0000 80B5     		push	{r7, lr}
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 7, -8
 871              		.cfi_offset 14, -4
 872 0002 82B0     		sub	sp, sp, #8
 873              		.cfi_def_cfa_offset 16
 874 0004 00AF     		add	r7, sp, #0
 875              		.cfi_def_cfa_register 7
 876 0006 7860     		str	r0, [r7, #4]
 877 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 878              		.loc 1 691 0
 879 000a 7B68     		ldr	r3, [r7, #4]
 880 000c 002B     		cmp	r3, #0
 881 000e 02D0     		beq	.L63
 882              		.loc 1 691 0 is_stmt 0 discriminator 1
 883 0010 0020     		mov	r0, #0
 884 0012 FFF7FEFF 		bl	CyHalt
 885              	.L63:
 692:.\Generated_Source\PSoC4/ADC_1.c **** 
 693:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_countsPer10Volt[chan] = adcGain;
 886              		.loc 1 693 0 is_stmt 1
 887 0016 044B     		ldr	r3, .L64
 888 0018 7A68     		ldr	r2, [r7, #4]
 889 001a 9200     		lsl	r2, r2, #2
 890 001c 3968     		ldr	r1, [r7]
 891 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC_1.c **** }
 892              		.loc 1 694 0
 893 0020 BD46     		mov	sp, r7
 894 0022 02B0     		add	sp, sp, #8
 895              		@ sp needed
 896 0024 80BD     		pop	{r7, pc}
 897              	.L65:
 898 0026 C046     		.align	2
 899              	.L64:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 29


 900 0028 00000000 		.word	ADC_1_countsPer10Volt
 901              		.cfi_endproc
 902              	.LFE14:
 903              		.size	ADC_1_SetGain, .-ADC_1_SetGain
 904              		.section	.text.ADC_1_CountsTo_mVolts,"ax",%progbits
 905              		.align	2
 906              		.global	ADC_1_CountsTo_mVolts
 907              		.code	16
 908              		.thumb_func
 909              		.type	ADC_1_CountsTo_mVolts, %function
 910              	ADC_1_CountsTo_mVolts:
 911              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC_1.c **** 
 696:.\Generated_Source\PSoC4/ADC_1.c **** 
 697:.\Generated_Source\PSoC4/ADC_1.c **** #if(ADC_1_DEFAULT_JUSTIFICATION_SEL == ADC_1__RIGHT)
 698:.\Generated_Source\PSoC4/ADC_1.c **** 
 699:.\Generated_Source\PSoC4/ADC_1.c **** 
 700:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC_1.c ****     *
 704:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC_1.c ****     *
 708:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC_1.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC_1.c ****     *
 712:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC_1.c ****     *
 715:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC_1.c ****     *
 720:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC_1.c ****     int16 ADC_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC_1.c ****     {
 912              		.loc 1 722 0
 913              		.cfi_startproc
 914 0000 80B5     		push	{r7, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 7, -8
 917              		.cfi_offset 14, -4
 918 0002 84B0     		sub	sp, sp, #16
 919              		.cfi_def_cfa_offset 24
 920 0004 00AF     		add	r7, sp, #0
 921              		.cfi_def_cfa_register 7
 922 0006 7860     		str	r0, [r7, #4]
 923 0008 0A1C     		mov	r2, r1
 924 000a BB1C     		add	r3, r7, #2
 925 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC_1.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC_1.c **** 
 725:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 30


 726:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 926              		.loc 1 726 0
 927 000e 7B68     		ldr	r3, [r7, #4]
 928 0010 002B     		cmp	r3, #0
 929 0012 02D0     		beq	.L67
 930              		.loc 1 726 0 is_stmt 0 discriminator 1
 931 0014 0020     		mov	r0, #0
 932 0016 FFF7FEFF 		bl	CyHalt
 933              	.L67:
 727:.\Generated_Source\PSoC4/ADC_1.c **** 
 728:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC_1.c ****             {
 732:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC_1.c ****             }
 734:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC_1.c **** 
 736:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 934              		.loc 1 737 0 is_stmt 1
 935 001a BB1C     		add	r3, r7, #2
 936 001c 1A88     		ldrh	r2, [r3]
 937 001e 1E4B     		ldr	r3, .L73
 938 0020 7968     		ldr	r1, [r7, #4]
 939 0022 4900     		lsl	r1, r1, #1
 940 0024 CB5A     		ldrh	r3, [r1, r3]
 941 0026 9BB2     		uxth	r3, r3
 942 0028 9BB2     		uxth	r3, r3
 943 002a D31A     		sub	r3, r2, r3
 944 002c 9AB2     		uxth	r2, r3
 945 002e BB1C     		add	r3, r7, #2
 946 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC_1.c **** 
 739:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 947              		.loc 1 739 0
 948 0032 BB1C     		add	r3, r7, #2
 949 0034 0021     		mov	r1, #0
 950 0036 5B5E     		ldrsh	r3, [r3, r1]
 951 0038 184A     		ldr	r2, .L73+4
 952 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC_1.c ****                  (ADC_1_countsPer10Volt[chan] / 2) : (-(ADC_1_countsPer10Volt[chan] / 2)) ))
 953              		.loc 1 740 0
 954 003c BB1C     		add	r3, r7, #2
 955 003e 0021     		mov	r1, #0
 956 0040 5B5E     		ldrsh	r3, [r3, r1]
 957 0042 002B     		cmp	r3, #0
 958 0044 08DD     		ble	.L68
 959              		.loc 1 740 0 is_stmt 0 discriminator 1
 960 0046 164B     		ldr	r3, .L73+8
 961 0048 7968     		ldr	r1, [r7, #4]
 962 004a 8900     		lsl	r1, r1, #2
 963 004c CB58     		ldr	r3, [r1, r3]
 964 004e 002B     		cmp	r3, #0
 965 0050 00DA     		bge	.L69
 966 0052 0133     		add	r3, r3, #1
 967              	.L69:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 31


 968 0054 5B10     		asr	r3, r3, #1
 969 0056 08E0     		b	.L70
 970              	.L68:
 971              		.loc 1 740 0 discriminator 2
 972 0058 114B     		ldr	r3, .L73+8
 973 005a 7968     		ldr	r1, [r7, #4]
 974 005c 8900     		lsl	r1, r1, #2
 975 005e CB58     		ldr	r3, [r1, r3]
 976 0060 002B     		cmp	r3, #0
 977 0062 00DA     		bge	.L71
 978 0064 0133     		add	r3, r3, #1
 979              	.L71:
 980 0066 5B10     		asr	r3, r3, #1
 981 0068 5B42     		neg	r3, r3
 982              	.L70:
 739:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 983              		.loc 1 739 0 is_stmt 1
 984 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC_1.c ****                  / ADC_1_countsPer10Volt[chan]);
 985              		.loc 1 741 0
 986 006c 0C4B     		ldr	r3, .L73+8
 987 006e 7968     		ldr	r1, [r7, #4]
 988 0070 8900     		lsl	r1, r1, #2
 989 0072 CB58     		ldr	r3, [r1, r3]
 990 0074 101C     		mov	r0, r2
 991 0076 191C     		mov	r1, r3
 992 0078 FFF7FEFF 		bl	__aeabi_idiv
 993 007c 031C     		mov	r3, r0
 994 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 995              		.loc 1 739 0
 996 0080 3B1C     		mov	r3, r7
 997 0082 0E33     		add	r3, r3, #14
 998 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC_1.c **** 
 743:.\Generated_Source\PSoC4/ADC_1.c ****         return( mVolts );
 999              		.loc 1 743 0
 1000 0086 3B1C     		mov	r3, r7
 1001 0088 0E33     		add	r3, r3, #14
 1002 008a 1B88     		ldrh	r3, [r3]
 1003 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1004              		.loc 1 744 0
 1005 008e 181C     		mov	r0, r3
 1006 0090 BD46     		mov	sp, r7
 1007 0092 04B0     		add	sp, sp, #16
 1008              		@ sp needed
 1009 0094 80BD     		pop	{r7, pc}
 1010              	.L74:
 1011 0096 C046     		.align	2
 1012              	.L73:
 1013 0098 00000000 		.word	ADC_1_offset
 1014 009c 10270000 		.word	10000
 1015 00a0 00000000 		.word	ADC_1_countsPer10Volt
 1016              		.cfi_endproc
 1017              	.LFE15:
 1018              		.size	ADC_1_CountsTo_mVolts, .-ADC_1_CountsTo_mVolts
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 32


 1019              		.global	__aeabi_lmul
 1020              		.global	__aeabi_ldivmod
 1021              		.section	.text.ADC_1_CountsTo_uVolts,"ax",%progbits
 1022              		.align	2
 1023              		.global	ADC_1_CountsTo_uVolts
 1024              		.code	16
 1025              		.thumb_func
 1026              		.type	ADC_1_CountsTo_uVolts, %function
 1027              	ADC_1_CountsTo_uVolts:
 1028              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC_1.c **** 
 746:.\Generated_Source\PSoC4/ADC_1.c **** 
 747:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC_1.c ****     *
 751:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC_1.c ****     *
 755:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC_1.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC_1.c ****     *
 759:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC_1.c ****     *
 762:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC_1.c ****     *
 767:.\Generated_Source\PSoC4/ADC_1.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC_1.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC_1.c ****     *
 774:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC_1.c ****     int32 ADC_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC_1.c ****     {
 1029              		.loc 1 776 0
 1030              		.cfi_startproc
 1031 0000 B0B5     		push	{r4, r5, r7, lr}
 1032              		.cfi_def_cfa_offset 16
 1033              		.cfi_offset 4, -16
 1034              		.cfi_offset 5, -12
 1035              		.cfi_offset 7, -8
 1036              		.cfi_offset 14, -4
 1037 0002 86B0     		sub	sp, sp, #24
 1038              		.cfi_def_cfa_offset 40
 1039 0004 00AF     		add	r7, sp, #0
 1040              		.cfi_def_cfa_register 7
 1041 0006 F860     		str	r0, [r7, #12]
 1042 0008 0A1C     		mov	r2, r1
 1043 000a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 33


 1044 000c 0A33     		add	r3, r3, #10
 1045 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_1.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC_1.c **** 
 779:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1046              		.loc 1 780 0
 1047 0010 FB68     		ldr	r3, [r7, #12]
 1048 0012 002B     		cmp	r3, #0
 1049 0014 02D0     		beq	.L76
 1050              		.loc 1 780 0 is_stmt 0 discriminator 1
 1051 0016 0020     		mov	r0, #0
 1052 0018 FFF7FEFF 		bl	CyHalt
 1053              	.L76:
 781:.\Generated_Source\PSoC4/ADC_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC_1.c ****             {
 786:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC_1.c ****             }
 788:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC_1.c **** 
 790:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 1054              		.loc 1 791 0 is_stmt 1
 1055 001c 3B1C     		mov	r3, r7
 1056 001e 0A33     		add	r3, r3, #10
 1057 0020 1A88     		ldrh	r2, [r3]
 1058 0022 1B4B     		ldr	r3, .L78+8
 1059 0024 F968     		ldr	r1, [r7, #12]
 1060 0026 4900     		lsl	r1, r1, #1
 1061 0028 CB5A     		ldrh	r3, [r1, r3]
 1062 002a 9BB2     		uxth	r3, r3
 1063 002c 9BB2     		uxth	r3, r3
 1064 002e D31A     		sub	r3, r2, r3
 1065 0030 9AB2     		uxth	r2, r3
 1066 0032 3B1C     		mov	r3, r7
 1067 0034 0A33     		add	r3, r3, #10
 1068 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC_1.c **** 
 793:.\Generated_Source\PSoC4/ADC_1.c ****         uVolts = ((int64)adcCounts * ADC_1_10UV_COUNTS) / ADC_1_countsPer10Volt[chan];
 1069              		.loc 1 793 0
 1070 0038 3B1C     		mov	r3, r7
 1071 003a 0A33     		add	r3, r3, #10
 1072 003c 1B88     		ldrh	r3, [r3]
 1073 003e 1BB2     		sxth	r3, r3
 1074 0040 3B60     		str	r3, [r7]
 1075 0042 DB17     		asr	r3, r3, #31
 1076 0044 7B60     		str	r3, [r7, #4]
 1077 0046 3868     		ldr	r0, [r7]
 1078 0048 7968     		ldr	r1, [r7, #4]
 1079 004a 104B     		ldr	r3, .L78+4
 1080 004c 0E4A     		ldr	r2, .L78
 1081 004e FFF7FEFF 		bl	__aeabi_lmul
 1082 0052 021C     		mov	r2, r0
 1083 0054 0B1C     		mov	r3, r1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 34


 1084 0056 0F49     		ldr	r1, .L78+12
 1085 0058 F868     		ldr	r0, [r7, #12]
 1086 005a 8000     		lsl	r0, r0, #2
 1087 005c 4158     		ldr	r1, [r0, r1]
 1088 005e 0C1C     		mov	r4, r1
 1089 0060 C917     		asr	r1, r1, #31
 1090 0062 0D1C     		mov	r5, r1
 1091 0064 101C     		mov	r0, r2
 1092 0066 191C     		mov	r1, r3
 1093 0068 221C     		mov	r2, r4
 1094 006a 2B1C     		mov	r3, r5
 1095 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1096 0070 031C     		mov	r3, r0
 1097 0072 0C1C     		mov	r4, r1
 1098 0074 3B61     		str	r3, [r7, #16]
 1099 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC_1.c **** 
 795:.\Generated_Source\PSoC4/ADC_1.c ****         return( (int32)uVolts );
 1100              		.loc 1 795 0
 1101 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1102              		.loc 1 796 0
 1103 007a 181C     		mov	r0, r3
 1104 007c BD46     		mov	sp, r7
 1105 007e 06B0     		add	sp, sp, #24
 1106              		@ sp needed
 1107 0080 B0BD     		pop	{r4, r5, r7, pc}
 1108              	.L79:
 1109 0082 C046C046 		.align	3
 1109      C046
 1110              	.L78:
 1111 0088 80969800 		.word	10000000
 1112 008c 00000000 		.word	0
 1113 0090 00000000 		.word	ADC_1_offset
 1114 0094 00000000 		.word	ADC_1_countsPer10Volt
 1115              		.cfi_endproc
 1116              	.LFE16:
 1117              		.size	ADC_1_CountsTo_uVolts, .-ADC_1_CountsTo_uVolts
 1118              		.global	__aeabi_i2f
 1119              		.global	__aeabi_fmul
 1120              		.global	__aeabi_fdiv
 1121              		.section	.text.ADC_1_CountsTo_Volts,"ax",%progbits
 1122              		.align	2
 1123              		.global	ADC_1_CountsTo_Volts
 1124              		.code	16
 1125              		.thumb_func
 1126              		.type	ADC_1_CountsTo_Volts, %function
 1127              	ADC_1_CountsTo_Volts:
 1128              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC_1.c **** 
 798:.\Generated_Source\PSoC4/ADC_1.c **** 
 799:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC_1.c ****     *
 803:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC_1.c ****     *  Converts the ADC output to Volts as a floating point number.
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 35


 805:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC_1.c ****     *
 807:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC_1.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC_1.c ****     *
 811:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC_1.c ****     *
 814:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC_1.c ****     *
 819:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC_1.c ****     float32 ADC_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC_1.c ****     {
 1129              		.loc 1 821 0
 1130              		.cfi_startproc
 1131 0000 90B5     		push	{r4, r7, lr}
 1132              		.cfi_def_cfa_offset 12
 1133              		.cfi_offset 4, -12
 1134              		.cfi_offset 7, -8
 1135              		.cfi_offset 14, -4
 1136 0002 85B0     		sub	sp, sp, #20
 1137              		.cfi_def_cfa_offset 32
 1138 0004 00AF     		add	r7, sp, #0
 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]
 1141 0008 0A1C     		mov	r2, r1
 1142 000a BB1C     		add	r3, r7, #2
 1143 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC_1.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC_1.c **** 
 824:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1144              		.loc 1 825 0
 1145 000e 7B68     		ldr	r3, [r7, #4]
 1146 0010 002B     		cmp	r3, #0
 1147 0012 02D0     		beq	.L81
 1148              		.loc 1 825 0 is_stmt 0 discriminator 1
 1149 0014 0020     		mov	r0, #0
 1150 0016 FFF7FEFF 		bl	CyHalt
 1151              	.L81:
 826:.\Generated_Source\PSoC4/ADC_1.c **** 
 827:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC_1.c ****             {
 831:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC_1.c ****             }
 833:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC_1.c **** 
 835:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 1152              		.loc 1 836 0 is_stmt 1
 1153 001a BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 36


 1154 001c 1A88     		ldrh	r2, [r3]
 1155 001e 154B     		ldr	r3, .L83
 1156 0020 7968     		ldr	r1, [r7, #4]
 1157 0022 4900     		lsl	r1, r1, #1
 1158 0024 CB5A     		ldrh	r3, [r1, r3]
 1159 0026 9BB2     		uxth	r3, r3
 1160 0028 9BB2     		uxth	r3, r3
 1161 002a D31A     		sub	r3, r2, r3
 1162 002c 9AB2     		uxth	r2, r3
 1163 002e BB1C     		add	r3, r7, #2
 1164 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC_1.c **** 
 838:.\Generated_Source\PSoC4/ADC_1.c ****         volts = ((float32)adcCounts * ADC_1_10V_COUNTS) / (float32)ADC_1_countsPer10Volt[chan];
 1165              		.loc 1 838 0
 1166 0032 BB1C     		add	r3, r7, #2
 1167 0034 0022     		mov	r2, #0
 1168 0036 9B5E     		ldrsh	r3, [r3, r2]
 1169 0038 181C     		mov	r0, r3
 1170 003a FFF7FEFF 		bl	__aeabi_i2f
 1171 003e 031C     		add	r3, r0, #0
 1172 0040 181C     		add	r0, r3, #0
 1173 0042 0D49     		ldr	r1, .L83+4
 1174 0044 FFF7FEFF 		bl	__aeabi_fmul
 1175 0048 031C     		add	r3, r0, #0
 1176 004a 1C1C     		add	r4, r3, #0
 1177 004c 0B4B     		ldr	r3, .L83+8
 1178 004e 7A68     		ldr	r2, [r7, #4]
 1179 0050 9200     		lsl	r2, r2, #2
 1180 0052 D358     		ldr	r3, [r2, r3]
 1181 0054 181C     		mov	r0, r3
 1182 0056 FFF7FEFF 		bl	__aeabi_i2f
 1183 005a 031C     		add	r3, r0, #0
 1184 005c 201C     		add	r0, r4, #0
 1185 005e 191C     		add	r1, r3, #0
 1186 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1187 0064 031C     		add	r3, r0, #0
 1188 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC_1.c **** 
 840:.\Generated_Source\PSoC4/ADC_1.c ****         return( volts );
 1189              		.loc 1 840 0
 1190 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1191              		.loc 1 841 0
 1192 006a 181C     		add	r0, r3, #0
 1193 006c BD46     		mov	sp, r7
 1194 006e 05B0     		add	sp, sp, #20
 1195              		@ sp needed
 1196 0070 90BD     		pop	{r4, r7, pc}
 1197              	.L84:
 1198 0072 C046     		.align	2
 1199              	.L83:
 1200 0074 00000000 		.word	ADC_1_offset
 1201 0078 00002041 		.word	1092616192
 1202 007c 00000000 		.word	ADC_1_countsPer10Volt
 1203              		.cfi_endproc
 1204              	.LFE17:
 1205              		.size	ADC_1_CountsTo_Volts, .-ADC_1_CountsTo_Volts
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 37


 1206              		.text
 1207              	.Letext0:
 1208              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1209              		.section	.debug_info,"",%progbits
 1210              	.Ldebug_info0:
 1211 0000 70040000 		.4byte	0x470
 1212 0004 0400     		.2byte	0x4
 1213 0006 00000000 		.4byte	.Ldebug_abbrev0
 1214 000a 04       		.byte	0x4
 1215 000b 01       		.uleb128 0x1
 1216 000c BB000000 		.4byte	.LASF59
 1217 0010 01       		.byte	0x1
 1218 0011 06000000 		.4byte	.LASF60
 1219 0015 AA010000 		.4byte	.LASF61
 1220 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1221 001d 00000000 		.4byte	0
 1222 0021 00000000 		.4byte	.Ldebug_line0
 1223 0025 02       		.uleb128 0x2
 1224 0026 01       		.byte	0x1
 1225 0027 06       		.byte	0x6
 1226 0028 76030000 		.4byte	.LASF0
 1227 002c 02       		.uleb128 0x2
 1228 002d 01       		.byte	0x1
 1229 002e 08       		.byte	0x8
 1230 002f 60010000 		.4byte	.LASF1
 1231 0033 02       		.uleb128 0x2
 1232 0034 02       		.byte	0x2
 1233 0035 05       		.byte	0x5
 1234 0036 15030000 		.4byte	.LASF2
 1235 003a 02       		.uleb128 0x2
 1236 003b 02       		.byte	0x2
 1237 003c 07       		.byte	0x7
 1238 003d 51000000 		.4byte	.LASF3
 1239 0041 02       		.uleb128 0x2
 1240 0042 04       		.byte	0x4
 1241 0043 05       		.byte	0x5
 1242 0044 62030000 		.4byte	.LASF4
 1243 0048 02       		.uleb128 0x2
 1244 0049 04       		.byte	0x4
 1245 004a 07       		.byte	0x7
 1246 004b 46020000 		.4byte	.LASF5
 1247 004f 02       		.uleb128 0x2
 1248 0050 08       		.byte	0x8
 1249 0051 05       		.byte	0x5
 1250 0052 BB020000 		.4byte	.LASF6
 1251 0056 02       		.uleb128 0x2
 1252 0057 08       		.byte	0x8
 1253 0058 07       		.byte	0x7
 1254 0059 79020000 		.4byte	.LASF7
 1255 005d 03       		.uleb128 0x3
 1256 005e 04       		.byte	0x4
 1257 005f 05       		.byte	0x5
 1258 0060 696E7400 		.ascii	"int\000"
 1259 0064 02       		.uleb128 0x2
 1260 0065 04       		.byte	0x4
 1261 0066 07       		.byte	0x7
 1262 0067 58020000 		.4byte	.LASF8
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 38


 1263 006b 04       		.uleb128 0x4
 1264 006c 35030000 		.4byte	.LASF9
 1265 0070 02       		.byte	0x2
 1266 0071 A1       		.byte	0xa1
 1267 0072 2C000000 		.4byte	0x2c
 1268 0076 04       		.uleb128 0x4
 1269 0077 25020000 		.4byte	.LASF10
 1270 007b 02       		.byte	0x2
 1271 007c A2       		.byte	0xa2
 1272 007d 3A000000 		.4byte	0x3a
 1273 0081 04       		.uleb128 0x4
 1274 0082 3F020000 		.4byte	.LASF11
 1275 0086 02       		.byte	0x2
 1276 0087 A3       		.byte	0xa3
 1277 0088 48000000 		.4byte	0x48
 1278 008c 04       		.uleb128 0x4
 1279 008d 90020000 		.4byte	.LASF12
 1280 0091 02       		.byte	0x2
 1281 0092 A5       		.byte	0xa5
 1282 0093 33000000 		.4byte	0x33
 1283 0097 04       		.uleb128 0x4
 1284 0098 A4010000 		.4byte	.LASF13
 1285 009c 02       		.byte	0x2
 1286 009d A6       		.byte	0xa6
 1287 009e 41000000 		.4byte	0x41
 1288 00a2 04       		.uleb128 0x4
 1289 00a3 9C000000 		.4byte	.LASF14
 1290 00a7 02       		.byte	0x2
 1291 00a8 A7       		.byte	0xa7
 1292 00a9 AD000000 		.4byte	0xad
 1293 00ad 02       		.uleb128 0x2
 1294 00ae 04       		.byte	0x4
 1295 00af 04       		.byte	0x4
 1296 00b0 27000000 		.4byte	.LASF15
 1297 00b4 02       		.uleb128 0x2
 1298 00b5 08       		.byte	0x8
 1299 00b6 04       		.byte	0x4
 1300 00b7 EC010000 		.4byte	.LASF16
 1301 00bb 04       		.uleb128 0x4
 1302 00bc 9F030000 		.4byte	.LASF17
 1303 00c0 02       		.byte	0x2
 1304 00c1 AC       		.byte	0xac
 1305 00c2 4F000000 		.4byte	0x4f
 1306 00c6 02       		.uleb128 0x2
 1307 00c7 01       		.byte	0x1
 1308 00c8 08       		.byte	0x8
 1309 00c9 6B030000 		.4byte	.LASF18
 1310 00cd 05       		.uleb128 0x5
 1311 00ce 00000000 		.4byte	.LASF19
 1312 00d2 02       		.byte	0x2
 1313 00d3 4D01     		.2byte	0x14d
 1314 00d5 D9000000 		.4byte	0xd9
 1315 00d9 06       		.uleb128 0x6
 1316 00da 81000000 		.4byte	0x81
 1317 00de 02       		.uleb128 0x2
 1318 00df 04       		.byte	0x4
 1319 00e0 07       		.byte	0x7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 39


 1320 00e1 B2020000 		.4byte	.LASF20
 1321 00e5 07       		.uleb128 0x7
 1322 00e6 EC020000 		.4byte	.LASF24
 1323 00ea 01       		.byte	0x1
 1324 00eb 3F       		.byte	0x3f
 1325 00ec 00000000 		.4byte	.LFB0
 1326 00f0 24000000 		.4byte	.LFE0-.LFB0
 1327 00f4 01       		.uleb128 0x1
 1328 00f5 9C       		.byte	0x9c
 1329 00f6 08       		.uleb128 0x8
 1330 00f7 64000000 		.4byte	.LASF35
 1331 00fb 01       		.byte	0x1
 1332 00fc 5E       		.byte	0x5e
 1333 00fd 00000000 		.4byte	.LFB1
 1334 0101 AC010000 		.4byte	.LFE1-.LFB1
 1335 0105 01       		.uleb128 0x1
 1336 0106 9C       		.byte	0x9c
 1337 0107 36010000 		.4byte	0x136
 1338 010b 09       		.uleb128 0x9
 1339 010c 70030000 		.4byte	.LASF21
 1340 0110 01       		.byte	0x1
 1341 0111 60       		.byte	0x60
 1342 0112 81000000 		.4byte	0x81
 1343 0116 02       		.uleb128 0x2
 1344 0117 91       		.byte	0x91
 1345 0118 6C       		.sleb128 -20
 1346 0119 09       		.uleb128 0x9
 1347 011a B1000000 		.4byte	.LASF22
 1348 011e 01       		.byte	0x1
 1349 011f 61       		.byte	0x61
 1350 0120 81000000 		.4byte	0x81
 1351 0124 02       		.uleb128 0x2
 1352 0125 91       		.byte	0x91
 1353 0126 64       		.sleb128 -28
 1354 0127 09       		.uleb128 0x9
 1355 0128 72020000 		.4byte	.LASF23
 1356 012c 01       		.byte	0x1
 1357 012d 62       		.byte	0x62
 1358 012e 97000000 		.4byte	0x97
 1359 0132 02       		.uleb128 0x2
 1360 0133 91       		.byte	0x91
 1361 0134 68       		.sleb128 -24
 1362 0135 00       		.byte	0
 1363 0136 0A       		.uleb128 0xa
 1364 0137 65020000 		.4byte	.LASF25
 1365 013b 01       		.byte	0x1
 1366 013c 2701     		.2byte	0x127
 1367 013e 00000000 		.4byte	.LFB2
 1368 0142 28000000 		.4byte	.LFE2-.LFB2
 1369 0146 01       		.uleb128 0x1
 1370 0147 9C       		.byte	0x9c
 1371 0148 0B       		.uleb128 0xb
 1372 0149 99010000 		.4byte	.LASF26
 1373 014d 01       		.byte	0x1
 1374 014e 4A01     		.2byte	0x14a
 1375 0150 00000000 		.4byte	.LFB3
 1376 0154 18000000 		.4byte	.LFE3-.LFB3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 40


 1377 0158 01       		.uleb128 0x1
 1378 0159 9C       		.byte	0x9c
 1379 015a 0B       		.uleb128 0xb
 1380 015b 2C020000 		.4byte	.LASF27
 1381 015f 01       		.byte	0x1
 1382 0160 6401     		.2byte	0x164
 1383 0162 00000000 		.4byte	.LFB4
 1384 0166 1C000000 		.4byte	.LFE4-.LFB4
 1385 016a 01       		.uleb128 0x1
 1386 016b 9C       		.byte	0x9c
 1387 016c 0B       		.uleb128 0xb
 1388 016d DA020000 		.4byte	.LASF28
 1389 0171 01       		.byte	0x1
 1390 0172 7D01     		.2byte	0x17d
 1391 0174 00000000 		.4byte	.LFB5
 1392 0178 1C000000 		.4byte	.LFE5-.LFB5
 1393 017c 01       		.uleb128 0x1
 1394 017d 9C       		.byte	0x9c
 1395 017e 0C       		.uleb128 0xc
 1396 017f 82030000 		.4byte	.LASF30
 1397 0183 01       		.byte	0x1
 1398 0184 9F01     		.2byte	0x19f
 1399 0186 81000000 		.4byte	0x81
 1400 018a 00000000 		.4byte	.LFB6
 1401 018e 48000000 		.4byte	.LFE6-.LFB6
 1402 0192 01       		.uleb128 0x1
 1403 0193 9C       		.byte	0x9c
 1404 0194 B7010000 		.4byte	0x1b7
 1405 0198 0D       		.uleb128 0xd
 1406 0199 0D030000 		.4byte	.LASF32
 1407 019d 01       		.byte	0x1
 1408 019e 9F01     		.2byte	0x19f
 1409 01a0 81000000 		.4byte	0x81
 1410 01a4 02       		.uleb128 0x2
 1411 01a5 91       		.byte	0x91
 1412 01a6 6C       		.sleb128 -20
 1413 01a7 0E       		.uleb128 0xe
 1414 01a8 6F000000 		.4byte	.LASF29
 1415 01ac 01       		.byte	0x1
 1416 01ad A101     		.2byte	0x1a1
 1417 01af 81000000 		.4byte	0x81
 1418 01b3 02       		.uleb128 0x2
 1419 01b4 91       		.byte	0x91
 1420 01b5 74       		.sleb128 -12
 1421 01b6 00       		.byte	0
 1422 01b7 0F       		.uleb128 0xf
 1423 01b8 6E010000 		.4byte	.LASF31
 1424 01bc 01       		.byte	0x1
 1425 01bd D501     		.2byte	0x1d5
 1426 01bf 8C000000 		.4byte	0x8c
 1427 01c3 00000000 		.4byte	.LFB7
 1428 01c7 44000000 		.4byte	.LFE7-.LFB7
 1429 01cb 01       		.uleb128 0x1
 1430 01cc 9C       		.byte	0x9c
 1431 01cd F0010000 		.4byte	0x1f0
 1432 01d1 0D       		.uleb128 0xd
 1433 01d2 A6020000 		.4byte	.LASF33
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 41


 1434 01d6 01       		.byte	0x1
 1435 01d7 D501     		.2byte	0x1d5
 1436 01d9 81000000 		.4byte	0x81
 1437 01dd 02       		.uleb128 0x2
 1438 01de 91       		.byte	0x91
 1439 01df 6C       		.sleb128 -20
 1440 01e0 0E       		.uleb128 0xe
 1441 01e1 98030000 		.4byte	.LASF34
 1442 01e5 01       		.byte	0x1
 1443 01e6 D701     		.2byte	0x1d7
 1444 01e8 81000000 		.4byte	0x81
 1445 01ec 02       		.uleb128 0x2
 1446 01ed 91       		.byte	0x91
 1447 01ee 74       		.sleb128 -12
 1448 01ef 00       		.byte	0
 1449 01f0 10       		.uleb128 0x10
 1450 01f1 87010000 		.4byte	.LASF36
 1451 01f5 01       		.byte	0x1
 1452 01f6 0202     		.2byte	0x202
 1453 01f8 00000000 		.4byte	.LFB8
 1454 01fc 1C000000 		.4byte	.LFE8-.LFB8
 1455 0200 01       		.uleb128 0x1
 1456 0201 9C       		.byte	0x9c
 1457 0202 16020000 		.4byte	0x216
 1458 0206 0D       		.uleb128 0xd
 1459 0207 45000000 		.4byte	.LASF37
 1460 020b 01       		.byte	0x1
 1461 020c 0202     		.2byte	0x202
 1462 020e 81000000 		.4byte	0x81
 1463 0212 02       		.uleb128 0x2
 1464 0213 91       		.byte	0x91
 1465 0214 74       		.sleb128 -12
 1466 0215 00       		.byte	0
 1467 0216 10       		.uleb128 0x10
 1468 0217 50030000 		.4byte	.LASF38
 1469 021b 01       		.byte	0x1
 1470 021c 2E02     		.2byte	0x22e
 1471 021e 00000000 		.4byte	.LFB9
 1472 0222 30000000 		.4byte	.LFE9-.LFB9
 1473 0226 01       		.uleb128 0x1
 1474 0227 9C       		.byte	0x9c
 1475 0228 3C020000 		.4byte	0x23c
 1476 022c 0D       		.uleb128 0xd
 1477 022d 14020000 		.4byte	.LASF39
 1478 0231 01       		.byte	0x1
 1479 0232 2E02     		.2byte	0x22e
 1480 0234 81000000 		.4byte	0x81
 1481 0238 02       		.uleb128 0x2
 1482 0239 91       		.byte	0x91
 1483 023a 74       		.sleb128 -12
 1484 023b 00       		.byte	0
 1485 023c 10       		.uleb128 0x10
 1486 023d 37010000 		.4byte	.LASF40
 1487 0241 01       		.byte	0x1
 1488 0242 4302     		.2byte	0x243
 1489 0244 00000000 		.4byte	.LFB10
 1490 0248 2C000000 		.4byte	.LFE10-.LFB10
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 42


 1491 024c 01       		.uleb128 0x1
 1492 024d 9C       		.byte	0x9c
 1493 024e 62020000 		.4byte	0x262
 1494 0252 0D       		.uleb128 0xd
 1495 0253 2D000000 		.4byte	.LASF41
 1496 0257 01       		.byte	0x1
 1497 0258 4302     		.2byte	0x243
 1498 025a 81000000 		.4byte	0x81
 1499 025e 02       		.uleb128 0x2
 1500 025f 91       		.byte	0x91
 1501 0260 74       		.sleb128 -12
 1502 0261 00       		.byte	0
 1503 0262 10       		.uleb128 0x10
 1504 0263 01020000 		.4byte	.LASF42
 1505 0267 01       		.byte	0x1
 1506 0268 5B02     		.2byte	0x25b
 1507 026a 00000000 		.4byte	.LFB11
 1508 026e 1C000000 		.4byte	.LFE11-.LFB11
 1509 0272 01       		.uleb128 0x1
 1510 0273 9C       		.byte	0x9c
 1511 0274 88020000 		.4byte	0x288
 1512 0278 0D       		.uleb128 0xd
 1513 0279 45000000 		.4byte	.LASF37
 1514 027d 01       		.byte	0x1
 1515 027e 5B02     		.2byte	0x25b
 1516 0280 81000000 		.4byte	0x81
 1517 0284 02       		.uleb128 0x2
 1518 0285 91       		.byte	0x91
 1519 0286 74       		.sleb128 -12
 1520 0287 00       		.byte	0
 1521 0288 10       		.uleb128 0x10
 1522 0289 C9020000 		.4byte	.LASF43
 1523 028d 01       		.byte	0x1
 1524 028e 7202     		.2byte	0x272
 1525 0290 00000000 		.4byte	.LFB12
 1526 0294 1C000000 		.4byte	.LFE12-.LFB12
 1527 0298 01       		.uleb128 0x1
 1528 0299 9C       		.byte	0x9c
 1529 029a AE020000 		.4byte	0x2ae
 1530 029e 0D       		.uleb128 0xd
 1531 029f 45000000 		.4byte	.LASF37
 1532 02a3 01       		.byte	0x1
 1533 02a4 7202     		.2byte	0x272
 1534 02a6 81000000 		.4byte	0x81
 1535 02aa 02       		.uleb128 0x2
 1536 02ab 91       		.byte	0x91
 1537 02ac 74       		.sleb128 -12
 1538 02ad 00       		.byte	0
 1539 02ae 11       		.uleb128 0x11
 1540 02af 8C000000 		.4byte	.LASF44
 1541 02b3 01       		.byte	0x1
 1542 02b4 8E02     		.2byte	0x28e
 1543 02b6 00000000 		.4byte	.LFB13
 1544 02ba 30000000 		.4byte	.LFE13-.LFB13
 1545 02be 01       		.uleb128 0x1
 1546 02bf 9C       		.byte	0x9c
 1547 02c0 E3020000 		.4byte	0x2e3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 43


 1548 02c4 0D       		.uleb128 0xd
 1549 02c5 A6020000 		.4byte	.LASF33
 1550 02c9 01       		.byte	0x1
 1551 02ca 8E02     		.2byte	0x28e
 1552 02cc 81000000 		.4byte	0x81
 1553 02d0 02       		.uleb128 0x2
 1554 02d1 91       		.byte	0x91
 1555 02d2 74       		.sleb128 -12
 1556 02d3 0D       		.uleb128 0xd
 1557 02d4 80010000 		.4byte	.LASF45
 1558 02d8 01       		.byte	0x1
 1559 02d9 8E02     		.2byte	0x28e
 1560 02db 8C000000 		.4byte	0x8c
 1561 02df 02       		.uleb128 0x2
 1562 02e0 91       		.byte	0x91
 1563 02e1 72       		.sleb128 -14
 1564 02e2 00       		.byte	0
 1565 02e3 11       		.uleb128 0x11
 1566 02e4 F3010000 		.4byte	.LASF46
 1567 02e8 01       		.byte	0x1
 1568 02e9 B002     		.2byte	0x2b0
 1569 02eb 00000000 		.4byte	.LFB14
 1570 02ef 2C000000 		.4byte	.LFE14-.LFB14
 1571 02f3 01       		.uleb128 0x1
 1572 02f4 9C       		.byte	0x9c
 1573 02f5 18030000 		.4byte	0x318
 1574 02f9 0D       		.uleb128 0xd
 1575 02fa A6020000 		.4byte	.LASF33
 1576 02fe 01       		.byte	0x1
 1577 02ff B002     		.2byte	0x2b0
 1578 0301 81000000 		.4byte	0x81
 1579 0305 02       		.uleb128 0x2
 1580 0306 91       		.byte	0x91
 1581 0307 74       		.sleb128 -12
 1582 0308 0D       		.uleb128 0xd
 1583 0309 1D020000 		.4byte	.LASF47
 1584 030d 01       		.byte	0x1
 1585 030e B002     		.2byte	0x2b0
 1586 0310 97000000 		.4byte	0x97
 1587 0314 02       		.uleb128 0x2
 1588 0315 91       		.byte	0x91
 1589 0316 70       		.sleb128 -16
 1590 0317 00       		.byte	0
 1591 0318 0F       		.uleb128 0xf
 1592 0319 1F030000 		.4byte	.LASF48
 1593 031d 01       		.byte	0x1
 1594 031e D102     		.2byte	0x2d1
 1595 0320 8C000000 		.4byte	0x8c
 1596 0324 00000000 		.4byte	.LFB15
 1597 0328 A4000000 		.4byte	.LFE15-.LFB15
 1598 032c 01       		.uleb128 0x1
 1599 032d 9C       		.byte	0x9c
 1600 032e 60030000 		.4byte	0x360
 1601 0332 0D       		.uleb128 0xd
 1602 0333 A6020000 		.4byte	.LASF33
 1603 0337 01       		.byte	0x1
 1604 0338 D102     		.2byte	0x2d1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 44


 1605 033a 81000000 		.4byte	0x81
 1606 033e 02       		.uleb128 0x2
 1607 033f 91       		.byte	0x91
 1608 0340 6C       		.sleb128 -20
 1609 0341 0D       		.uleb128 0xd
 1610 0342 96020000 		.4byte	.LASF49
 1611 0346 01       		.byte	0x1
 1612 0347 D102     		.2byte	0x2d1
 1613 0349 8C000000 		.4byte	0x8c
 1614 034d 02       		.uleb128 0x2
 1615 034e 91       		.byte	0x91
 1616 034f 6A       		.sleb128 -22
 1617 0350 0E       		.uleb128 0xe
 1618 0351 AB020000 		.4byte	.LASF50
 1619 0355 01       		.byte	0x1
 1620 0356 D302     		.2byte	0x2d3
 1621 0358 8C000000 		.4byte	0x8c
 1622 035c 02       		.uleb128 0x2
 1623 035d 91       		.byte	0x91
 1624 035e 76       		.sleb128 -10
 1625 035f 00       		.byte	0
 1626 0360 0F       		.uleb128 0xf
 1627 0361 76000000 		.4byte	.LASF51
 1628 0365 01       		.byte	0x1
 1629 0366 0703     		.2byte	0x307
 1630 0368 97000000 		.4byte	0x97
 1631 036c 00000000 		.4byte	.LFB16
 1632 0370 98000000 		.4byte	.LFE16-.LFB16
 1633 0374 01       		.uleb128 0x1
 1634 0375 9C       		.byte	0x9c
 1635 0376 A8030000 		.4byte	0x3a8
 1636 037a 0D       		.uleb128 0xd
 1637 037b A6020000 		.4byte	.LASF33
 1638 037f 01       		.byte	0x1
 1639 0380 0703     		.2byte	0x307
 1640 0382 81000000 		.4byte	0x81
 1641 0386 02       		.uleb128 0x2
 1642 0387 91       		.byte	0x91
 1643 0388 64       		.sleb128 -28
 1644 0389 0D       		.uleb128 0xd
 1645 038a 96020000 		.4byte	.LASF49
 1646 038e 01       		.byte	0x1
 1647 038f 0703     		.2byte	0x307
 1648 0391 8C000000 		.4byte	0x8c
 1649 0395 02       		.uleb128 0x2
 1650 0396 91       		.byte	0x91
 1651 0397 62       		.sleb128 -30
 1652 0398 0E       		.uleb128 0xe
 1653 0399 4A000000 		.4byte	.LASF52
 1654 039d 01       		.byte	0x1
 1655 039e 0903     		.2byte	0x309
 1656 03a0 BB000000 		.4byte	0xbb
 1657 03a4 02       		.uleb128 0x2
 1658 03a5 91       		.byte	0x91
 1659 03a6 68       		.sleb128 -24
 1660 03a7 00       		.byte	0
 1661 03a8 0F       		.uleb128 0xf
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 45


 1662 03a9 F8020000 		.4byte	.LASF53
 1663 03ad 01       		.byte	0x1
 1664 03ae 3403     		.2byte	0x334
 1665 03b0 A2000000 		.4byte	0xa2
 1666 03b4 00000000 		.4byte	.LFB17
 1667 03b8 80000000 		.4byte	.LFE17-.LFB17
 1668 03bc 01       		.uleb128 0x1
 1669 03bd 9C       		.byte	0x9c
 1670 03be F0030000 		.4byte	0x3f0
 1671 03c2 0D       		.uleb128 0xd
 1672 03c3 A6020000 		.4byte	.LASF33
 1673 03c7 01       		.byte	0x1
 1674 03c8 3403     		.2byte	0x334
 1675 03ca 81000000 		.4byte	0x81
 1676 03ce 02       		.uleb128 0x2
 1677 03cf 91       		.byte	0x91
 1678 03d0 64       		.sleb128 -28
 1679 03d1 0D       		.uleb128 0xd
 1680 03d2 96020000 		.4byte	.LASF49
 1681 03d6 01       		.byte	0x1
 1682 03d7 3403     		.2byte	0x334
 1683 03d9 8C000000 		.4byte	0x8c
 1684 03dd 02       		.uleb128 0x2
 1685 03de 91       		.byte	0x91
 1686 03df 62       		.sleb128 -30
 1687 03e0 0E       		.uleb128 0xe
 1688 03e1 A0020000 		.4byte	.LASF54
 1689 03e5 01       		.byte	0x1
 1690 03e6 3603     		.2byte	0x336
 1691 03e8 A2000000 		.4byte	0xa2
 1692 03ec 02       		.uleb128 0x2
 1693 03ed 91       		.byte	0x91
 1694 03ee 6C       		.sleb128 -20
 1695 03ef 00       		.byte	0
 1696 03f0 12       		.uleb128 0x12
 1697 03f1 81000000 		.4byte	0x81
 1698 03f5 00040000 		.4byte	0x400
 1699 03f9 13       		.uleb128 0x13
 1700 03fa DE000000 		.4byte	0xde
 1701 03fe 00       		.byte	0
 1702 03ff 00       		.byte	0
 1703 0400 09       		.uleb128 0x9
 1704 0401 3B030000 		.4byte	.LASF55
 1705 0405 01       		.byte	0x1
 1706 0406 21       		.byte	0x21
 1707 0407 11040000 		.4byte	0x411
 1708 040b 05       		.uleb128 0x5
 1709 040c 03       		.byte	0x3
 1710 040d 00000000 		.4byte	ADC_1_channelsConfig
 1711 0411 14       		.uleb128 0x14
 1712 0412 F0030000 		.4byte	0x3f0
 1713 0416 15       		.uleb128 0x15
 1714 0417 37000000 		.4byte	.LASF56
 1715 041b 01       		.byte	0x1
 1716 041c 18       		.byte	0x18
 1717 041d 6B000000 		.4byte	0x6b
 1718 0421 05       		.uleb128 0x5
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 46


 1719 0422 03       		.byte	0x3
 1720 0423 00000000 		.4byte	ADC_1_initVar
 1721 0427 12       		.uleb128 0x12
 1722 0428 8C000000 		.4byte	0x8c
 1723 042c 37040000 		.4byte	0x437
 1724 0430 13       		.uleb128 0x13
 1725 0431 DE000000 		.4byte	0xde
 1726 0435 00       		.byte	0
 1727 0436 00       		.byte	0
 1728 0437 15       		.uleb128 0x15
 1729 0438 A4000000 		.4byte	.LASF57
 1730 043c 01       		.byte	0x1
 1731 043d 19       		.byte	0x19
 1732 043e 48040000 		.4byte	0x448
 1733 0442 05       		.uleb128 0x5
 1734 0443 03       		.byte	0x3
 1735 0444 00000000 		.4byte	ADC_1_offset
 1736 0448 06       		.uleb128 0x6
 1737 0449 27040000 		.4byte	0x427
 1738 044d 12       		.uleb128 0x12
 1739 044e 97000000 		.4byte	0x97
 1740 0452 5D040000 		.4byte	0x45d
 1741 0456 13       		.uleb128 0x13
 1742 0457 DE000000 		.4byte	0xde
 1743 045b 00       		.byte	0
 1744 045c 00       		.byte	0
 1745 045d 15       		.uleb128 0x15
 1746 045e 4A010000 		.4byte	.LASF58
 1747 0462 01       		.byte	0x1
 1748 0463 1A       		.byte	0x1a
 1749 0464 6E040000 		.4byte	0x46e
 1750 0468 05       		.uleb128 0x5
 1751 0469 03       		.byte	0x3
 1752 046a 00000000 		.4byte	ADC_1_countsPer10Volt
 1753 046e 06       		.uleb128 0x6
 1754 046f 4D040000 		.4byte	0x44d
 1755 0473 00       		.byte	0
 1756              		.section	.debug_abbrev,"",%progbits
 1757              	.Ldebug_abbrev0:
 1758 0000 01       		.uleb128 0x1
 1759 0001 11       		.uleb128 0x11
 1760 0002 01       		.byte	0x1
 1761 0003 25       		.uleb128 0x25
 1762 0004 0E       		.uleb128 0xe
 1763 0005 13       		.uleb128 0x13
 1764 0006 0B       		.uleb128 0xb
 1765 0007 03       		.uleb128 0x3
 1766 0008 0E       		.uleb128 0xe
 1767 0009 1B       		.uleb128 0x1b
 1768 000a 0E       		.uleb128 0xe
 1769 000b 55       		.uleb128 0x55
 1770 000c 17       		.uleb128 0x17
 1771 000d 11       		.uleb128 0x11
 1772 000e 01       		.uleb128 0x1
 1773 000f 10       		.uleb128 0x10
 1774 0010 17       		.uleb128 0x17
 1775 0011 00       		.byte	0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 47


 1776 0012 00       		.byte	0
 1777 0013 02       		.uleb128 0x2
 1778 0014 24       		.uleb128 0x24
 1779 0015 00       		.byte	0
 1780 0016 0B       		.uleb128 0xb
 1781 0017 0B       		.uleb128 0xb
 1782 0018 3E       		.uleb128 0x3e
 1783 0019 0B       		.uleb128 0xb
 1784 001a 03       		.uleb128 0x3
 1785 001b 0E       		.uleb128 0xe
 1786 001c 00       		.byte	0
 1787 001d 00       		.byte	0
 1788 001e 03       		.uleb128 0x3
 1789 001f 24       		.uleb128 0x24
 1790 0020 00       		.byte	0
 1791 0021 0B       		.uleb128 0xb
 1792 0022 0B       		.uleb128 0xb
 1793 0023 3E       		.uleb128 0x3e
 1794 0024 0B       		.uleb128 0xb
 1795 0025 03       		.uleb128 0x3
 1796 0026 08       		.uleb128 0x8
 1797 0027 00       		.byte	0
 1798 0028 00       		.byte	0
 1799 0029 04       		.uleb128 0x4
 1800 002a 16       		.uleb128 0x16
 1801 002b 00       		.byte	0
 1802 002c 03       		.uleb128 0x3
 1803 002d 0E       		.uleb128 0xe
 1804 002e 3A       		.uleb128 0x3a
 1805 002f 0B       		.uleb128 0xb
 1806 0030 3B       		.uleb128 0x3b
 1807 0031 0B       		.uleb128 0xb
 1808 0032 49       		.uleb128 0x49
 1809 0033 13       		.uleb128 0x13
 1810 0034 00       		.byte	0
 1811 0035 00       		.byte	0
 1812 0036 05       		.uleb128 0x5
 1813 0037 16       		.uleb128 0x16
 1814 0038 00       		.byte	0
 1815 0039 03       		.uleb128 0x3
 1816 003a 0E       		.uleb128 0xe
 1817 003b 3A       		.uleb128 0x3a
 1818 003c 0B       		.uleb128 0xb
 1819 003d 3B       		.uleb128 0x3b
 1820 003e 05       		.uleb128 0x5
 1821 003f 49       		.uleb128 0x49
 1822 0040 13       		.uleb128 0x13
 1823 0041 00       		.byte	0
 1824 0042 00       		.byte	0
 1825 0043 06       		.uleb128 0x6
 1826 0044 35       		.uleb128 0x35
 1827 0045 00       		.byte	0
 1828 0046 49       		.uleb128 0x49
 1829 0047 13       		.uleb128 0x13
 1830 0048 00       		.byte	0
 1831 0049 00       		.byte	0
 1832 004a 07       		.uleb128 0x7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 48


 1833 004b 2E       		.uleb128 0x2e
 1834 004c 00       		.byte	0
 1835 004d 3F       		.uleb128 0x3f
 1836 004e 19       		.uleb128 0x19
 1837 004f 03       		.uleb128 0x3
 1838 0050 0E       		.uleb128 0xe
 1839 0051 3A       		.uleb128 0x3a
 1840 0052 0B       		.uleb128 0xb
 1841 0053 3B       		.uleb128 0x3b
 1842 0054 0B       		.uleb128 0xb
 1843 0055 27       		.uleb128 0x27
 1844 0056 19       		.uleb128 0x19
 1845 0057 11       		.uleb128 0x11
 1846 0058 01       		.uleb128 0x1
 1847 0059 12       		.uleb128 0x12
 1848 005a 06       		.uleb128 0x6
 1849 005b 40       		.uleb128 0x40
 1850 005c 18       		.uleb128 0x18
 1851 005d 9642     		.uleb128 0x2116
 1852 005f 19       		.uleb128 0x19
 1853 0060 00       		.byte	0
 1854 0061 00       		.byte	0
 1855 0062 08       		.uleb128 0x8
 1856 0063 2E       		.uleb128 0x2e
 1857 0064 01       		.byte	0x1
 1858 0065 3F       		.uleb128 0x3f
 1859 0066 19       		.uleb128 0x19
 1860 0067 03       		.uleb128 0x3
 1861 0068 0E       		.uleb128 0xe
 1862 0069 3A       		.uleb128 0x3a
 1863 006a 0B       		.uleb128 0xb
 1864 006b 3B       		.uleb128 0x3b
 1865 006c 0B       		.uleb128 0xb
 1866 006d 27       		.uleb128 0x27
 1867 006e 19       		.uleb128 0x19
 1868 006f 11       		.uleb128 0x11
 1869 0070 01       		.uleb128 0x1
 1870 0071 12       		.uleb128 0x12
 1871 0072 06       		.uleb128 0x6
 1872 0073 40       		.uleb128 0x40
 1873 0074 18       		.uleb128 0x18
 1874 0075 9642     		.uleb128 0x2116
 1875 0077 19       		.uleb128 0x19
 1876 0078 01       		.uleb128 0x1
 1877 0079 13       		.uleb128 0x13
 1878 007a 00       		.byte	0
 1879 007b 00       		.byte	0
 1880 007c 09       		.uleb128 0x9
 1881 007d 34       		.uleb128 0x34
 1882 007e 00       		.byte	0
 1883 007f 03       		.uleb128 0x3
 1884 0080 0E       		.uleb128 0xe
 1885 0081 3A       		.uleb128 0x3a
 1886 0082 0B       		.uleb128 0xb
 1887 0083 3B       		.uleb128 0x3b
 1888 0084 0B       		.uleb128 0xb
 1889 0085 49       		.uleb128 0x49
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 49


 1890 0086 13       		.uleb128 0x13
 1891 0087 02       		.uleb128 0x2
 1892 0088 18       		.uleb128 0x18
 1893 0089 00       		.byte	0
 1894 008a 00       		.byte	0
 1895 008b 0A       		.uleb128 0xa
 1896 008c 2E       		.uleb128 0x2e
 1897 008d 00       		.byte	0
 1898 008e 3F       		.uleb128 0x3f
 1899 008f 19       		.uleb128 0x19
 1900 0090 03       		.uleb128 0x3
 1901 0091 0E       		.uleb128 0xe
 1902 0092 3A       		.uleb128 0x3a
 1903 0093 0B       		.uleb128 0xb
 1904 0094 3B       		.uleb128 0x3b
 1905 0095 05       		.uleb128 0x5
 1906 0096 27       		.uleb128 0x27
 1907 0097 19       		.uleb128 0x19
 1908 0098 11       		.uleb128 0x11
 1909 0099 01       		.uleb128 0x1
 1910 009a 12       		.uleb128 0x12
 1911 009b 06       		.uleb128 0x6
 1912 009c 40       		.uleb128 0x40
 1913 009d 18       		.uleb128 0x18
 1914 009e 9642     		.uleb128 0x2116
 1915 00a0 19       		.uleb128 0x19
 1916 00a1 00       		.byte	0
 1917 00a2 00       		.byte	0
 1918 00a3 0B       		.uleb128 0xb
 1919 00a4 2E       		.uleb128 0x2e
 1920 00a5 00       		.byte	0
 1921 00a6 3F       		.uleb128 0x3f
 1922 00a7 19       		.uleb128 0x19
 1923 00a8 03       		.uleb128 0x3
 1924 00a9 0E       		.uleb128 0xe
 1925 00aa 3A       		.uleb128 0x3a
 1926 00ab 0B       		.uleb128 0xb
 1927 00ac 3B       		.uleb128 0x3b
 1928 00ad 05       		.uleb128 0x5
 1929 00ae 27       		.uleb128 0x27
 1930 00af 19       		.uleb128 0x19
 1931 00b0 11       		.uleb128 0x11
 1932 00b1 01       		.uleb128 0x1
 1933 00b2 12       		.uleb128 0x12
 1934 00b3 06       		.uleb128 0x6
 1935 00b4 40       		.uleb128 0x40
 1936 00b5 18       		.uleb128 0x18
 1937 00b6 9742     		.uleb128 0x2117
 1938 00b8 19       		.uleb128 0x19
 1939 00b9 00       		.byte	0
 1940 00ba 00       		.byte	0
 1941 00bb 0C       		.uleb128 0xc
 1942 00bc 2E       		.uleb128 0x2e
 1943 00bd 01       		.byte	0x1
 1944 00be 3F       		.uleb128 0x3f
 1945 00bf 19       		.uleb128 0x19
 1946 00c0 03       		.uleb128 0x3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 50


 1947 00c1 0E       		.uleb128 0xe
 1948 00c2 3A       		.uleb128 0x3a
 1949 00c3 0B       		.uleb128 0xb
 1950 00c4 3B       		.uleb128 0x3b
 1951 00c5 05       		.uleb128 0x5
 1952 00c6 27       		.uleb128 0x27
 1953 00c7 19       		.uleb128 0x19
 1954 00c8 49       		.uleb128 0x49
 1955 00c9 13       		.uleb128 0x13
 1956 00ca 11       		.uleb128 0x11
 1957 00cb 01       		.uleb128 0x1
 1958 00cc 12       		.uleb128 0x12
 1959 00cd 06       		.uleb128 0x6
 1960 00ce 40       		.uleb128 0x40
 1961 00cf 18       		.uleb128 0x18
 1962 00d0 9742     		.uleb128 0x2117
 1963 00d2 19       		.uleb128 0x19
 1964 00d3 01       		.uleb128 0x1
 1965 00d4 13       		.uleb128 0x13
 1966 00d5 00       		.byte	0
 1967 00d6 00       		.byte	0
 1968 00d7 0D       		.uleb128 0xd
 1969 00d8 05       		.uleb128 0x5
 1970 00d9 00       		.byte	0
 1971 00da 03       		.uleb128 0x3
 1972 00db 0E       		.uleb128 0xe
 1973 00dc 3A       		.uleb128 0x3a
 1974 00dd 0B       		.uleb128 0xb
 1975 00de 3B       		.uleb128 0x3b
 1976 00df 05       		.uleb128 0x5
 1977 00e0 49       		.uleb128 0x49
 1978 00e1 13       		.uleb128 0x13
 1979 00e2 02       		.uleb128 0x2
 1980 00e3 18       		.uleb128 0x18
 1981 00e4 00       		.byte	0
 1982 00e5 00       		.byte	0
 1983 00e6 0E       		.uleb128 0xe
 1984 00e7 34       		.uleb128 0x34
 1985 00e8 00       		.byte	0
 1986 00e9 03       		.uleb128 0x3
 1987 00ea 0E       		.uleb128 0xe
 1988 00eb 3A       		.uleb128 0x3a
 1989 00ec 0B       		.uleb128 0xb
 1990 00ed 3B       		.uleb128 0x3b
 1991 00ee 05       		.uleb128 0x5
 1992 00ef 49       		.uleb128 0x49
 1993 00f0 13       		.uleb128 0x13
 1994 00f1 02       		.uleb128 0x2
 1995 00f2 18       		.uleb128 0x18
 1996 00f3 00       		.byte	0
 1997 00f4 00       		.byte	0
 1998 00f5 0F       		.uleb128 0xf
 1999 00f6 2E       		.uleb128 0x2e
 2000 00f7 01       		.byte	0x1
 2001 00f8 3F       		.uleb128 0x3f
 2002 00f9 19       		.uleb128 0x19
 2003 00fa 03       		.uleb128 0x3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 51


 2004 00fb 0E       		.uleb128 0xe
 2005 00fc 3A       		.uleb128 0x3a
 2006 00fd 0B       		.uleb128 0xb
 2007 00fe 3B       		.uleb128 0x3b
 2008 00ff 05       		.uleb128 0x5
 2009 0100 27       		.uleb128 0x27
 2010 0101 19       		.uleb128 0x19
 2011 0102 49       		.uleb128 0x49
 2012 0103 13       		.uleb128 0x13
 2013 0104 11       		.uleb128 0x11
 2014 0105 01       		.uleb128 0x1
 2015 0106 12       		.uleb128 0x12
 2016 0107 06       		.uleb128 0x6
 2017 0108 40       		.uleb128 0x40
 2018 0109 18       		.uleb128 0x18
 2019 010a 9642     		.uleb128 0x2116
 2020 010c 19       		.uleb128 0x19
 2021 010d 01       		.uleb128 0x1
 2022 010e 13       		.uleb128 0x13
 2023 010f 00       		.byte	0
 2024 0110 00       		.byte	0
 2025 0111 10       		.uleb128 0x10
 2026 0112 2E       		.uleb128 0x2e
 2027 0113 01       		.byte	0x1
 2028 0114 3F       		.uleb128 0x3f
 2029 0115 19       		.uleb128 0x19
 2030 0116 03       		.uleb128 0x3
 2031 0117 0E       		.uleb128 0xe
 2032 0118 3A       		.uleb128 0x3a
 2033 0119 0B       		.uleb128 0xb
 2034 011a 3B       		.uleb128 0x3b
 2035 011b 05       		.uleb128 0x5
 2036 011c 27       		.uleb128 0x27
 2037 011d 19       		.uleb128 0x19
 2038 011e 11       		.uleb128 0x11
 2039 011f 01       		.uleb128 0x1
 2040 0120 12       		.uleb128 0x12
 2041 0121 06       		.uleb128 0x6
 2042 0122 40       		.uleb128 0x40
 2043 0123 18       		.uleb128 0x18
 2044 0124 9742     		.uleb128 0x2117
 2045 0126 19       		.uleb128 0x19
 2046 0127 01       		.uleb128 0x1
 2047 0128 13       		.uleb128 0x13
 2048 0129 00       		.byte	0
 2049 012a 00       		.byte	0
 2050 012b 11       		.uleb128 0x11
 2051 012c 2E       		.uleb128 0x2e
 2052 012d 01       		.byte	0x1
 2053 012e 3F       		.uleb128 0x3f
 2054 012f 19       		.uleb128 0x19
 2055 0130 03       		.uleb128 0x3
 2056 0131 0E       		.uleb128 0xe
 2057 0132 3A       		.uleb128 0x3a
 2058 0133 0B       		.uleb128 0xb
 2059 0134 3B       		.uleb128 0x3b
 2060 0135 05       		.uleb128 0x5
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 52


 2061 0136 27       		.uleb128 0x27
 2062 0137 19       		.uleb128 0x19
 2063 0138 11       		.uleb128 0x11
 2064 0139 01       		.uleb128 0x1
 2065 013a 12       		.uleb128 0x12
 2066 013b 06       		.uleb128 0x6
 2067 013c 40       		.uleb128 0x40
 2068 013d 18       		.uleb128 0x18
 2069 013e 9642     		.uleb128 0x2116
 2070 0140 19       		.uleb128 0x19
 2071 0141 01       		.uleb128 0x1
 2072 0142 13       		.uleb128 0x13
 2073 0143 00       		.byte	0
 2074 0144 00       		.byte	0
 2075 0145 12       		.uleb128 0x12
 2076 0146 01       		.uleb128 0x1
 2077 0147 01       		.byte	0x1
 2078 0148 49       		.uleb128 0x49
 2079 0149 13       		.uleb128 0x13
 2080 014a 01       		.uleb128 0x1
 2081 014b 13       		.uleb128 0x13
 2082 014c 00       		.byte	0
 2083 014d 00       		.byte	0
 2084 014e 13       		.uleb128 0x13
 2085 014f 21       		.uleb128 0x21
 2086 0150 00       		.byte	0
 2087 0151 49       		.uleb128 0x49
 2088 0152 13       		.uleb128 0x13
 2089 0153 2F       		.uleb128 0x2f
 2090 0154 0B       		.uleb128 0xb
 2091 0155 00       		.byte	0
 2092 0156 00       		.byte	0
 2093 0157 14       		.uleb128 0x14
 2094 0158 26       		.uleb128 0x26
 2095 0159 00       		.byte	0
 2096 015a 49       		.uleb128 0x49
 2097 015b 13       		.uleb128 0x13
 2098 015c 00       		.byte	0
 2099 015d 00       		.byte	0
 2100 015e 15       		.uleb128 0x15
 2101 015f 34       		.uleb128 0x34
 2102 0160 00       		.byte	0
 2103 0161 03       		.uleb128 0x3
 2104 0162 0E       		.uleb128 0xe
 2105 0163 3A       		.uleb128 0x3a
 2106 0164 0B       		.uleb128 0xb
 2107 0165 3B       		.uleb128 0x3b
 2108 0166 0B       		.uleb128 0xb
 2109 0167 49       		.uleb128 0x49
 2110 0168 13       		.uleb128 0x13
 2111 0169 3F       		.uleb128 0x3f
 2112 016a 19       		.uleb128 0x19
 2113 016b 02       		.uleb128 0x2
 2114 016c 18       		.uleb128 0x18
 2115 016d 00       		.byte	0
 2116 016e 00       		.byte	0
 2117 016f 00       		.byte	0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 53


 2118              		.section	.debug_aranges,"",%progbits
 2119 0000 A4000000 		.4byte	0xa4
 2120 0004 0200     		.2byte	0x2
 2121 0006 00000000 		.4byte	.Ldebug_info0
 2122 000a 04       		.byte	0x4
 2123 000b 00       		.byte	0
 2124 000c 0000     		.2byte	0
 2125 000e 0000     		.2byte	0
 2126 0010 00000000 		.4byte	.LFB0
 2127 0014 24000000 		.4byte	.LFE0-.LFB0
 2128 0018 00000000 		.4byte	.LFB1
 2129 001c AC010000 		.4byte	.LFE1-.LFB1
 2130 0020 00000000 		.4byte	.LFB2
 2131 0024 28000000 		.4byte	.LFE2-.LFB2
 2132 0028 00000000 		.4byte	.LFB3
 2133 002c 18000000 		.4byte	.LFE3-.LFB3
 2134 0030 00000000 		.4byte	.LFB4
 2135 0034 1C000000 		.4byte	.LFE4-.LFB4
 2136 0038 00000000 		.4byte	.LFB5
 2137 003c 1C000000 		.4byte	.LFE5-.LFB5
 2138 0040 00000000 		.4byte	.LFB6
 2139 0044 48000000 		.4byte	.LFE6-.LFB6
 2140 0048 00000000 		.4byte	.LFB7
 2141 004c 44000000 		.4byte	.LFE7-.LFB7
 2142 0050 00000000 		.4byte	.LFB8
 2143 0054 1C000000 		.4byte	.LFE8-.LFB8
 2144 0058 00000000 		.4byte	.LFB9
 2145 005c 30000000 		.4byte	.LFE9-.LFB9
 2146 0060 00000000 		.4byte	.LFB10
 2147 0064 2C000000 		.4byte	.LFE10-.LFB10
 2148 0068 00000000 		.4byte	.LFB11
 2149 006c 1C000000 		.4byte	.LFE11-.LFB11
 2150 0070 00000000 		.4byte	.LFB12
 2151 0074 1C000000 		.4byte	.LFE12-.LFB12
 2152 0078 00000000 		.4byte	.LFB13
 2153 007c 30000000 		.4byte	.LFE13-.LFB13
 2154 0080 00000000 		.4byte	.LFB14
 2155 0084 2C000000 		.4byte	.LFE14-.LFB14
 2156 0088 00000000 		.4byte	.LFB15
 2157 008c A4000000 		.4byte	.LFE15-.LFB15
 2158 0090 00000000 		.4byte	.LFB16
 2159 0094 98000000 		.4byte	.LFE16-.LFB16
 2160 0098 00000000 		.4byte	.LFB17
 2161 009c 80000000 		.4byte	.LFE17-.LFB17
 2162 00a0 00000000 		.4byte	0
 2163 00a4 00000000 		.4byte	0
 2164              		.section	.debug_ranges,"",%progbits
 2165              	.Ldebug_ranges0:
 2166 0000 00000000 		.4byte	.LFB0
 2167 0004 24000000 		.4byte	.LFE0
 2168 0008 00000000 		.4byte	.LFB1
 2169 000c AC010000 		.4byte	.LFE1
 2170 0010 00000000 		.4byte	.LFB2
 2171 0014 28000000 		.4byte	.LFE2
 2172 0018 00000000 		.4byte	.LFB3
 2173 001c 18000000 		.4byte	.LFE3
 2174 0020 00000000 		.4byte	.LFB4
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 54


 2175 0024 1C000000 		.4byte	.LFE4
 2176 0028 00000000 		.4byte	.LFB5
 2177 002c 1C000000 		.4byte	.LFE5
 2178 0030 00000000 		.4byte	.LFB6
 2179 0034 48000000 		.4byte	.LFE6
 2180 0038 00000000 		.4byte	.LFB7
 2181 003c 44000000 		.4byte	.LFE7
 2182 0040 00000000 		.4byte	.LFB8
 2183 0044 1C000000 		.4byte	.LFE8
 2184 0048 00000000 		.4byte	.LFB9
 2185 004c 30000000 		.4byte	.LFE9
 2186 0050 00000000 		.4byte	.LFB10
 2187 0054 2C000000 		.4byte	.LFE10
 2188 0058 00000000 		.4byte	.LFB11
 2189 005c 1C000000 		.4byte	.LFE11
 2190 0060 00000000 		.4byte	.LFB12
 2191 0064 1C000000 		.4byte	.LFE12
 2192 0068 00000000 		.4byte	.LFB13
 2193 006c 30000000 		.4byte	.LFE13
 2194 0070 00000000 		.4byte	.LFB14
 2195 0074 2C000000 		.4byte	.LFE14
 2196 0078 00000000 		.4byte	.LFB15
 2197 007c A4000000 		.4byte	.LFE15
 2198 0080 00000000 		.4byte	.LFB16
 2199 0084 98000000 		.4byte	.LFE16
 2200 0088 00000000 		.4byte	.LFB17
 2201 008c 80000000 		.4byte	.LFE17
 2202 0090 00000000 		.4byte	0
 2203 0094 00000000 		.4byte	0
 2204              		.section	.debug_line,"",%progbits
 2205              	.Ldebug_line0:
 2206 0000 30020000 		.section	.debug_str,"MS",%progbits,1
 2206      02004400 
 2206      00000201 
 2206      FB0E0D00 
 2206      01010101 
 2207              	.LASF19:
 2208 0000 72656733 		.ascii	"reg32\000"
 2208      3200
 2209              	.LASF60:
 2210 0006 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_1.c\000"
 2210      6E657261 
 2210      7465645F 
 2210      536F7572 
 2210      63655C50 
 2211              	.LASF15:
 2212 0027 666C6F61 		.ascii	"float\000"
 2212      7400
 2213              	.LASF41:
 2214 002d 68696768 		.ascii	"highLimit\000"
 2214      4C696D69 
 2214      7400
 2215              	.LASF56:
 2216 0037 4144435F 		.ascii	"ADC_1_initVar\000"
 2216      315F696E 
 2216      69745661 
 2216      7200
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 55


 2217              	.LASF37:
 2218 0045 6D61736B 		.ascii	"mask\000"
 2218      00
 2219              	.LASF52:
 2220 004a 75566F6C 		.ascii	"uVolts\000"
 2220      747300
 2221              	.LASF3:
 2222 0051 73686F72 		.ascii	"short unsigned int\000"
 2222      7420756E 
 2222      7369676E 
 2222      65642069 
 2222      6E7400
 2223              	.LASF35:
 2224 0064 4144435F 		.ascii	"ADC_1_Init\000"
 2224      315F496E 
 2224      697400
 2225              	.LASF29:
 2226 006f 73746174 		.ascii	"status\000"
 2226      757300
 2227              	.LASF51:
 2228 0076 4144435F 		.ascii	"ADC_1_CountsTo_uVolts\000"
 2228      315F436F 
 2228      756E7473 
 2228      546F5F75 
 2228      566F6C74 
 2229              	.LASF44:
 2230 008c 4144435F 		.ascii	"ADC_1_SetOffset\000"
 2230      315F5365 
 2230      744F6666 
 2230      73657400 
 2231              	.LASF14:
 2232 009c 666C6F61 		.ascii	"float32\000"
 2232      74333200 
 2233              	.LASF57:
 2234 00a4 4144435F 		.ascii	"ADC_1_offset\000"
 2234      315F6F66 
 2234      66736574 
 2234      00
 2235              	.LASF22:
 2236 00b1 746D7052 		.ascii	"tmpRegVal\000"
 2236      65675661 
 2236      6C00
 2237              	.LASF59:
 2238 00bb 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2238      4320342E 
 2238      382E3420 
 2238      32303134 
 2238      30353236 
 2239 00ee 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2239      20726576 
 2239      6973696F 
 2239      6E203231 
 2239      31333538 
 2240 0121 30202D66 		.ascii	"0 -ffunction-sections\000"
 2240      66756E63 
 2240      74696F6E 
 2240      2D736563 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 56


 2240      74696F6E 
 2241              	.LASF40:
 2242 0137 4144435F 		.ascii	"ADC_1_SetHighLimit\000"
 2242      315F5365 
 2242      74486967 
 2242      684C696D 
 2242      697400
 2243              	.LASF58:
 2244 014a 4144435F 		.ascii	"ADC_1_countsPer10Volt\000"
 2244      315F636F 
 2244      756E7473 
 2244      50657231 
 2244      30566F6C 
 2245              	.LASF1:
 2246 0160 756E7369 		.ascii	"unsigned char\000"
 2246      676E6564 
 2246      20636861 
 2246      7200
 2247              	.LASF31:
 2248 016e 4144435F 		.ascii	"ADC_1_GetResult16\000"
 2248      315F4765 
 2248      74526573 
 2248      756C7431 
 2248      3600
 2249              	.LASF45:
 2250 0180 6F666673 		.ascii	"offset\000"
 2250      657400
 2251              	.LASF36:
 2252 0187 4144435F 		.ascii	"ADC_1_SetChanMask\000"
 2252      315F5365 
 2252      74436861 
 2252      6E4D6173 
 2252      6B00
 2253              	.LASF26:
 2254 0199 4144435F 		.ascii	"ADC_1_Stop\000"
 2254      315F5374 
 2254      6F7000
 2255              	.LASF13:
 2256 01a4 696E7433 		.ascii	"int32\000"
 2256      3200
 2257              	.LASF61:
 2258 01aa 433A5C55 		.ascii	"C:\\Users\\Snufkin\\Documents\\PSoC Creator\\CRT_ti"
 2258      73657273 
 2258      5C536E75 
 2258      666B696E 
 2258      5C446F63 
 2259 01d8 6D65725C 		.ascii	"mer\\CRT_timer.cydsn\000"
 2259      4352545F 
 2259      74696D65 
 2259      722E6379 
 2259      64736E00 
 2260              	.LASF16:
 2261 01ec 646F7562 		.ascii	"double\000"
 2261      6C6500
 2262              	.LASF46:
 2263 01f3 4144435F 		.ascii	"ADC_1_SetGain\000"
 2263      315F5365 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 57


 2263      74476169 
 2263      6E00
 2264              	.LASF42:
 2265 0201 4144435F 		.ascii	"ADC_1_SetLimitMask\000"
 2265      315F5365 
 2265      744C696D 
 2265      69744D61 
 2265      736B00
 2266              	.LASF39:
 2267 0214 6C6F774C 		.ascii	"lowLimit\000"
 2267      696D6974 
 2267      00
 2268              	.LASF47:
 2269 021d 61646347 		.ascii	"adcGain\000"
 2269      61696E00 
 2270              	.LASF10:
 2271 0225 75696E74 		.ascii	"uint16\000"
 2271      313600
 2272              	.LASF27:
 2273 022c 4144435F 		.ascii	"ADC_1_StartConvert\000"
 2273      315F5374 
 2273      61727443 
 2273      6F6E7665 
 2273      727400
 2274              	.LASF11:
 2275 023f 75696E74 		.ascii	"uint32\000"
 2275      333200
 2276              	.LASF5:
 2277 0246 6C6F6E67 		.ascii	"long unsigned int\000"
 2277      20756E73 
 2277      69676E65 
 2277      6420696E 
 2277      7400
 2278              	.LASF8:
 2279 0258 756E7369 		.ascii	"unsigned int\000"
 2279      676E6564 
 2279      20696E74 
 2279      00
 2280              	.LASF25:
 2281 0265 4144435F 		.ascii	"ADC_1_Enable\000"
 2281      315F456E 
 2281      61626C65 
 2281      00
 2282              	.LASF23:
 2283 0272 636F756E 		.ascii	"counts\000"
 2283      747300
 2284              	.LASF7:
 2285 0279 6C6F6E67 		.ascii	"long long unsigned int\000"
 2285      206C6F6E 
 2285      6720756E 
 2285      7369676E 
 2285      65642069 
 2286              	.LASF12:
 2287 0290 696E7431 		.ascii	"int16\000"
 2287      3600
 2288              	.LASF49:
 2289 0296 61646343 		.ascii	"adcCounts\000"
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 58


 2289      6F756E74 
 2289      7300
 2290              	.LASF54:
 2291 02a0 766F6C74 		.ascii	"volts\000"
 2291      7300
 2292              	.LASF33:
 2293 02a6 6368616E 		.ascii	"chan\000"
 2293      00
 2294              	.LASF50:
 2295 02ab 6D566F6C 		.ascii	"mVolts\000"
 2295      747300
 2296              	.LASF20:
 2297 02b2 73697A65 		.ascii	"sizetype\000"
 2297      74797065 
 2297      00
 2298              	.LASF6:
 2299 02bb 6C6F6E67 		.ascii	"long long int\000"
 2299      206C6F6E 
 2299      6720696E 
 2299      7400
 2300              	.LASF43:
 2301 02c9 4144435F 		.ascii	"ADC_1_SetSatMask\000"
 2301      315F5365 
 2301      74536174 
 2301      4D61736B 
 2301      00
 2302              	.LASF28:
 2303 02da 4144435F 		.ascii	"ADC_1_StopConvert\000"
 2303      315F5374 
 2303      6F70436F 
 2303      6E766572 
 2303      7400
 2304              	.LASF24:
 2305 02ec 4144435F 		.ascii	"ADC_1_Start\000"
 2305      315F5374 
 2305      61727400 
 2306              	.LASF53:
 2307 02f8 4144435F 		.ascii	"ADC_1_CountsTo_Volts\000"
 2307      315F436F 
 2307      756E7473 
 2307      546F5F56 
 2307      6F6C7473 
 2308              	.LASF32:
 2309 030d 7265744D 		.ascii	"retMode\000"
 2309      6F646500 
 2310              	.LASF2:
 2311 0315 73686F72 		.ascii	"short int\000"
 2311      7420696E 
 2311      7400
 2312              	.LASF48:
 2313 031f 4144435F 		.ascii	"ADC_1_CountsTo_mVolts\000"
 2313      315F436F 
 2313      756E7473 
 2313      546F5F6D 
 2313      566F6C74 
 2314              	.LASF9:
 2315 0335 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cctCBJSy.s 			page 59


 2315      3800
 2316              	.LASF55:
 2317 033b 4144435F 		.ascii	"ADC_1_channelsConfig\000"
 2317      315F6368 
 2317      616E6E65 
 2317      6C73436F 
 2317      6E666967 
 2318              	.LASF38:
 2319 0350 4144435F 		.ascii	"ADC_1_SetLowLimit\000"
 2319      315F5365 
 2319      744C6F77 
 2319      4C696D69 
 2319      7400
 2320              	.LASF4:
 2321 0362 6C6F6E67 		.ascii	"long int\000"
 2321      20696E74 
 2321      00
 2322              	.LASF18:
 2323 036b 63686172 		.ascii	"char\000"
 2323      00
 2324              	.LASF21:
 2325 0370 63684E75 		.ascii	"chNum\000"
 2325      6D00
 2326              	.LASF0:
 2327 0376 7369676E 		.ascii	"signed char\000"
 2327      65642063 
 2327      68617200 
 2328              	.LASF30:
 2329 0382 4144435F 		.ascii	"ADC_1_IsEndConversion\000"
 2329      315F4973 
 2329      456E6443 
 2329      6F6E7665 
 2329      7273696F 
 2330              	.LASF34:
 2331 0398 72657375 		.ascii	"result\000"
 2331      6C7400
 2332              	.LASF17:
 2333 039f 696E7436 		.ascii	"int64\000"
 2333      3400
 2334              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
