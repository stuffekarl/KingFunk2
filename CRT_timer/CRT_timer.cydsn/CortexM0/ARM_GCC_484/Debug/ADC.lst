ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31 0004 00120000 		.word	4608
  32              		.section	.text.ADC_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_Start, %function
  38              	ADC_Start:
  39              	.LFB0:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00001200u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_initVar
  71              		.cfi_endproc
  72              	.LFE0:
  73              		.size	ADC_Start, .-ADC_Start
  74              		.global	__aeabi_idiv
  75              		.section	.text.ADC_Init,"ax",%progbits
  76              		.align	2
  77              		.global	ADC_Init
  78              		.code	16
  79              		.thumb_func
  80              		.type	ADC_Init, %function
  81              	ADC_Init:
  82              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 4


  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  83              		.loc 1 95 0
  84              		.cfi_startproc
  85 0000 90B5     		push	{r4, r7, lr}
  86              		.cfi_def_cfa_offset 12
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 85B0     		sub	sp, sp, #20
  91              		.cfi_def_cfa_offset 32
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 5


 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  94              		.loc 1 140 0
  95 0006 0E20     		mov	r0, #14
  96 0008 0321     		mov	r1, #3
  97 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  98              		.loc 1 141 0
  99 000e 5C4B     		ldr	r3, .L14
 100 0010 0E20     		mov	r0, #14
 101 0012 191C     		mov	r1, r3
 102 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 103              		.loc 1 145 0
 104 0018 5A4B     		ldr	r3, .L14+4
 105 001a 0322     		mov	r2, #3
 106 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG = ADC_DEFAULT_CTRL_REG_CFG;
 107              		.loc 1 146 0
 108 001e 5A4B     		ldr	r3, .L14+8
 109 0020 5A4A     		ldr	r2, .L14+12
 110 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 111              		.loc 1 147 0
 112 0024 5A4B     		ldr	r3, .L14+16
 113 0026 5B4A     		ldr	r2, .L14+20
 114 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 115              		.loc 1 148 0
 116 002a 5B4B     		ldr	r3, .L14+24
 117 002c 5B4A     		ldr	r2, .L14+28
 118 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 119              		.loc 1 149 0
 120 0030 5B4B     		ldr	r3, .L14+32
 121 0032 0022     		mov	r2, #0
 122 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 123              		.loc 1 150 0
 124 0036 5B4B     		ldr	r3, .L14+36
 125 0038 5B4A     		ldr	r2, .L14+40
 126 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 127              		.loc 1 151 0
 128 003c 5B4B     		ldr	r3, .L14+44
 129 003e 5C4A     		ldr	r2, .L14+48
 130 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     
 153:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 6


 131              		.loc 1 155 0
 132 0042 5C4B     		ldr	r3, .L14+52
 133 0044 5B4A     		ldr	r2, .L14+52
 134 0046 1268     		ldr	r2, [r2]
 135 0048 8021     		mov	r1, #128
 136 004a 4902     		lsl	r1, r1, #9
 137 004c 0A43     		orr	r2, r1
 138 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 139              		.loc 1 158 0
 140 0050 594B     		ldr	r3, .L14+56
 141 0052 594A     		ldr	r2, .L14+56
 142 0054 1268     		ldr	r2, [r2]
 143 0056 8021     		mov	r1, #128
 144 0058 4902     		lsl	r1, r1, #9
 145 005a 0A43     		orr	r2, r1
 146 005c 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC.c **** 
 162:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 147              		.loc 1 162 0
 148 005e 574B     		ldr	r3, .L14+60
 149 0060 0022     		mov	r2, #0
 150 0062 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 151              		.loc 1 163 0
 152 0064 564B     		ldr	r3, .L14+64
 153 0066 0022     		mov	r2, #0
 154 0068 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 155              		.loc 1 164 0
 156 006a 564B     		ldr	r3, .L14+68
 157 006c 0122     		mov	r2, #1
 158 006e 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC.c **** 
 166:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 159              		.loc 1 167 0
 160 0070 554B     		ldr	r3, .L14+72
 161 0072 0222     		mov	r2, #2
 162 0074 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 163              		.loc 1 171 0
 164 0076 554B     		ldr	r3, .L14+76
 165 0078 1B68     		ldr	r3, [r3]
 166 007a 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 167              		.loc 1 172 0
 168 007c 7A68     		ldr	r2, [r7, #4]
 169 007e 544B     		ldr	r3, .L14+80
 170 0080 1340     		and	r3, r2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 7


 171 0082 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC.c ****     
 174:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 172              		.loc 1 178 0
 173 0084 7B68     		ldr	r3, [r7, #4]
 174 0086 0122     		mov	r2, #1
 175 0088 1343     		orr	r3, r2
 176 008a 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC.c ****     #else
 181:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC.c ****         #else
 185:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC.c ****     
 191:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 177              		.loc 1 191 0
 178 008c 4F4B     		ldr	r3, .L14+76
 179 008e 7A68     		ldr	r2, [r7, #4]
 180 0090 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c **** 
 193:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 181              		.loc 1 197 0
 182 0092 0023     		mov	r3, #0
 183 0094 FB60     		str	r3, [r7, #12]
 184 0096 6DE0     		b	.L6
 185              	.L13:
 198:.\Generated_Source\PSoC4/ADC.c ****     {
 199:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 186              		.loc 1 199 0
 187 0098 4E4B     		ldr	r3, .L14+84
 188 009a FA68     		ldr	r2, [r7, #12]
 189 009c 9200     		lsl	r2, r2, #2
 190 009e D258     		ldr	r2, [r2, r3]
 191 00a0 DC23     		mov	r3, #220
 192 00a2 9B01     		lsl	r3, r3, #6
 193 00a4 1340     		and	r3, r2
 194 00a6 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 195              		.loc 1 201 0
 196 00a8 4B4A     		ldr	r2, .L14+88
 197 00aa FB68     		ldr	r3, [r7, #12]
 198 00ac D318     		add	r3, r2, r3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 8


 199 00ae 1B78     		ldrb	r3, [r3]
 200 00b0 7A68     		ldr	r2, [r7, #4]
 201 00b2 1343     		orr	r3, r2
 202 00b4 7B60     		str	r3, [r7, #4]
 202:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC.c ****         
 204:.\Generated_Source\PSoC4/ADC.c ****         
 205:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC.c ****         */
 209:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC.c **** 
 214:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC.c ****         {
 218:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 203              		.loc 1 218 0
 204 00b6 FB68     		ldr	r3, [r7, #12]
 205 00b8 9B00     		lsl	r3, r3, #2
 206 00ba 484A     		ldr	r2, .L14+92
 207 00bc 9B18     		add	r3, r3, r2
 208 00be 7A68     		ldr	r2, [r7, #4]
 209 00c0 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC.c **** 
 220:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 210              		.loc 1 220 0
 211 00c2 444B     		ldr	r3, .L14+84
 212 00c4 FA68     		ldr	r2, [r7, #12]
 213 00c6 9200     		lsl	r2, r2, #2
 214 00c8 D258     		ldr	r2, [r2, r3]
 215 00ca 0123     		mov	r3, #1
 216 00cc 1340     		and	r3, r2
 217 00ce 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC.c ****             {
 222:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 218              		.loc 1 222 0
 219 00d0 3A4B     		ldr	r3, .L14+60
 220 00d2 3A4A     		ldr	r2, .L14+60
 221 00d4 1168     		ldr	r1, [r2]
 222 00d6 FA68     		ldr	r2, [r7, #12]
 223 00d8 0120     		mov	r0, #1
 224 00da 041C     		mov	r4, r0
 225 00dc 9440     		lsl	r4, r4, r2
 226 00de 221C     		mov	r2, r4
 227 00e0 92B2     		uxth	r2, r2
 228 00e2 0A43     		orr	r2, r1
 229 00e4 1A60     		str	r2, [r3]
 230              	.L7:
 223:.\Generated_Source\PSoC4/ADC.c ****             }
 224:.\Generated_Source\PSoC4/ADC.c **** 
 225:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 231              		.loc 1 225 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 9


 232 00e6 3B4B     		ldr	r3, .L14+84
 233 00e8 FA68     		ldr	r2, [r7, #12]
 234 00ea 9200     		lsl	r2, r2, #2
 235 00ec D258     		ldr	r2, [r2, r3]
 236 00ee 0223     		mov	r3, #2
 237 00f0 1340     		and	r3, r2
 238 00f2 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC.c ****             {
 227:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 239              		.loc 1 227 0
 240 00f4 324B     		ldr	r3, .L14+64
 241 00f6 324A     		ldr	r2, .L14+64
 242 00f8 1168     		ldr	r1, [r2]
 243 00fa FA68     		ldr	r2, [r7, #12]
 244 00fc 0120     		mov	r0, #1
 245 00fe 041C     		mov	r4, r0
 246 0100 9440     		lsl	r4, r4, r2
 247 0102 221C     		mov	r2, r4
 248 0104 92B2     		uxth	r2, r2
 249 0106 0A43     		orr	r2, r1
 250 0108 1A60     		str	r2, [r3]
 251              	.L8:
 228:.\Generated_Source\PSoC4/ADC.c ****             }
 229:.\Generated_Source\PSoC4/ADC.c ****         }
 230:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC.c ****             else
 232:.\Generated_Source\PSoC4/ADC.c ****             {
 233:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC.c **** 
 235:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC.c ****                 {
 237:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC.c ****                 }
 239:.\Generated_Source\PSoC4/ADC.c **** 
 240:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC.c ****                 {
 242:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC.c ****                 }
 244:.\Generated_Source\PSoC4/ADC.c ****             }
 245:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC.c **** 
 247:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 252              		.loc 1 247 0
 253 010a 324B     		ldr	r3, .L14+84
 254 010c FA68     		ldr	r2, [r7, #12]
 255 010e 9200     		lsl	r2, r2, #2
 256 0110 D258     		ldr	r2, [r2, r3]
 257 0112 8023     		mov	r3, #128
 258 0114 9B00     		lsl	r3, r3, #2
 259 0116 1340     		and	r3, r2
 260 0118 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC.c ****         {
 249:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 261              		.loc 1 249 0
 262 011a 8023     		mov	r3, #128
 263 011c 5B00     		lsl	r3, r3, #1
 264 011e BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 10


 265 0120 02E0     		b	.L10
 266              	.L9:
 250:.\Generated_Source\PSoC4/ADC.c ****         }
 251:.\Generated_Source\PSoC4/ADC.c ****         else
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 267              		.loc 1 253 0
 268 0122 8023     		mov	r3, #128
 269 0124 5B01     		lsl	r3, r3, #5
 270 0126 BB60     		str	r3, [r7, #8]
 271              	.L10:
 254:.\Generated_Source\PSoC4/ADC.c ****         }
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 272              		.loc 1 256 0
 273 0128 2A4B     		ldr	r3, .L14+84
 274 012a FA68     		ldr	r2, [r7, #12]
 275 012c 9200     		lsl	r2, r2, #2
 276 012e D258     		ldr	r2, [r2, r3]
 277 0130 8023     		mov	r3, #128
 278 0132 5B00     		lsl	r3, r3, #1
 279 0134 1340     		and	r3, r2
 280 0136 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC.c ****         {
 258:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 260:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC.c ****             #else
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 281              		.loc 1 263 0
 282 0138 294B     		ldr	r3, .L14+96
 283 013a FA68     		ldr	r2, [r7, #12]
 284 013c 5200     		lsl	r2, r2, #1
 285 013e 0021     		mov	r1, #0
 286 0140 D152     		strh	r1, [r2, r3]
 287 0142 04E0     		b	.L12
 288              	.L11:
 264:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC.c ****         {
 268:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 271:.\Generated_Source\PSoC4/ADC.c ****             #else
 272:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 289              		.loc 1 272 0
 290 0144 264B     		ldr	r3, .L14+96
 291 0146 FA68     		ldr	r2, [r7, #12]
 292 0148 5200     		lsl	r2, r2, #1
 293 014a 0021     		mov	r1, #0
 294 014c D152     		strh	r1, [r2, r3]
 295              	.L12:
 273:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC.c ****         }
 275:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 11


 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 296              		.loc 1 276 0
 297 014e BB68     		ldr	r3, [r7, #8]
 298 0150 244A     		ldr	r2, .L14+100
 299 0152 5343     		mul	r3, r2
 300 0154 244A     		ldr	r2, .L14+104
 301 0156 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 302              		.loc 1 277 0
 303 0158 181C     		mov	r0, r3
 304 015a 2449     		ldr	r1, .L14+108
 305 015c FFF7FEFF 		bl	__aeabi_idiv
 306 0160 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 307              		.loc 1 276 0
 308 0162 9BB2     		uxth	r3, r3
 309 0164 19B2     		sxth	r1, r3
 310 0166 224B     		ldr	r3, .L14+112
 311 0168 FA68     		ldr	r2, [r7, #12]
 312 016a 9200     		lsl	r2, r2, #2
 313 016c D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 314              		.loc 1 197 0
 315 016e FB68     		ldr	r3, [r7, #12]
 316 0170 0133     		add	r3, r3, #1
 317 0172 FB60     		str	r3, [r7, #12]
 318              	.L6:
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 319              		.loc 1 197 0 is_stmt 0 discriminator 1
 320 0174 FB68     		ldr	r3, [r7, #12]
 321 0176 012B     		cmp	r3, #1
 322 0178 8ED9     		bls	.L13
 278:.\Generated_Source\PSoC4/ADC.c ****     }
 279:.\Generated_Source\PSoC4/ADC.c **** }
 323              		.loc 1 279 0 is_stmt 1
 324 017a BD46     		mov	sp, r7
 325 017c 05B0     		add	sp, sp, #20
 326              		@ sp needed
 327 017e 90BD     		pop	{r4, r7, pc}
 328              	.L15:
 329              		.align	2
 330              	.L14:
 331 0180 00000000 		.word	ADC_ISR
 332 0184 20001A40 		.word	1075445792
 333 0188 00001A40 		.word	1075445760
 334 018c 70200010 		.word	268443760
 335 0190 04001A40 		.word	1075445764
 336 0194 8C000080 		.word	-2147483508
 337 0198 18001A40 		.word	1075445784
 338 019c 0000FF07 		.word	134152192
 339 01a0 1C001A40 		.word	1075445788
 340 01a4 10001A40 		.word	1075445776
 341 01a8 02001E00 		.word	1966082
 342 01ac 14001A40 		.word	1075445780
 343 01b0 02000200 		.word	131074
 344 01b4 00031A40 		.word	1075446528
 345 01b8 40031A40 		.word	1075446592
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 12


 346 01bc 28021A40 		.word	1075446312
 347 01c0 38021A40 		.word	1075446328
 348 01c4 18021A40 		.word	1075446296
 349 01c8 000F1A40 		.word	1075449600
 350 01cc 30001A40 		.word	1075445808
 351 01d0 FFFFFFDF 		.word	-536870913
 352 01d4 00000000 		.word	ADC_channelsConfig
 353 01d8 08000000 		.word	ADC_InputsPlacement.4717
 354 01dc 80001A40 		.word	1075445888
 355 01e0 00000000 		.word	ADC_offset
 356 01e4 10270000 		.word	10000
 357 01e8 E40C0000 		.word	3300
 358 01ec C8190000 		.word	6600
 359 01f0 00000000 		.word	ADC_countsPer10Volt
 360              		.cfi_endproc
 361              	.LFE1:
 362              		.size	ADC_Init, .-ADC_Init
 363              		.section	.text.ADC_Enable,"ax",%progbits
 364              		.align	2
 365              		.global	ADC_Enable
 366              		.code	16
 367              		.thumb_func
 368              		.type	ADC_Enable, %function
 369              	ADC_Enable:
 370              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC.c **** 
 281:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC.c **** *
 285:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 296:.\Generated_Source\PSoC4/ADC.c **** {
 371              		.loc 1 296 0
 372              		.cfi_startproc
 373 0000 80B5     		push	{r7, lr}
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 7, -8
 376              		.cfi_offset 14, -4
 377 0002 00AF     		add	r7, sp, #0
 378              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 379              		.loc 1 297 0
 380 0004 074B     		ldr	r3, .L18
 381 0006 1B68     		ldr	r3, [r3]
 382 0008 002B     		cmp	r3, #0
 383 000a 09DB     		blt	.L16
 298:.\Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 13


 299:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC.c **** 
 301:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC.c ****             {
 303:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC.c ****             }
 305:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC.c ****         
 307:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 384              		.loc 1 307 0
 385 000c 054B     		ldr	r3, .L18
 386 000e 054A     		ldr	r2, .L18
 387 0010 1268     		ldr	r2, [r2]
 388 0012 8021     		mov	r1, #128
 389 0014 0906     		lsl	r1, r1, #24
 390 0016 0A43     		orr	r2, r1
 391 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC.c ****         
 309:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 392              		.loc 1 310 0
 393 001a 0A20     		mov	r0, #10
 394 001c FFF7FEFF 		bl	CyDelayUs
 395              	.L16:
 311:.\Generated_Source\PSoC4/ADC.c ****     }
 312:.\Generated_Source\PSoC4/ADC.c **** }
 396              		.loc 1 312 0
 397 0020 BD46     		mov	sp, r7
 398              		@ sp needed
 399 0022 80BD     		pop	{r7, pc}
 400              	.L19:
 401              		.align	2
 402              	.L18:
 403 0024 00001A40 		.word	1075445760
 404              		.cfi_endproc
 405              	.LFE2:
 406              		.size	ADC_Enable, .-ADC_Enable
 407              		.section	.text.ADC_Stop,"ax",%progbits
 408              		.align	2
 409              		.global	ADC_Stop
 410              		.code	16
 411              		.thumb_func
 412              		.type	ADC_Stop, %function
 413              	ADC_Stop:
 414              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC.c **** 
 314:.\Generated_Source\PSoC4/ADC.c **** 
 315:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 317:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** *
 319:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 14


 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 415              		.loc 1 331 0
 416              		.cfi_startproc
 417 0000 80B5     		push	{r7, lr}
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 00AF     		add	r7, sp, #0
 422              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 423              		.loc 1 332 0
 424 0004 034B     		ldr	r3, .L21
 425 0006 034A     		ldr	r2, .L21
 426 0008 1268     		ldr	r2, [r2]
 427 000a 5200     		lsl	r2, r2, #1
 428 000c 5208     		lsr	r2, r2, #1
 429 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC.c **** }
 430              		.loc 1 333 0
 431 0010 BD46     		mov	sp, r7
 432              		@ sp needed
 433 0012 80BD     		pop	{r7, pc}
 434              	.L22:
 435              		.align	2
 436              	.L21:
 437 0014 00001A40 		.word	1075445760
 438              		.cfi_endproc
 439              	.LFE3:
 440              		.size	ADC_Stop, .-ADC_Stop
 441              		.section	.text.ADC_StartConvert,"ax",%progbits
 442              		.align	2
 443              		.global	ADC_StartConvert
 444              		.code	16
 445              		.thumb_func
 446              		.type	ADC_StartConvert, %function
 447              	ADC_StartConvert:
 448              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC.c **** 
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 338:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC.c **** *
 340:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC.c **** *
 345:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 15


 348:.\Generated_Source\PSoC4/ADC.c **** *
 349:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC.c **** {
 449              		.loc 1 357 0
 450              		.cfi_startproc
 451 0000 80B5     		push	{r7, lr}
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 0002 00AF     		add	r7, sp, #0
 456              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 457              		.loc 1 359 0
 458 0004 044B     		ldr	r3, .L24
 459 0006 044A     		ldr	r2, .L24
 460 0008 1268     		ldr	r2, [r2]
 461 000a 8021     		mov	r1, #128
 462 000c 4902     		lsl	r1, r1, #9
 463 000e 0A43     		orr	r2, r1
 464 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC.c **** 
 364:.\Generated_Source\PSoC4/ADC.c **** }
 465              		.loc 1 364 0
 466 0012 BD46     		mov	sp, r7
 467              		@ sp needed
 468 0014 80BD     		pop	{r7, pc}
 469              	.L25:
 470 0016 C046     		.align	2
 471              	.L24:
 472 0018 04001A40 		.word	1075445764
 473              		.cfi_endproc
 474              	.LFE4:
 475              		.size	ADC_StartConvert, .-ADC_StartConvert
 476              		.section	.text.ADC_StopConvert,"ax",%progbits
 477              		.align	2
 478              		.global	ADC_StopConvert
 479              		.code	16
 480              		.thumb_func
 481              		.type	ADC_StopConvert, %function
 482              	ADC_StopConvert:
 483              	.LFB5:
 365:.\Generated_Source\PSoC4/ADC.c **** 
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 369:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 16


 370:.\Generated_Source\PSoC4/ADC.c **** *
 371:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC.c **** {
 484              		.loc 1 382 0
 485              		.cfi_startproc
 486 0000 80B5     		push	{r7, lr}
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 490 0002 00AF     		add	r7, sp, #0
 491              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 492              		.loc 1 384 0
 493 0004 034B     		ldr	r3, .L27
 494 0006 034A     		ldr	r2, .L27
 495 0008 1168     		ldr	r1, [r2]
 496 000a 034A     		ldr	r2, .L27+4
 497 000c 0A40     		and	r2, r1
 498 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC.c **** }
 499              		.loc 1 386 0
 500 0010 BD46     		mov	sp, r7
 501              		@ sp needed
 502 0012 80BD     		pop	{r7, pc}
 503              	.L28:
 504              		.align	2
 505              	.L27:
 506 0014 04001A40 		.word	1075445764
 507 0018 FFFFFEFF 		.word	-65537
 508              		.cfi_endproc
 509              	.LFE5:
 510              		.size	ADC_StopConvert, .-ADC_StopConvert
 511              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 512              		.align	2
 513              		.global	ADC_IsEndConversion
 514              		.code	16
 515              		.thumb_func
 516              		.type	ADC_IsEndConversion, %function
 517              	ADC_IsEndConversion:
 518              	.LFB6:
 387:.\Generated_Source\PSoC4/ADC.c **** 
 388:.\Generated_Source\PSoC4/ADC.c **** 
 389:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 17


 392:.\Generated_Source\PSoC4/ADC.c **** *
 393:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC.c **** *
 402:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC.c **** *
 414:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC.c **** {
 519              		.loc 1 416 0
 520              		.cfi_startproc
 521 0000 80B5     		push	{r7, lr}
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 7, -8
 524              		.cfi_offset 14, -4
 525 0002 84B0     		sub	sp, sp, #16
 526              		.cfi_def_cfa_offset 24
 527 0004 00AF     		add	r7, sp, #0
 528              		.cfi_def_cfa_register 7
 529 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 530              		.loc 1 417 0
 531 0008 0023     		mov	r3, #0
 532 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC.c **** 
 419:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 533              		.loc 1 419 0
 534 000c 7A68     		ldr	r2, [r7, #4]
 535 000e 0323     		mov	r3, #3
 536 0010 1340     		and	r3, r2
 537 0012 11D0     		beq	.L30
 538              	.L32:
 420:.\Generated_Source\PSoC4/ADC.c ****     {
 421:.\Generated_Source\PSoC4/ADC.c ****         do
 422:.\Generated_Source\PSoC4/ADC.c ****         {
 423:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 539              		.loc 1 423 0 discriminator 1
 540 0014 0B4B     		ldr	r3, .L34
 541 0016 1A68     		ldr	r2, [r3]
 542 0018 0123     		mov	r3, #1
 543 001a 1340     		and	r3, r2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 18


 544 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 545              		.loc 1 424 0 discriminator 1
 546 001e FB68     		ldr	r3, [r7, #12]
 547 0020 002B     		cmp	r3, #0
 548 0022 03D1     		bne	.L31
 549 0024 7A68     		ldr	r2, [r7, #4]
 550 0026 0223     		mov	r3, #2
 551 0028 1340     		and	r3, r2
 552 002a F3D1     		bne	.L32
 553              	.L31:
 425:.\Generated_Source\PSoC4/ADC.c **** 
 426:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 554              		.loc 1 426 0
 555 002c FB68     		ldr	r3, [r7, #12]
 556 002e 002B     		cmp	r3, #0
 557 0030 02D0     		beq	.L30
 427:.\Generated_Source\PSoC4/ADC.c ****         {
 428:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 558              		.loc 1 429 0
 559 0032 044B     		ldr	r3, .L34
 560 0034 0122     		mov	r2, #1
 561 0036 1A60     		str	r2, [r3]
 562              	.L30:
 430:.\Generated_Source\PSoC4/ADC.c ****         }
 431:.\Generated_Source\PSoC4/ADC.c ****     }
 432:.\Generated_Source\PSoC4/ADC.c **** 
 433:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC.c ****         {
 436:.\Generated_Source\PSoC4/ADC.c ****             do
 437:.\Generated_Source\PSoC4/ADC.c ****             {
 438:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC.c **** 
 442:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC.c ****             {
 444:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC.c ****             }
 447:.\Generated_Source\PSoC4/ADC.c ****         }
 448:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC.c **** 
 450:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 563              		.loc 1 450 0
 564 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC.c **** }
 565              		.loc 1 451 0
 566 003a 181C     		mov	r0, r3
 567 003c BD46     		mov	sp, r7
 568 003e 04B0     		add	sp, sp, #16
 569              		@ sp needed
 570 0040 80BD     		pop	{r7, pc}
 571              	.L35:
 572 0042 C046     		.align	2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 19


 573              	.L34:
 574 0044 10021A40 		.word	1075446288
 575              		.cfi_endproc
 576              	.LFE6:
 577              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 578              		.section	.text.ADC_GetResult16,"ax",%progbits
 579              		.align	2
 580              		.global	ADC_GetResult16
 581              		.code	16
 582              		.thumb_func
 583              		.type	ADC_GetResult16, %function
 584              	ADC_GetResult16:
 585              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 456:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC.c **** *
 458:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC.c **** *
 465:.\Generated_Source\PSoC4/ADC.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC.c **** {
 586              		.loc 1 470 0
 587              		.cfi_startproc
 588 0000 80B5     		push	{r7, lr}
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 7, -8
 591              		.cfi_offset 14, -4
 592 0002 84B0     		sub	sp, sp, #16
 593              		.cfi_def_cfa_offset 24
 594 0004 00AF     		add	r7, sp, #0
 595              		.cfi_def_cfa_register 7
 596 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC.c **** 
 473:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 597              		.loc 1 474 0
 598 0008 7B68     		ldr	r3, [r7, #4]
 599 000a 012B     		cmp	r3, #1
 600 000c 02D9     		bls	.L37
 601              		.loc 1 474 0 is_stmt 0 discriminator 1
 602 000e 0020     		mov	r0, #0
 603 0010 FFF7FEFF 		bl	CyHalt
 604              	.L37:
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 20


 605              		.loc 1 476 0 is_stmt 1
 606 0014 7B68     		ldr	r3, [r7, #4]
 607 0016 012B     		cmp	r3, #1
 608 0018 08D8     		bhi	.L38
 477:.\Generated_Source\PSoC4/ADC.c ****     {
 478:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 609              		.loc 1 478 0
 610 001a 7B68     		ldr	r3, [r7, #4]
 611 001c 9B00     		lsl	r3, r3, #2
 612 001e 084A     		ldr	r2, .L41
 613 0020 9B18     		add	r3, r3, r2
 614 0022 1B68     		ldr	r3, [r3]
 615 0024 1B04     		lsl	r3, r3, #16
 616 0026 1B0C     		lsr	r3, r3, #16
 617 0028 FB60     		str	r3, [r7, #12]
 618 002a 01E0     		b	.L39
 619              	.L38:
 479:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC.c ****     }
 481:.\Generated_Source\PSoC4/ADC.c ****     else
 482:.\Generated_Source\PSoC4/ADC.c ****     {
 483:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC.c ****         #else
 486:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 620              		.loc 1 486 0
 621 002c 0023     		mov	r3, #0
 622 002e FB60     		str	r3, [r7, #12]
 623              	.L39:
 487:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC.c ****     }
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 624              		.loc 1 490 0
 625 0030 FB68     		ldr	r3, [r7, #12]
 626 0032 9BB2     		uxth	r3, r3
 627 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC.c **** }
 628              		.loc 1 491 0
 629 0036 181C     		mov	r0, r3
 630 0038 BD46     		mov	sp, r7
 631 003a 04B0     		add	sp, sp, #16
 632              		@ sp needed
 633 003c 80BD     		pop	{r7, pc}
 634              	.L42:
 635 003e C046     		.align	2
 636              	.L41:
 637 0040 80011A40 		.word	1075446144
 638              		.cfi_endproc
 639              	.LFE7:
 640              		.size	ADC_GetResult16, .-ADC_GetResult16
 641              		.section	.text.ADC_SetChanMask,"ax",%progbits
 642              		.align	2
 643              		.global	ADC_SetChanMask
 644              		.code	16
 645              		.thumb_func
 646              		.type	ADC_SetChanMask, %function
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 21


 647              	ADC_SetChanMask:
 648              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c **** 
 494:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 496:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC.c **** *
 498:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC.c **** *
 510:.\Generated_Source\PSoC4/ADC.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC.c **** {
 649              		.loc 1 515 0
 650              		.cfi_startproc
 651 0000 80B5     		push	{r7, lr}
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 7, -8
 654              		.cfi_offset 14, -4
 655 0002 82B0     		sub	sp, sp, #8
 656              		.cfi_def_cfa_offset 16
 657 0004 00AF     		add	r7, sp, #0
 658              		.cfi_def_cfa_register 7
 659 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 660              		.loc 1 516 0
 661 0008 034B     		ldr	r3, .L44
 662 000a 7968     		ldr	r1, [r7, #4]
 663 000c 0322     		mov	r2, #3
 664 000e 0A40     		and	r2, r1
 665 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC.c **** }
 666              		.loc 1 517 0
 667 0012 BD46     		mov	sp, r7
 668 0014 02B0     		add	sp, sp, #8
 669              		@ sp needed
 670 0016 80BD     		pop	{r7, pc}
 671              	.L45:
 672              		.align	2
 673              	.L44:
 674 0018 20001A40 		.word	1075445792
 675              		.cfi_endproc
 676              	.LFE8:
 677              		.size	ADC_SetChanMask, .-ADC_SetChanMask
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 22


 678              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 679              		.align	2
 680              		.global	ADC_SetLowLimit
 681              		.code	16
 682              		.thumb_func
 683              		.type	ADC_SetLowLimit, %function
 684              	ADC_SetLowLimit:
 685              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC.c **** 
 519:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c **** 
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 524:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC.c ****     *
 526:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC.c ****     {
 538:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC.c ****     }
 540:.\Generated_Source\PSoC4/ADC.c **** 
 541:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC.c **** 
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC.c **** {
 686              		.loc 1 559 0
 687              		.cfi_startproc
 688 0000 80B5     		push	{r7, lr}
 689              		.cfi_def_cfa_offset 8
 690              		.cfi_offset 7, -8
 691              		.cfi_offset 14, -4
 692 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 23


 693              		.cfi_def_cfa_offset 16
 694 0004 00AF     		add	r7, sp, #0
 695              		.cfi_def_cfa_register 7
 696 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 697              		.loc 1 560 0
 698 0008 084B     		ldr	r3, .L47
 699 000a 084A     		ldr	r2, .L47
 700 000c 1268     		ldr	r2, [r2]
 701 000e 120C     		lsr	r2, r2, #16
 702 0010 1204     		lsl	r2, r2, #16
 703 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 704              		.loc 1 561 0
 705 0014 054B     		ldr	r3, .L47
 706 0016 054A     		ldr	r2, .L47
 707 0018 1168     		ldr	r1, [r2]
 708 001a 7A68     		ldr	r2, [r7, #4]
 709 001c 1204     		lsl	r2, r2, #16
 710 001e 120C     		lsr	r2, r2, #16
 711 0020 0A43     		orr	r2, r1
 712 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC.c **** }
 713              		.loc 1 562 0
 714 0024 BD46     		mov	sp, r7
 715 0026 02B0     		add	sp, sp, #8
 716              		@ sp needed
 717 0028 80BD     		pop	{r7, pc}
 718              	.L48:
 719 002a C046     		.align	2
 720              	.L47:
 721 002c 18001A40 		.word	1075445784
 722              		.cfi_endproc
 723              	.LFE9:
 724              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 725              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 726              		.align	2
 727              		.global	ADC_SetHighLimit
 728              		.code	16
 729              		.thumb_func
 730              		.type	ADC_SetHighLimit, %function
 731              	ADC_SetHighLimit:
 732              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC.c **** 
 564:.\Generated_Source\PSoC4/ADC.c **** 
 565:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC.c **** *
 569:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 24


 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC.c **** {
 733              		.loc 1 580 0
 734              		.cfi_startproc
 735 0000 80B5     		push	{r7, lr}
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 82B0     		sub	sp, sp, #8
 740              		.cfi_def_cfa_offset 16
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 743 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 744              		.loc 1 581 0
 745 0008 074B     		ldr	r3, .L50
 746 000a 074A     		ldr	r2, .L50
 747 000c 1268     		ldr	r2, [r2]
 748 000e 1204     		lsl	r2, r2, #16
 749 0010 120C     		lsr	r2, r2, #16
 750 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 751              		.loc 1 582 0
 752 0014 044B     		ldr	r3, .L50
 753 0016 044A     		ldr	r2, .L50
 754 0018 1168     		ldr	r1, [r2]
 755 001a 7A68     		ldr	r2, [r7, #4]
 756 001c 1204     		lsl	r2, r2, #16
 757 001e 0A43     		orr	r2, r1
 758 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC.c **** }
 759              		.loc 1 583 0
 760 0022 BD46     		mov	sp, r7
 761 0024 02B0     		add	sp, sp, #8
 762              		@ sp needed
 763 0026 80BD     		pop	{r7, pc}
 764              	.L51:
 765              		.align	2
 766              	.L50:
 767 0028 18001A40 		.word	1075445784
 768              		.cfi_endproc
 769              	.LFE10:
 770              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 771              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 772              		.align	2
 773              		.global	ADC_SetLimitMask
 774              		.code	16
 775              		.thumb_func
 776              		.type	ADC_SetLimitMask, %function
 777              	ADC_SetLimitMask:
 778              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC.c **** 
 585:.\Generated_Source\PSoC4/ADC.c **** 
 586:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 25


 588:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC.c **** *
 599:.\Generated_Source\PSoC4/ADC.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC.c **** {
 779              		.loc 1 604 0
 780              		.cfi_startproc
 781 0000 80B5     		push	{r7, lr}
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 7, -8
 784              		.cfi_offset 14, -4
 785 0002 82B0     		sub	sp, sp, #8
 786              		.cfi_def_cfa_offset 16
 787 0004 00AF     		add	r7, sp, #0
 788              		.cfi_def_cfa_register 7
 789 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 790              		.loc 1 605 0
 791 0008 034B     		ldr	r3, .L53
 792 000a 7968     		ldr	r1, [r7, #4]
 793 000c 0322     		mov	r2, #3
 794 000e 0A40     		and	r2, r1
 795 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC.c **** }
 796              		.loc 1 606 0
 797 0012 BD46     		mov	sp, r7
 798 0014 02B0     		add	sp, sp, #8
 799              		@ sp needed
 800 0016 80BD     		pop	{r7, pc}
 801              	.L54:
 802              		.align	2
 803              	.L53:
 804 0018 38021A40 		.word	1075446328
 805              		.cfi_endproc
 806              	.LFE11:
 807              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 808              		.section	.text.ADC_SetSatMask,"ax",%progbits
 809              		.align	2
 810              		.global	ADC_SetSatMask
 811              		.code	16
 812              		.thumb_func
 813              		.type	ADC_SetSatMask, %function
 814              	ADC_SetSatMask:
 815              	.LFB12:
 607:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 26


 608:.\Generated_Source\PSoC4/ADC.c **** 
 609:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 611:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC.c **** *
 622:.\Generated_Source\PSoC4/ADC.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC.c **** {
 816              		.loc 1 627 0
 817              		.cfi_startproc
 818 0000 80B5     		push	{r7, lr}
 819              		.cfi_def_cfa_offset 8
 820              		.cfi_offset 7, -8
 821              		.cfi_offset 14, -4
 822 0002 82B0     		sub	sp, sp, #8
 823              		.cfi_def_cfa_offset 16
 824 0004 00AF     		add	r7, sp, #0
 825              		.cfi_def_cfa_register 7
 826 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 827              		.loc 1 628 0
 828 0008 034B     		ldr	r3, .L56
 829 000a 7968     		ldr	r1, [r7, #4]
 830 000c 0322     		mov	r2, #3
 831 000e 0A40     		and	r2, r1
 832 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC.c **** }
 833              		.loc 1 629 0
 834 0012 BD46     		mov	sp, r7
 835 0014 02B0     		add	sp, sp, #8
 836              		@ sp needed
 837 0016 80BD     		pop	{r7, pc}
 838              	.L57:
 839              		.align	2
 840              	.L56:
 841 0018 28021A40 		.word	1075446312
 842              		.cfi_endproc
 843              	.LFE12:
 844              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 845              		.section	.text.ADC_SetOffset,"ax",%progbits
 846              		.align	2
 847              		.global	ADC_SetOffset
 848              		.code	16
 849              		.thumb_func
 850              		.type	ADC_SetOffset, %function
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 27


 851              	ADC_SetOffset:
 852              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC.c **** 
 631:.\Generated_Source\PSoC4/ADC.c **** 
 632:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 634:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC.c **** *
 636:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC.c **** *
 642:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC.c **** *
 647:.\Generated_Source\PSoC4/ADC.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC.c **** {
 853              		.loc 1 655 0
 854              		.cfi_startproc
 855 0000 80B5     		push	{r7, lr}
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 82B0     		sub	sp, sp, #8
 860              		.cfi_def_cfa_offset 16
 861 0004 00AF     		add	r7, sp, #0
 862              		.cfi_def_cfa_register 7
 863 0006 7860     		str	r0, [r7, #4]
 864 0008 0A1C     		mov	r2, r1
 865 000a BB1C     		add	r3, r7, #2
 866 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 867              		.loc 1 657 0
 868 000e 7B68     		ldr	r3, [r7, #4]
 869 0010 012B     		cmp	r3, #1
 870 0012 02D9     		bls	.L59
 871              		.loc 1 657 0 is_stmt 0 discriminator 1
 872 0014 0020     		mov	r0, #0
 873 0016 FFF7FEFF 		bl	CyHalt
 874              	.L59:
 658:.\Generated_Source\PSoC4/ADC.c **** 
 659:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 875              		.loc 1 659 0 is_stmt 1
 876 001a 044B     		ldr	r3, .L60
 877 001c 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 28


 878 001e 5200     		lsl	r2, r2, #1
 879 0020 B91C     		add	r1, r7, #2
 880 0022 0988     		ldrh	r1, [r1]
 881 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC.c **** }
 882              		.loc 1 660 0
 883 0026 BD46     		mov	sp, r7
 884 0028 02B0     		add	sp, sp, #8
 885              		@ sp needed
 886 002a 80BD     		pop	{r7, pc}
 887              	.L61:
 888              		.align	2
 889              	.L60:
 890 002c 00000000 		.word	ADC_offset
 891              		.cfi_endproc
 892              	.LFE13:
 893              		.size	ADC_SetOffset, .-ADC_SetOffset
 894              		.section	.text.ADC_SetGain,"ax",%progbits
 895              		.align	2
 896              		.global	ADC_SetGain
 897              		.code	16
 898              		.thumb_func
 899              		.type	ADC_SetGain, %function
 900              	ADC_SetGain:
 901              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c **** 
 663:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 665:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC.c **** *
 667:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC.c **** *
 676:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC.c **** *
 680:.\Generated_Source\PSoC4/ADC.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC.c **** *
 687:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC.c **** {
 902              		.loc 1 689 0
 903              		.cfi_startproc
 904 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 29


 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 7, -8
 907              		.cfi_offset 14, -4
 908 0002 82B0     		sub	sp, sp, #8
 909              		.cfi_def_cfa_offset 16
 910 0004 00AF     		add	r7, sp, #0
 911              		.cfi_def_cfa_register 7
 912 0006 7860     		str	r0, [r7, #4]
 913 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 914              		.loc 1 691 0
 915 000a 7B68     		ldr	r3, [r7, #4]
 916 000c 012B     		cmp	r3, #1
 917 000e 02D9     		bls	.L63
 918              		.loc 1 691 0 is_stmt 0 discriminator 1
 919 0010 0020     		mov	r0, #0
 920 0012 FFF7FEFF 		bl	CyHalt
 921              	.L63:
 692:.\Generated_Source\PSoC4/ADC.c **** 
 693:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 922              		.loc 1 693 0 is_stmt 1
 923 0016 044B     		ldr	r3, .L64
 924 0018 7A68     		ldr	r2, [r7, #4]
 925 001a 9200     		lsl	r2, r2, #2
 926 001c 3968     		ldr	r1, [r7]
 927 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC.c **** }
 928              		.loc 1 694 0
 929 0020 BD46     		mov	sp, r7
 930 0022 02B0     		add	sp, sp, #8
 931              		@ sp needed
 932 0024 80BD     		pop	{r7, pc}
 933              	.L65:
 934 0026 C046     		.align	2
 935              	.L64:
 936 0028 00000000 		.word	ADC_countsPer10Volt
 937              		.cfi_endproc
 938              	.LFE14:
 939              		.size	ADC_SetGain, .-ADC_SetGain
 940              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 941              		.align	2
 942              		.global	ADC_CountsTo_mVolts
 943              		.code	16
 944              		.thumb_func
 945              		.type	ADC_CountsTo_mVolts, %function
 946              	ADC_CountsTo_mVolts:
 947              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 30


 704:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC.c ****     *
 708:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC.c ****     *
 712:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC.c ****     *
 720:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC.c ****     {
 948              		.loc 1 722 0
 949              		.cfi_startproc
 950 0000 80B5     		push	{r7, lr}
 951              		.cfi_def_cfa_offset 8
 952              		.cfi_offset 7, -8
 953              		.cfi_offset 14, -4
 954 0002 84B0     		sub	sp, sp, #16
 955              		.cfi_def_cfa_offset 24
 956 0004 00AF     		add	r7, sp, #0
 957              		.cfi_def_cfa_register 7
 958 0006 7860     		str	r0, [r7, #4]
 959 0008 0A1C     		mov	r2, r1
 960 000a BB1C     		add	r3, r7, #2
 961 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC.c **** 
 725:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 962              		.loc 1 726 0
 963 000e 7B68     		ldr	r3, [r7, #4]
 964 0010 012B     		cmp	r3, #1
 965 0012 02D9     		bls	.L67
 966              		.loc 1 726 0 is_stmt 0 discriminator 1
 967 0014 0020     		mov	r0, #0
 968 0016 FFF7FEFF 		bl	CyHalt
 969              	.L67:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC.c ****             {
 732:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC.c ****             }
 734:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 970              		.loc 1 737 0 is_stmt 1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 31


 971 001a BB1C     		add	r3, r7, #2
 972 001c 1A88     		ldrh	r2, [r3]
 973 001e 1E4B     		ldr	r3, .L73
 974 0020 7968     		ldr	r1, [r7, #4]
 975 0022 4900     		lsl	r1, r1, #1
 976 0024 CB5A     		ldrh	r3, [r1, r3]
 977 0026 9BB2     		uxth	r3, r3
 978 0028 9BB2     		uxth	r3, r3
 979 002a D31A     		sub	r3, r2, r3
 980 002c 9AB2     		uxth	r2, r3
 981 002e BB1C     		add	r3, r7, #2
 982 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 983              		.loc 1 739 0
 984 0032 BB1C     		add	r3, r7, #2
 985 0034 0021     		mov	r1, #0
 986 0036 5B5E     		ldrsh	r3, [r3, r1]
 987 0038 184A     		ldr	r2, .L73+4
 988 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 989              		.loc 1 740 0
 990 003c BB1C     		add	r3, r7, #2
 991 003e 0021     		mov	r1, #0
 992 0040 5B5E     		ldrsh	r3, [r3, r1]
 993 0042 002B     		cmp	r3, #0
 994 0044 08DD     		ble	.L68
 995              		.loc 1 740 0 is_stmt 0 discriminator 1
 996 0046 164B     		ldr	r3, .L73+8
 997 0048 7968     		ldr	r1, [r7, #4]
 998 004a 8900     		lsl	r1, r1, #2
 999 004c CB58     		ldr	r3, [r1, r3]
 1000 004e 002B     		cmp	r3, #0
 1001 0050 00DA     		bge	.L69
 1002 0052 0133     		add	r3, r3, #1
 1003              	.L69:
 1004 0054 5B10     		asr	r3, r3, #1
 1005 0056 08E0     		b	.L70
 1006              	.L68:
 1007              		.loc 1 740 0 discriminator 2
 1008 0058 114B     		ldr	r3, .L73+8
 1009 005a 7968     		ldr	r1, [r7, #4]
 1010 005c 8900     		lsl	r1, r1, #2
 1011 005e CB58     		ldr	r3, [r1, r3]
 1012 0060 002B     		cmp	r3, #0
 1013 0062 00DA     		bge	.L71
 1014 0064 0133     		add	r3, r3, #1
 1015              	.L71:
 1016 0066 5B10     		asr	r3, r3, #1
 1017 0068 5B42     		neg	r3, r3
 1018              	.L70:
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1019              		.loc 1 739 0 is_stmt 1
 1020 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1021              		.loc 1 741 0
 1022 006c 0C4B     		ldr	r3, .L73+8
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 32


 1023 006e 7968     		ldr	r1, [r7, #4]
 1024 0070 8900     		lsl	r1, r1, #2
 1025 0072 CB58     		ldr	r3, [r1, r3]
 1026 0074 101C     		mov	r0, r2
 1027 0076 191C     		mov	r1, r3
 1028 0078 FFF7FEFF 		bl	__aeabi_idiv
 1029 007c 031C     		mov	r3, r0
 1030 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1031              		.loc 1 739 0
 1032 0080 3B1C     		mov	r3, r7
 1033 0082 0E33     		add	r3, r3, #14
 1034 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC.c **** 
 743:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1035              		.loc 1 743 0
 1036 0086 3B1C     		mov	r3, r7
 1037 0088 0E33     		add	r3, r3, #14
 1038 008a 1B88     		ldrh	r3, [r3]
 1039 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC.c ****     }
 1040              		.loc 1 744 0
 1041 008e 181C     		mov	r0, r3
 1042 0090 BD46     		mov	sp, r7
 1043 0092 04B0     		add	sp, sp, #16
 1044              		@ sp needed
 1045 0094 80BD     		pop	{r7, pc}
 1046              	.L74:
 1047 0096 C046     		.align	2
 1048              	.L73:
 1049 0098 00000000 		.word	ADC_offset
 1050 009c 10270000 		.word	10000
 1051 00a0 00000000 		.word	ADC_countsPer10Volt
 1052              		.cfi_endproc
 1053              	.LFE15:
 1054              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1055              		.global	__aeabi_lmul
 1056              		.global	__aeabi_ldivmod
 1057              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1058              		.align	2
 1059              		.global	ADC_CountsTo_uVolts
 1060              		.code	16
 1061              		.thumb_func
 1062              		.type	ADC_CountsTo_uVolts, %function
 1063              	ADC_CountsTo_uVolts:
 1064              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c **** 
 747:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 33


 756:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC.c ****     *
 759:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC.c ****     *
 767:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC.c ****     *
 774:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC.c ****     {
 1065              		.loc 1 776 0
 1066              		.cfi_startproc
 1067 0000 B0B5     		push	{r4, r5, r7, lr}
 1068              		.cfi_def_cfa_offset 16
 1069              		.cfi_offset 4, -16
 1070              		.cfi_offset 5, -12
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 0002 86B0     		sub	sp, sp, #24
 1074              		.cfi_def_cfa_offset 40
 1075 0004 00AF     		add	r7, sp, #0
 1076              		.cfi_def_cfa_register 7
 1077 0006 F860     		str	r0, [r7, #12]
 1078 0008 0A1C     		mov	r2, r1
 1079 000a 3B1C     		mov	r3, r7
 1080 000c 0A33     		add	r3, r3, #10
 1081 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1082              		.loc 1 780 0
 1083 0010 FB68     		ldr	r3, [r7, #12]
 1084 0012 012B     		cmp	r3, #1
 1085 0014 02D9     		bls	.L76
 1086              		.loc 1 780 0 is_stmt 0 discriminator 1
 1087 0016 0020     		mov	r0, #0
 1088 0018 FFF7FEFF 		bl	CyHalt
 1089              	.L76:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC.c ****             {
 786:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC.c ****             }
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 34


 788:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC.c **** 
 790:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1090              		.loc 1 791 0 is_stmt 1
 1091 001c 3B1C     		mov	r3, r7
 1092 001e 0A33     		add	r3, r3, #10
 1093 0020 1A88     		ldrh	r2, [r3]
 1094 0022 1B4B     		ldr	r3, .L78+8
 1095 0024 F968     		ldr	r1, [r7, #12]
 1096 0026 4900     		lsl	r1, r1, #1
 1097 0028 CB5A     		ldrh	r3, [r1, r3]
 1098 002a 9BB2     		uxth	r3, r3
 1099 002c 9BB2     		uxth	r3, r3
 1100 002e D31A     		sub	r3, r2, r3
 1101 0030 9AB2     		uxth	r2, r3
 1102 0032 3B1C     		mov	r3, r7
 1103 0034 0A33     		add	r3, r3, #10
 1104 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1105              		.loc 1 793 0
 1106 0038 3B1C     		mov	r3, r7
 1107 003a 0A33     		add	r3, r3, #10
 1108 003c 1B88     		ldrh	r3, [r3]
 1109 003e 1BB2     		sxth	r3, r3
 1110 0040 3B60     		str	r3, [r7]
 1111 0042 DB17     		asr	r3, r3, #31
 1112 0044 7B60     		str	r3, [r7, #4]
 1113 0046 3868     		ldr	r0, [r7]
 1114 0048 7968     		ldr	r1, [r7, #4]
 1115 004a 104B     		ldr	r3, .L78+4
 1116 004c 0E4A     		ldr	r2, .L78
 1117 004e FFF7FEFF 		bl	__aeabi_lmul
 1118 0052 021C     		mov	r2, r0
 1119 0054 0B1C     		mov	r3, r1
 1120 0056 0F49     		ldr	r1, .L78+12
 1121 0058 F868     		ldr	r0, [r7, #12]
 1122 005a 8000     		lsl	r0, r0, #2
 1123 005c 4158     		ldr	r1, [r0, r1]
 1124 005e 0C1C     		mov	r4, r1
 1125 0060 C917     		asr	r1, r1, #31
 1126 0062 0D1C     		mov	r5, r1
 1127 0064 101C     		mov	r0, r2
 1128 0066 191C     		mov	r1, r3
 1129 0068 221C     		mov	r2, r4
 1130 006a 2B1C     		mov	r3, r5
 1131 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1132 0070 031C     		mov	r3, r0
 1133 0072 0C1C     		mov	r4, r1
 1134 0074 3B61     		str	r3, [r7, #16]
 1135 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC.c **** 
 795:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1136              		.loc 1 795 0
 1137 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC.c ****     }
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 35


 1138              		.loc 1 796 0
 1139 007a 181C     		mov	r0, r3
 1140 007c BD46     		mov	sp, r7
 1141 007e 06B0     		add	sp, sp, #24
 1142              		@ sp needed
 1143 0080 B0BD     		pop	{r4, r5, r7, pc}
 1144              	.L79:
 1145 0082 C046C046 		.align	3
 1145      C046
 1146              	.L78:
 1147 0088 80969800 		.word	10000000
 1148 008c 00000000 		.word	0
 1149 0090 00000000 		.word	ADC_offset
 1150 0094 00000000 		.word	ADC_countsPer10Volt
 1151              		.cfi_endproc
 1152              	.LFE16:
 1153              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1154              		.global	__aeabi_i2f
 1155              		.global	__aeabi_fmul
 1156              		.global	__aeabi_fdiv
 1157              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1158              		.align	2
 1159              		.global	ADC_CountsTo_Volts
 1160              		.code	16
 1161              		.thumb_func
 1162              		.type	ADC_CountsTo_Volts, %function
 1163              	ADC_CountsTo_Volts:
 1164              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c **** 
 799:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC.c ****     *
 807:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC.c ****     *
 811:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC.c ****     *
 819:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC.c ****     {
 1165              		.loc 1 821 0
 1166              		.cfi_startproc
 1167 0000 90B5     		push	{r4, r7, lr}
 1168              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 36


 1169              		.cfi_offset 4, -12
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 85B0     		sub	sp, sp, #20
 1173              		.cfi_def_cfa_offset 32
 1174 0004 00AF     		add	r7, sp, #0
 1175              		.cfi_def_cfa_register 7
 1176 0006 7860     		str	r0, [r7, #4]
 1177 0008 0A1C     		mov	r2, r1
 1178 000a BB1C     		add	r3, r7, #2
 1179 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC.c **** 
 824:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1180              		.loc 1 825 0
 1181 000e 7B68     		ldr	r3, [r7, #4]
 1182 0010 012B     		cmp	r3, #1
 1183 0012 02D9     		bls	.L81
 1184              		.loc 1 825 0 is_stmt 0 discriminator 1
 1185 0014 0020     		mov	r0, #0
 1186 0016 FFF7FEFF 		bl	CyHalt
 1187              	.L81:
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC.c ****             {
 831:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC.c ****             }
 833:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1188              		.loc 1 836 0 is_stmt 1
 1189 001a BB1C     		add	r3, r7, #2
 1190 001c 1A88     		ldrh	r2, [r3]
 1191 001e 154B     		ldr	r3, .L83
 1192 0020 7968     		ldr	r1, [r7, #4]
 1193 0022 4900     		lsl	r1, r1, #1
 1194 0024 CB5A     		ldrh	r3, [r1, r3]
 1195 0026 9BB2     		uxth	r3, r3
 1196 0028 9BB2     		uxth	r3, r3
 1197 002a D31A     		sub	r3, r2, r3
 1198 002c 9AB2     		uxth	r2, r3
 1199 002e BB1C     		add	r3, r7, #2
 1200 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1201              		.loc 1 838 0
 1202 0032 BB1C     		add	r3, r7, #2
 1203 0034 0022     		mov	r2, #0
 1204 0036 9B5E     		ldrsh	r3, [r3, r2]
 1205 0038 181C     		mov	r0, r3
 1206 003a FFF7FEFF 		bl	__aeabi_i2f
 1207 003e 031C     		add	r3, r0, #0
 1208 0040 181C     		add	r0, r3, #0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 37


 1209 0042 0D49     		ldr	r1, .L83+4
 1210 0044 FFF7FEFF 		bl	__aeabi_fmul
 1211 0048 031C     		add	r3, r0, #0
 1212 004a 1C1C     		add	r4, r3, #0
 1213 004c 0B4B     		ldr	r3, .L83+8
 1214 004e 7A68     		ldr	r2, [r7, #4]
 1215 0050 9200     		lsl	r2, r2, #2
 1216 0052 D358     		ldr	r3, [r2, r3]
 1217 0054 181C     		mov	r0, r3
 1218 0056 FFF7FEFF 		bl	__aeabi_i2f
 1219 005a 031C     		add	r3, r0, #0
 1220 005c 201C     		add	r0, r4, #0
 1221 005e 191C     		add	r1, r3, #0
 1222 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1223 0064 031C     		add	r3, r0, #0
 1224 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC.c **** 
 840:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1225              		.loc 1 840 0
 1226 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC.c ****     }
 1227              		.loc 1 841 0
 1228 006a 181C     		add	r0, r3, #0
 1229 006c BD46     		mov	sp, r7
 1230 006e 05B0     		add	sp, sp, #20
 1231              		@ sp needed
 1232 0070 90BD     		pop	{r4, r7, pc}
 1233              	.L84:
 1234 0072 C046     		.align	2
 1235              	.L83:
 1236 0074 00000000 		.word	ADC_offset
 1237 0078 00002041 		.word	1092616192
 1238 007c 00000000 		.word	ADC_countsPer10Volt
 1239              		.cfi_endproc
 1240              	.LFE17:
 1241              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1242              		.section	.rodata
 1243              		.align	2
 1244              		.type	ADC_InputsPlacement.4717, %object
 1245              		.size	ADC_InputsPlacement.4717, 2
 1246              	ADC_InputsPlacement.4717:
 1247 0008 13       		.byte	19
 1248 0009 00       		.byte	0
 1249 000a 0000     		.text
 1250              	.Letext0:
 1251              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1252              		.section	.debug_info,"",%progbits
 1253              	.Ldebug_info0:
 1254 0000 96040000 		.4byte	0x496
 1255 0004 0400     		.2byte	0x4
 1256 0006 00000000 		.4byte	.Ldebug_abbrev0
 1257 000a 04       		.byte	0x4
 1258 000b 01       		.uleb128 0x1
 1259 000c EA010000 		.4byte	.LASF60
 1260 0010 01       		.byte	0x1
 1261 0011 D0020000 		.4byte	.LASF61
 1262 0015 66020000 		.4byte	.LASF62
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 38


 1263 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1264 001d 00000000 		.4byte	0
 1265 0021 00000000 		.4byte	.Ldebug_line0
 1266 0025 02       		.uleb128 0x2
 1267 0026 01       		.byte	0x1
 1268 0027 06       		.byte	0x6
 1269 0028 7C000000 		.4byte	.LASF0
 1270 002c 02       		.uleb128 0x2
 1271 002d 01       		.byte	0x1
 1272 002e 08       		.byte	0x8
 1273 002f EF020000 		.4byte	.LASF1
 1274 0033 02       		.uleb128 0x2
 1275 0034 02       		.byte	0x2
 1276 0035 05       		.byte	0x5
 1277 0036 08030000 		.4byte	.LASF2
 1278 003a 02       		.uleb128 0x2
 1279 003b 02       		.byte	0x2
 1280 003c 07       		.byte	0x7
 1281 003d 53010000 		.4byte	.LASF3
 1282 0041 02       		.uleb128 0x2
 1283 0042 04       		.byte	0x4
 1284 0043 05       		.byte	0x5
 1285 0044 9F000000 		.4byte	.LASF4
 1286 0048 02       		.uleb128 0x2
 1287 0049 04       		.byte	0x4
 1288 004a 07       		.byte	0x7
 1289 004b 22010000 		.4byte	.LASF5
 1290 004f 02       		.uleb128 0x2
 1291 0050 08       		.byte	0x8
 1292 0051 05       		.byte	0x5
 1293 0052 6E000000 		.4byte	.LASF6
 1294 0056 02       		.uleb128 0x2
 1295 0057 08       		.byte	0x8
 1296 0058 07       		.byte	0x7
 1297 0059 32000000 		.4byte	.LASF7
 1298 005d 03       		.uleb128 0x3
 1299 005e 04       		.byte	0x4
 1300 005f 05       		.byte	0x5
 1301 0060 696E7400 		.ascii	"int\000"
 1302 0064 02       		.uleb128 0x2
 1303 0065 04       		.byte	0x4
 1304 0066 07       		.byte	0x7
 1305 0067 0E010000 		.4byte	.LASF8
 1306 006b 04       		.uleb128 0x4
 1307 006c D0000000 		.4byte	.LASF9
 1308 0070 02       		.byte	0x2
 1309 0071 A1       		.byte	0xa1
 1310 0072 2C000000 		.4byte	0x2c
 1311 0076 04       		.uleb128 0x4
 1312 0077 00000000 		.4byte	.LASF10
 1313 007b 02       		.byte	0x2
 1314 007c A2       		.byte	0xa2
 1315 007d 3A000000 		.4byte	0x3a
 1316 0081 04       		.uleb128 0x4
 1317 0082 DD000000 		.4byte	.LASF11
 1318 0086 02       		.byte	0x2
 1319 0087 A3       		.byte	0xa3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 39


 1320 0088 48000000 		.4byte	0x48
 1321 008c 04       		.uleb128 0x4
 1322 008d 64030000 		.4byte	.LASF12
 1323 0091 02       		.byte	0x2
 1324 0092 A5       		.byte	0xa5
 1325 0093 33000000 		.4byte	0x33
 1326 0097 04       		.uleb128 0x4
 1327 0098 8F000000 		.4byte	.LASF13
 1328 009c 02       		.byte	0x2
 1329 009d A6       		.byte	0xa6
 1330 009e 41000000 		.4byte	0x41
 1331 00a2 04       		.uleb128 0x4
 1332 00a3 83010000 		.4byte	.LASF14
 1333 00a7 02       		.byte	0x2
 1334 00a8 A7       		.byte	0xa7
 1335 00a9 AD000000 		.4byte	0xad
 1336 00ad 02       		.uleb128 0x2
 1337 00ae 04       		.byte	0x4
 1338 00af 04       		.byte	0x4
 1339 00b0 E4010000 		.4byte	.LASF15
 1340 00b4 02       		.uleb128 0x2
 1341 00b5 08       		.byte	0x8
 1342 00b6 04       		.byte	0x4
 1343 00b7 D6000000 		.4byte	.LASF16
 1344 00bb 04       		.uleb128 0x4
 1345 00bc C2010000 		.4byte	.LASF17
 1346 00c0 02       		.byte	0x2
 1347 00c1 AC       		.byte	0xac
 1348 00c2 4F000000 		.4byte	0x4f
 1349 00c6 02       		.uleb128 0x2
 1350 00c7 01       		.byte	0x1
 1351 00c8 08       		.byte	0x8
 1352 00c9 26030000 		.4byte	.LASF18
 1353 00cd 05       		.uleb128 0x5
 1354 00ce 7D010000 		.4byte	.LASF19
 1355 00d2 02       		.byte	0x2
 1356 00d3 4D01     		.2byte	0x14d
 1357 00d5 D9000000 		.4byte	0xd9
 1358 00d9 06       		.uleb128 0x6
 1359 00da 81000000 		.4byte	0x81
 1360 00de 02       		.uleb128 0x2
 1361 00df 04       		.byte	0x4
 1362 00e0 07       		.byte	0x7
 1363 00e1 8B010000 		.4byte	.LASF20
 1364 00e5 07       		.uleb128 0x7
 1365 00e6 95000000 		.4byte	.LASF25
 1366 00ea 01       		.byte	0x1
 1367 00eb 3F       		.byte	0x3f
 1368 00ec 00000000 		.4byte	.LFB0
 1369 00f0 24000000 		.4byte	.LFE0-.LFB0
 1370 00f4 01       		.uleb128 0x1
 1371 00f5 9C       		.byte	0x9c
 1372 00f6 08       		.uleb128 0x8
 1373 00f7 29000000 		.4byte	.LASF36
 1374 00fb 01       		.byte	0x1
 1375 00fc 5E       		.byte	0x5e
 1376 00fd 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 40


 1377 0101 F4010000 		.4byte	.LFE1-.LFB1
 1378 0105 01       		.uleb128 0x1
 1379 0106 9C       		.byte	0x9c
 1380 0107 47010000 		.4byte	0x147
 1381 010b 09       		.uleb128 0x9
 1382 010c 1B030000 		.4byte	.LASF21
 1383 0110 01       		.byte	0x1
 1384 0111 60       		.byte	0x60
 1385 0112 81000000 		.4byte	0x81
 1386 0116 02       		.uleb128 0x2
 1387 0117 91       		.byte	0x91
 1388 0118 6C       		.sleb128 -20
 1389 0119 09       		.uleb128 0x9
 1390 011a 49010000 		.4byte	.LASF22
 1391 011e 01       		.byte	0x1
 1392 011f 61       		.byte	0x61
 1393 0120 81000000 		.4byte	0x81
 1394 0124 02       		.uleb128 0x2
 1395 0125 91       		.byte	0x91
 1396 0126 64       		.sleb128 -28
 1397 0127 09       		.uleb128 0x9
 1398 0128 0F000000 		.4byte	.LASF23
 1399 012c 01       		.byte	0x1
 1400 012d 62       		.byte	0x62
 1401 012e 97000000 		.4byte	0x97
 1402 0132 02       		.uleb128 0x2
 1403 0133 91       		.byte	0x91
 1404 0134 68       		.sleb128 -24
 1405 0135 09       		.uleb128 0x9
 1406 0136 49000000 		.4byte	.LASF24
 1407 013a 01       		.byte	0x1
 1408 013b 65       		.byte	0x65
 1409 013c 57010000 		.4byte	0x157
 1410 0140 05       		.uleb128 0x5
 1411 0141 03       		.byte	0x3
 1412 0142 08000000 		.4byte	ADC_InputsPlacement.4717
 1413 0146 00       		.byte	0
 1414 0147 0A       		.uleb128 0xa
 1415 0148 6B000000 		.4byte	0x6b
 1416 014c 57010000 		.4byte	0x157
 1417 0150 0B       		.uleb128 0xb
 1418 0151 DE000000 		.4byte	0xde
 1419 0155 01       		.byte	0x1
 1420 0156 00       		.byte	0
 1421 0157 0C       		.uleb128 0xc
 1422 0158 47010000 		.4byte	0x147
 1423 015c 0D       		.uleb128 0xd
 1424 015d 4F030000 		.4byte	.LASF26
 1425 0161 01       		.byte	0x1
 1426 0162 2701     		.2byte	0x127
 1427 0164 00000000 		.4byte	.LFB2
 1428 0168 28000000 		.4byte	.LFE2-.LFB2
 1429 016c 01       		.uleb128 0x1
 1430 016d 9C       		.byte	0x9c
 1431 016e 0E       		.uleb128 0xe
 1432 016f 12030000 		.4byte	.LASF27
 1433 0173 01       		.byte	0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 41


 1434 0174 4A01     		.2byte	0x14a
 1435 0176 00000000 		.4byte	.LFB3
 1436 017a 18000000 		.4byte	.LFE3-.LFB3
 1437 017e 01       		.uleb128 0x1
 1438 017f 9C       		.byte	0x9c
 1439 0180 0E       		.uleb128 0xe
 1440 0181 5D000000 		.4byte	.LASF28
 1441 0185 01       		.byte	0x1
 1442 0186 6401     		.2byte	0x164
 1443 0188 00000000 		.4byte	.LFB4
 1444 018c 1C000000 		.4byte	.LFE4-.LFB4
 1445 0190 01       		.uleb128 0x1
 1446 0191 9C       		.byte	0x9c
 1447 0192 0E       		.uleb128 0xe
 1448 0193 66010000 		.4byte	.LASF29
 1449 0197 01       		.byte	0x1
 1450 0198 7D01     		.2byte	0x17d
 1451 019a 00000000 		.4byte	.LFB5
 1452 019e 1C000000 		.4byte	.LFE5-.LFB5
 1453 01a2 01       		.uleb128 0x1
 1454 01a3 9C       		.byte	0x9c
 1455 01a4 0F       		.uleb128 0xf
 1456 01a5 AE010000 		.4byte	.LASF31
 1457 01a9 01       		.byte	0x1
 1458 01aa 9F01     		.2byte	0x19f
 1459 01ac 81000000 		.4byte	0x81
 1460 01b0 00000000 		.4byte	.LFB6
 1461 01b4 48000000 		.4byte	.LFE6-.LFB6
 1462 01b8 01       		.uleb128 0x1
 1463 01b9 9C       		.byte	0x9c
 1464 01ba DD010000 		.4byte	0x1dd
 1465 01be 10       		.uleb128 0x10
 1466 01bf F5000000 		.4byte	.LASF33
 1467 01c3 01       		.byte	0x1
 1468 01c4 9F01     		.2byte	0x19f
 1469 01c6 81000000 		.4byte	0x81
 1470 01ca 02       		.uleb128 0x2
 1471 01cb 91       		.byte	0x91
 1472 01cc 6C       		.sleb128 -20
 1473 01cd 11       		.uleb128 0x11
 1474 01ce 88000000 		.4byte	.LASF30
 1475 01d2 01       		.byte	0x1
 1476 01d3 A101     		.2byte	0x1a1
 1477 01d5 81000000 		.4byte	0x81
 1478 01d9 02       		.uleb128 0x2
 1479 01da 91       		.byte	0x91
 1480 01db 74       		.sleb128 -12
 1481 01dc 00       		.byte	0
 1482 01dd 12       		.uleb128 0x12
 1483 01de 7F030000 		.4byte	.LASF32
 1484 01e2 01       		.byte	0x1
 1485 01e3 D501     		.2byte	0x1d5
 1486 01e5 8C000000 		.4byte	0x8c
 1487 01e9 00000000 		.4byte	.LFB7
 1488 01ed 44000000 		.4byte	.LFE7-.LFB7
 1489 01f1 01       		.uleb128 0x1
 1490 01f2 9C       		.byte	0x9c
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 42


 1491 01f3 16020000 		.4byte	0x216
 1492 01f7 10       		.uleb128 0x10
 1493 01f8 21030000 		.4byte	.LASF34
 1494 01fc 01       		.byte	0x1
 1495 01fd D501     		.2byte	0x1d5
 1496 01ff 81000000 		.4byte	0x81
 1497 0203 02       		.uleb128 0x2
 1498 0204 91       		.byte	0x91
 1499 0205 6C       		.sleb128 -20
 1500 0206 11       		.uleb128 0x11
 1501 0207 78030000 		.4byte	.LASF35
 1502 020b 01       		.byte	0x1
 1503 020c D701     		.2byte	0x1d7
 1504 020e 81000000 		.4byte	0x81
 1505 0212 02       		.uleb128 0x2
 1506 0213 91       		.byte	0x91
 1507 0214 74       		.sleb128 -12
 1508 0215 00       		.byte	0
 1509 0216 13       		.uleb128 0x13
 1510 0217 C8010000 		.4byte	.LASF37
 1511 021b 01       		.byte	0x1
 1512 021c 0202     		.2byte	0x202
 1513 021e 00000000 		.4byte	.LFB8
 1514 0222 1C000000 		.4byte	.LFE8-.LFB8
 1515 0226 01       		.uleb128 0x1
 1516 0227 9C       		.byte	0x9c
 1517 0228 3C020000 		.4byte	0x23c
 1518 022c 10       		.uleb128 0x10
 1519 022d E4000000 		.4byte	.LASF38
 1520 0231 01       		.byte	0x1
 1521 0232 0202     		.2byte	0x202
 1522 0234 81000000 		.4byte	0x81
 1523 0238 02       		.uleb128 0x2
 1524 0239 91       		.byte	0x91
 1525 023a 74       		.sleb128 -12
 1526 023b 00       		.byte	0
 1527 023c 13       		.uleb128 0x13
 1528 023d C0020000 		.4byte	.LASF39
 1529 0241 01       		.byte	0x1
 1530 0242 2E02     		.2byte	0x22e
 1531 0244 00000000 		.4byte	.LFB9
 1532 0248 30000000 		.4byte	.LFE9-.LFB9
 1533 024c 01       		.uleb128 0x1
 1534 024d 9C       		.byte	0x9c
 1535 024e 62020000 		.4byte	0x262
 1536 0252 10       		.uleb128 0x10
 1537 0253 94010000 		.4byte	.LASF40
 1538 0257 01       		.byte	0x1
 1539 0258 2E02     		.2byte	0x22e
 1540 025a 81000000 		.4byte	0x81
 1541 025e 02       		.uleb128 0x2
 1542 025f 91       		.byte	0x91
 1543 0260 74       		.sleb128 -12
 1544 0261 00       		.byte	0
 1545 0262 13       		.uleb128 0x13
 1546 0263 9D010000 		.4byte	.LASF41
 1547 0267 01       		.byte	0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 43


 1548 0268 4302     		.2byte	0x243
 1549 026a 00000000 		.4byte	.LFB10
 1550 026e 2C000000 		.4byte	.LFE10-.LFB10
 1551 0272 01       		.uleb128 0x1
 1552 0273 9C       		.byte	0x9c
 1553 0274 88020000 		.4byte	0x288
 1554 0278 10       		.uleb128 0x10
 1555 0279 5A030000 		.4byte	.LASF42
 1556 027d 01       		.byte	0x1
 1557 027e 4302     		.2byte	0x243
 1558 0280 81000000 		.4byte	0x81
 1559 0284 02       		.uleb128 0x2
 1560 0285 91       		.byte	0x91
 1561 0286 74       		.sleb128 -12
 1562 0287 00       		.byte	0
 1563 0288 13       		.uleb128 0x13
 1564 0289 FD000000 		.4byte	.LASF43
 1565 028d 01       		.byte	0x1
 1566 028e 5B02     		.2byte	0x25b
 1567 0290 00000000 		.4byte	.LFB11
 1568 0294 1C000000 		.4byte	.LFE11-.LFB11
 1569 0298 01       		.uleb128 0x1
 1570 0299 9C       		.byte	0x9c
 1571 029a AE020000 		.4byte	0x2ae
 1572 029e 10       		.uleb128 0x10
 1573 029f E4000000 		.4byte	.LASF38
 1574 02a3 01       		.byte	0x1
 1575 02a4 5B02     		.2byte	0x25b
 1576 02a6 81000000 		.4byte	0x81
 1577 02aa 02       		.uleb128 0x2
 1578 02ab 91       		.byte	0x91
 1579 02ac 74       		.sleb128 -12
 1580 02ad 00       		.byte	0
 1581 02ae 13       		.uleb128 0x13
 1582 02af 34010000 		.4byte	.LASF44
 1583 02b3 01       		.byte	0x1
 1584 02b4 7202     		.2byte	0x272
 1585 02b6 00000000 		.4byte	.LFB12
 1586 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1587 02be 01       		.uleb128 0x1
 1588 02bf 9C       		.byte	0x9c
 1589 02c0 D4020000 		.4byte	0x2d4
 1590 02c4 10       		.uleb128 0x10
 1591 02c5 E4000000 		.4byte	.LASF38
 1592 02c9 01       		.byte	0x1
 1593 02ca 7202     		.2byte	0x272
 1594 02cc 81000000 		.4byte	0x81
 1595 02d0 02       		.uleb128 0x2
 1596 02d1 91       		.byte	0x91
 1597 02d2 74       		.sleb128 -12
 1598 02d3 00       		.byte	0
 1599 02d4 14       		.uleb128 0x14
 1600 02d5 6A030000 		.4byte	.LASF45
 1601 02d9 01       		.byte	0x1
 1602 02da 8E02     		.2byte	0x28e
 1603 02dc 00000000 		.4byte	.LFB13
 1604 02e0 30000000 		.4byte	.LFE13-.LFB13
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 44


 1605 02e4 01       		.uleb128 0x1
 1606 02e5 9C       		.byte	0x9c
 1607 02e6 09030000 		.4byte	0x309
 1608 02ea 10       		.uleb128 0x10
 1609 02eb 21030000 		.4byte	.LASF34
 1610 02ef 01       		.byte	0x1
 1611 02f0 8E02     		.2byte	0x28e
 1612 02f2 81000000 		.4byte	0x81
 1613 02f6 02       		.uleb128 0x2
 1614 02f7 91       		.byte	0x91
 1615 02f8 74       		.sleb128 -12
 1616 02f9 10       		.uleb128 0x10
 1617 02fa 3E030000 		.4byte	.LASF46
 1618 02fe 01       		.byte	0x1
 1619 02ff 8E02     		.2byte	0x28e
 1620 0301 8C000000 		.4byte	0x8c
 1621 0305 02       		.uleb128 0x2
 1622 0306 91       		.byte	0x91
 1623 0307 72       		.sleb128 -14
 1624 0308 00       		.byte	0
 1625 0309 14       		.uleb128 0x14
 1626 030a D8010000 		.4byte	.LASF47
 1627 030e 01       		.byte	0x1
 1628 030f B002     		.2byte	0x2b0
 1629 0311 00000000 		.4byte	.LFB14
 1630 0315 2C000000 		.4byte	.LFE14-.LFB14
 1631 0319 01       		.uleb128 0x1
 1632 031a 9C       		.byte	0x9c
 1633 031b 3E030000 		.4byte	0x33e
 1634 031f 10       		.uleb128 0x10
 1635 0320 21030000 		.4byte	.LASF34
 1636 0324 01       		.byte	0x1
 1637 0325 B002     		.2byte	0x2b0
 1638 0327 81000000 		.4byte	0x81
 1639 032b 02       		.uleb128 0x2
 1640 032c 91       		.byte	0x91
 1641 032d 74       		.sleb128 -12
 1642 032e 10       		.uleb128 0x10
 1643 032f 07000000 		.4byte	.LASF48
 1644 0333 01       		.byte	0x1
 1645 0334 B002     		.2byte	0x2b0
 1646 0336 97000000 		.4byte	0x97
 1647 033a 02       		.uleb128 0x2
 1648 033b 91       		.byte	0x91
 1649 033c 70       		.sleb128 -16
 1650 033d 00       		.byte	0
 1651 033e 12       		.uleb128 0x12
 1652 033f AC020000 		.4byte	.LASF49
 1653 0343 01       		.byte	0x1
 1654 0344 D102     		.2byte	0x2d1
 1655 0346 8C000000 		.4byte	0x8c
 1656 034a 00000000 		.4byte	.LFB15
 1657 034e A4000000 		.4byte	.LFE15-.LFB15
 1658 0352 01       		.uleb128 0x1
 1659 0353 9C       		.byte	0x9c
 1660 0354 86030000 		.4byte	0x386
 1661 0358 10       		.uleb128 0x10
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 45


 1662 0359 21030000 		.4byte	.LASF34
 1663 035d 01       		.byte	0x1
 1664 035e D102     		.2byte	0x2d1
 1665 0360 81000000 		.4byte	0x81
 1666 0364 02       		.uleb128 0x2
 1667 0365 91       		.byte	0x91
 1668 0366 6C       		.sleb128 -20
 1669 0367 10       		.uleb128 0x10
 1670 0368 45030000 		.4byte	.LASF50
 1671 036c 01       		.byte	0x1
 1672 036d D102     		.2byte	0x2d1
 1673 036f 8C000000 		.4byte	0x8c
 1674 0373 02       		.uleb128 0x2
 1675 0374 91       		.byte	0x91
 1676 0375 6A       		.sleb128 -22
 1677 0376 11       		.uleb128 0x11
 1678 0377 76010000 		.4byte	.LASF51
 1679 037b 01       		.byte	0x1
 1680 037c D302     		.2byte	0x2d3
 1681 037e 8C000000 		.4byte	0x8c
 1682 0382 02       		.uleb128 0x2
 1683 0383 91       		.byte	0x91
 1684 0384 76       		.sleb128 -10
 1685 0385 00       		.byte	0
 1686 0386 12       		.uleb128 0x12
 1687 0387 A8000000 		.4byte	.LASF52
 1688 038b 01       		.byte	0x1
 1689 038c 0703     		.2byte	0x307
 1690 038e 97000000 		.4byte	0x97
 1691 0392 00000000 		.4byte	.LFB16
 1692 0396 98000000 		.4byte	.LFE16-.LFB16
 1693 039a 01       		.uleb128 0x1
 1694 039b 9C       		.byte	0x9c
 1695 039c CE030000 		.4byte	0x3ce
 1696 03a0 10       		.uleb128 0x10
 1697 03a1 21030000 		.4byte	.LASF34
 1698 03a5 01       		.byte	0x1
 1699 03a6 0703     		.2byte	0x307
 1700 03a8 81000000 		.4byte	0x81
 1701 03ac 02       		.uleb128 0x2
 1702 03ad 91       		.byte	0x91
 1703 03ae 64       		.sleb128 -28
 1704 03af 10       		.uleb128 0x10
 1705 03b0 45030000 		.4byte	.LASF50
 1706 03b4 01       		.byte	0x1
 1707 03b5 0703     		.2byte	0x307
 1708 03b7 8C000000 		.4byte	0x8c
 1709 03bb 02       		.uleb128 0x2
 1710 03bc 91       		.byte	0x91
 1711 03bd 62       		.sleb128 -30
 1712 03be 11       		.uleb128 0x11
 1713 03bf 1B010000 		.4byte	.LASF53
 1714 03c3 01       		.byte	0x1
 1715 03c4 0903     		.2byte	0x309
 1716 03c6 BB000000 		.4byte	0xbb
 1717 03ca 02       		.uleb128 0x2
 1718 03cb 91       		.byte	0x91
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 46


 1719 03cc 68       		.sleb128 -24
 1720 03cd 00       		.byte	0
 1721 03ce 12       		.uleb128 0x12
 1722 03cf 16000000 		.4byte	.LASF54
 1723 03d3 01       		.byte	0x1
 1724 03d4 3403     		.2byte	0x334
 1725 03d6 A2000000 		.4byte	0xa2
 1726 03da 00000000 		.4byte	.LFB17
 1727 03de 80000000 		.4byte	.LFE17-.LFB17
 1728 03e2 01       		.uleb128 0x1
 1729 03e3 9C       		.byte	0x9c
 1730 03e4 16040000 		.4byte	0x416
 1731 03e8 10       		.uleb128 0x10
 1732 03e9 21030000 		.4byte	.LASF34
 1733 03ed 01       		.byte	0x1
 1734 03ee 3403     		.2byte	0x334
 1735 03f0 81000000 		.4byte	0x81
 1736 03f4 02       		.uleb128 0x2
 1737 03f5 91       		.byte	0x91
 1738 03f6 64       		.sleb128 -28
 1739 03f7 10       		.uleb128 0x10
 1740 03f8 45030000 		.4byte	.LASF50
 1741 03fc 01       		.byte	0x1
 1742 03fd 3403     		.2byte	0x334
 1743 03ff 8C000000 		.4byte	0x8c
 1744 0403 02       		.uleb128 0x2
 1745 0404 91       		.byte	0x91
 1746 0405 62       		.sleb128 -30
 1747 0406 11       		.uleb128 0x11
 1748 0407 43010000 		.4byte	.LASF55
 1749 040b 01       		.byte	0x1
 1750 040c 3603     		.2byte	0x336
 1751 040e A2000000 		.4byte	0xa2
 1752 0412 02       		.uleb128 0x2
 1753 0413 91       		.byte	0x91
 1754 0414 6C       		.sleb128 -20
 1755 0415 00       		.byte	0
 1756 0416 0A       		.uleb128 0xa
 1757 0417 81000000 		.4byte	0x81
 1758 041b 26040000 		.4byte	0x426
 1759 041f 0B       		.uleb128 0xb
 1760 0420 DE000000 		.4byte	0xde
 1761 0424 01       		.byte	0x1
 1762 0425 00       		.byte	0
 1763 0426 09       		.uleb128 0x9
 1764 0427 2B030000 		.4byte	.LASF56
 1765 042b 01       		.byte	0x1
 1766 042c 21       		.byte	0x21
 1767 042d 37040000 		.4byte	0x437
 1768 0431 05       		.uleb128 0x5
 1769 0432 03       		.byte	0x3
 1770 0433 00000000 		.4byte	ADC_channelsConfig
 1771 0437 0C       		.uleb128 0xc
 1772 0438 16040000 		.4byte	0x416
 1773 043c 15       		.uleb128 0x15
 1774 043d E9000000 		.4byte	.LASF57
 1775 0441 01       		.byte	0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 47


 1776 0442 18       		.byte	0x18
 1777 0443 6B000000 		.4byte	0x6b
 1778 0447 05       		.uleb128 0x5
 1779 0448 03       		.byte	0x3
 1780 0449 00000000 		.4byte	ADC_initVar
 1781 044d 0A       		.uleb128 0xa
 1782 044e 8C000000 		.4byte	0x8c
 1783 0452 5D040000 		.4byte	0x45d
 1784 0456 0B       		.uleb128 0xb
 1785 0457 DE000000 		.4byte	0xde
 1786 045b 01       		.byte	0x1
 1787 045c 00       		.byte	0
 1788 045d 15       		.uleb128 0x15
 1789 045e FD020000 		.4byte	.LASF58
 1790 0462 01       		.byte	0x1
 1791 0463 19       		.byte	0x19
 1792 0464 6E040000 		.4byte	0x46e
 1793 0468 05       		.uleb128 0x5
 1794 0469 03       		.byte	0x3
 1795 046a 00000000 		.4byte	ADC_offset
 1796 046e 06       		.uleb128 0x6
 1797 046f 4D040000 		.4byte	0x44d
 1798 0473 0A       		.uleb128 0xa
 1799 0474 97000000 		.4byte	0x97
 1800 0478 83040000 		.4byte	0x483
 1801 047c 0B       		.uleb128 0xb
 1802 047d DE000000 		.4byte	0xde
 1803 0481 01       		.byte	0x1
 1804 0482 00       		.byte	0
 1805 0483 15       		.uleb128 0x15
 1806 0484 BC000000 		.4byte	.LASF59
 1807 0488 01       		.byte	0x1
 1808 0489 1A       		.byte	0x1a
 1809 048a 94040000 		.4byte	0x494
 1810 048e 05       		.uleb128 0x5
 1811 048f 03       		.byte	0x3
 1812 0490 00000000 		.4byte	ADC_countsPer10Volt
 1813 0494 06       		.uleb128 0x6
 1814 0495 73040000 		.4byte	0x473
 1815 0499 00       		.byte	0
 1816              		.section	.debug_abbrev,"",%progbits
 1817              	.Ldebug_abbrev0:
 1818 0000 01       		.uleb128 0x1
 1819 0001 11       		.uleb128 0x11
 1820 0002 01       		.byte	0x1
 1821 0003 25       		.uleb128 0x25
 1822 0004 0E       		.uleb128 0xe
 1823 0005 13       		.uleb128 0x13
 1824 0006 0B       		.uleb128 0xb
 1825 0007 03       		.uleb128 0x3
 1826 0008 0E       		.uleb128 0xe
 1827 0009 1B       		.uleb128 0x1b
 1828 000a 0E       		.uleb128 0xe
 1829 000b 55       		.uleb128 0x55
 1830 000c 17       		.uleb128 0x17
 1831 000d 11       		.uleb128 0x11
 1832 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 48


 1833 000f 10       		.uleb128 0x10
 1834 0010 17       		.uleb128 0x17
 1835 0011 00       		.byte	0
 1836 0012 00       		.byte	0
 1837 0013 02       		.uleb128 0x2
 1838 0014 24       		.uleb128 0x24
 1839 0015 00       		.byte	0
 1840 0016 0B       		.uleb128 0xb
 1841 0017 0B       		.uleb128 0xb
 1842 0018 3E       		.uleb128 0x3e
 1843 0019 0B       		.uleb128 0xb
 1844 001a 03       		.uleb128 0x3
 1845 001b 0E       		.uleb128 0xe
 1846 001c 00       		.byte	0
 1847 001d 00       		.byte	0
 1848 001e 03       		.uleb128 0x3
 1849 001f 24       		.uleb128 0x24
 1850 0020 00       		.byte	0
 1851 0021 0B       		.uleb128 0xb
 1852 0022 0B       		.uleb128 0xb
 1853 0023 3E       		.uleb128 0x3e
 1854 0024 0B       		.uleb128 0xb
 1855 0025 03       		.uleb128 0x3
 1856 0026 08       		.uleb128 0x8
 1857 0027 00       		.byte	0
 1858 0028 00       		.byte	0
 1859 0029 04       		.uleb128 0x4
 1860 002a 16       		.uleb128 0x16
 1861 002b 00       		.byte	0
 1862 002c 03       		.uleb128 0x3
 1863 002d 0E       		.uleb128 0xe
 1864 002e 3A       		.uleb128 0x3a
 1865 002f 0B       		.uleb128 0xb
 1866 0030 3B       		.uleb128 0x3b
 1867 0031 0B       		.uleb128 0xb
 1868 0032 49       		.uleb128 0x49
 1869 0033 13       		.uleb128 0x13
 1870 0034 00       		.byte	0
 1871 0035 00       		.byte	0
 1872 0036 05       		.uleb128 0x5
 1873 0037 16       		.uleb128 0x16
 1874 0038 00       		.byte	0
 1875 0039 03       		.uleb128 0x3
 1876 003a 0E       		.uleb128 0xe
 1877 003b 3A       		.uleb128 0x3a
 1878 003c 0B       		.uleb128 0xb
 1879 003d 3B       		.uleb128 0x3b
 1880 003e 05       		.uleb128 0x5
 1881 003f 49       		.uleb128 0x49
 1882 0040 13       		.uleb128 0x13
 1883 0041 00       		.byte	0
 1884 0042 00       		.byte	0
 1885 0043 06       		.uleb128 0x6
 1886 0044 35       		.uleb128 0x35
 1887 0045 00       		.byte	0
 1888 0046 49       		.uleb128 0x49
 1889 0047 13       		.uleb128 0x13
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 49


 1890 0048 00       		.byte	0
 1891 0049 00       		.byte	0
 1892 004a 07       		.uleb128 0x7
 1893 004b 2E       		.uleb128 0x2e
 1894 004c 00       		.byte	0
 1895 004d 3F       		.uleb128 0x3f
 1896 004e 19       		.uleb128 0x19
 1897 004f 03       		.uleb128 0x3
 1898 0050 0E       		.uleb128 0xe
 1899 0051 3A       		.uleb128 0x3a
 1900 0052 0B       		.uleb128 0xb
 1901 0053 3B       		.uleb128 0x3b
 1902 0054 0B       		.uleb128 0xb
 1903 0055 27       		.uleb128 0x27
 1904 0056 19       		.uleb128 0x19
 1905 0057 11       		.uleb128 0x11
 1906 0058 01       		.uleb128 0x1
 1907 0059 12       		.uleb128 0x12
 1908 005a 06       		.uleb128 0x6
 1909 005b 40       		.uleb128 0x40
 1910 005c 18       		.uleb128 0x18
 1911 005d 9642     		.uleb128 0x2116
 1912 005f 19       		.uleb128 0x19
 1913 0060 00       		.byte	0
 1914 0061 00       		.byte	0
 1915 0062 08       		.uleb128 0x8
 1916 0063 2E       		.uleb128 0x2e
 1917 0064 01       		.byte	0x1
 1918 0065 3F       		.uleb128 0x3f
 1919 0066 19       		.uleb128 0x19
 1920 0067 03       		.uleb128 0x3
 1921 0068 0E       		.uleb128 0xe
 1922 0069 3A       		.uleb128 0x3a
 1923 006a 0B       		.uleb128 0xb
 1924 006b 3B       		.uleb128 0x3b
 1925 006c 0B       		.uleb128 0xb
 1926 006d 27       		.uleb128 0x27
 1927 006e 19       		.uleb128 0x19
 1928 006f 11       		.uleb128 0x11
 1929 0070 01       		.uleb128 0x1
 1930 0071 12       		.uleb128 0x12
 1931 0072 06       		.uleb128 0x6
 1932 0073 40       		.uleb128 0x40
 1933 0074 18       		.uleb128 0x18
 1934 0075 9642     		.uleb128 0x2116
 1935 0077 19       		.uleb128 0x19
 1936 0078 01       		.uleb128 0x1
 1937 0079 13       		.uleb128 0x13
 1938 007a 00       		.byte	0
 1939 007b 00       		.byte	0
 1940 007c 09       		.uleb128 0x9
 1941 007d 34       		.uleb128 0x34
 1942 007e 00       		.byte	0
 1943 007f 03       		.uleb128 0x3
 1944 0080 0E       		.uleb128 0xe
 1945 0081 3A       		.uleb128 0x3a
 1946 0082 0B       		.uleb128 0xb
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 50


 1947 0083 3B       		.uleb128 0x3b
 1948 0084 0B       		.uleb128 0xb
 1949 0085 49       		.uleb128 0x49
 1950 0086 13       		.uleb128 0x13
 1951 0087 02       		.uleb128 0x2
 1952 0088 18       		.uleb128 0x18
 1953 0089 00       		.byte	0
 1954 008a 00       		.byte	0
 1955 008b 0A       		.uleb128 0xa
 1956 008c 01       		.uleb128 0x1
 1957 008d 01       		.byte	0x1
 1958 008e 49       		.uleb128 0x49
 1959 008f 13       		.uleb128 0x13
 1960 0090 01       		.uleb128 0x1
 1961 0091 13       		.uleb128 0x13
 1962 0092 00       		.byte	0
 1963 0093 00       		.byte	0
 1964 0094 0B       		.uleb128 0xb
 1965 0095 21       		.uleb128 0x21
 1966 0096 00       		.byte	0
 1967 0097 49       		.uleb128 0x49
 1968 0098 13       		.uleb128 0x13
 1969 0099 2F       		.uleb128 0x2f
 1970 009a 0B       		.uleb128 0xb
 1971 009b 00       		.byte	0
 1972 009c 00       		.byte	0
 1973 009d 0C       		.uleb128 0xc
 1974 009e 26       		.uleb128 0x26
 1975 009f 00       		.byte	0
 1976 00a0 49       		.uleb128 0x49
 1977 00a1 13       		.uleb128 0x13
 1978 00a2 00       		.byte	0
 1979 00a3 00       		.byte	0
 1980 00a4 0D       		.uleb128 0xd
 1981 00a5 2E       		.uleb128 0x2e
 1982 00a6 00       		.byte	0
 1983 00a7 3F       		.uleb128 0x3f
 1984 00a8 19       		.uleb128 0x19
 1985 00a9 03       		.uleb128 0x3
 1986 00aa 0E       		.uleb128 0xe
 1987 00ab 3A       		.uleb128 0x3a
 1988 00ac 0B       		.uleb128 0xb
 1989 00ad 3B       		.uleb128 0x3b
 1990 00ae 05       		.uleb128 0x5
 1991 00af 27       		.uleb128 0x27
 1992 00b0 19       		.uleb128 0x19
 1993 00b1 11       		.uleb128 0x11
 1994 00b2 01       		.uleb128 0x1
 1995 00b3 12       		.uleb128 0x12
 1996 00b4 06       		.uleb128 0x6
 1997 00b5 40       		.uleb128 0x40
 1998 00b6 18       		.uleb128 0x18
 1999 00b7 9642     		.uleb128 0x2116
 2000 00b9 19       		.uleb128 0x19
 2001 00ba 00       		.byte	0
 2002 00bb 00       		.byte	0
 2003 00bc 0E       		.uleb128 0xe
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 51


 2004 00bd 2E       		.uleb128 0x2e
 2005 00be 00       		.byte	0
 2006 00bf 3F       		.uleb128 0x3f
 2007 00c0 19       		.uleb128 0x19
 2008 00c1 03       		.uleb128 0x3
 2009 00c2 0E       		.uleb128 0xe
 2010 00c3 3A       		.uleb128 0x3a
 2011 00c4 0B       		.uleb128 0xb
 2012 00c5 3B       		.uleb128 0x3b
 2013 00c6 05       		.uleb128 0x5
 2014 00c7 27       		.uleb128 0x27
 2015 00c8 19       		.uleb128 0x19
 2016 00c9 11       		.uleb128 0x11
 2017 00ca 01       		.uleb128 0x1
 2018 00cb 12       		.uleb128 0x12
 2019 00cc 06       		.uleb128 0x6
 2020 00cd 40       		.uleb128 0x40
 2021 00ce 18       		.uleb128 0x18
 2022 00cf 9742     		.uleb128 0x2117
 2023 00d1 19       		.uleb128 0x19
 2024 00d2 00       		.byte	0
 2025 00d3 00       		.byte	0
 2026 00d4 0F       		.uleb128 0xf
 2027 00d5 2E       		.uleb128 0x2e
 2028 00d6 01       		.byte	0x1
 2029 00d7 3F       		.uleb128 0x3f
 2030 00d8 19       		.uleb128 0x19
 2031 00d9 03       		.uleb128 0x3
 2032 00da 0E       		.uleb128 0xe
 2033 00db 3A       		.uleb128 0x3a
 2034 00dc 0B       		.uleb128 0xb
 2035 00dd 3B       		.uleb128 0x3b
 2036 00de 05       		.uleb128 0x5
 2037 00df 27       		.uleb128 0x27
 2038 00e0 19       		.uleb128 0x19
 2039 00e1 49       		.uleb128 0x49
 2040 00e2 13       		.uleb128 0x13
 2041 00e3 11       		.uleb128 0x11
 2042 00e4 01       		.uleb128 0x1
 2043 00e5 12       		.uleb128 0x12
 2044 00e6 06       		.uleb128 0x6
 2045 00e7 40       		.uleb128 0x40
 2046 00e8 18       		.uleb128 0x18
 2047 00e9 9742     		.uleb128 0x2117
 2048 00eb 19       		.uleb128 0x19
 2049 00ec 01       		.uleb128 0x1
 2050 00ed 13       		.uleb128 0x13
 2051 00ee 00       		.byte	0
 2052 00ef 00       		.byte	0
 2053 00f0 10       		.uleb128 0x10
 2054 00f1 05       		.uleb128 0x5
 2055 00f2 00       		.byte	0
 2056 00f3 03       		.uleb128 0x3
 2057 00f4 0E       		.uleb128 0xe
 2058 00f5 3A       		.uleb128 0x3a
 2059 00f6 0B       		.uleb128 0xb
 2060 00f7 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 52


 2061 00f8 05       		.uleb128 0x5
 2062 00f9 49       		.uleb128 0x49
 2063 00fa 13       		.uleb128 0x13
 2064 00fb 02       		.uleb128 0x2
 2065 00fc 18       		.uleb128 0x18
 2066 00fd 00       		.byte	0
 2067 00fe 00       		.byte	0
 2068 00ff 11       		.uleb128 0x11
 2069 0100 34       		.uleb128 0x34
 2070 0101 00       		.byte	0
 2071 0102 03       		.uleb128 0x3
 2072 0103 0E       		.uleb128 0xe
 2073 0104 3A       		.uleb128 0x3a
 2074 0105 0B       		.uleb128 0xb
 2075 0106 3B       		.uleb128 0x3b
 2076 0107 05       		.uleb128 0x5
 2077 0108 49       		.uleb128 0x49
 2078 0109 13       		.uleb128 0x13
 2079 010a 02       		.uleb128 0x2
 2080 010b 18       		.uleb128 0x18
 2081 010c 00       		.byte	0
 2082 010d 00       		.byte	0
 2083 010e 12       		.uleb128 0x12
 2084 010f 2E       		.uleb128 0x2e
 2085 0110 01       		.byte	0x1
 2086 0111 3F       		.uleb128 0x3f
 2087 0112 19       		.uleb128 0x19
 2088 0113 03       		.uleb128 0x3
 2089 0114 0E       		.uleb128 0xe
 2090 0115 3A       		.uleb128 0x3a
 2091 0116 0B       		.uleb128 0xb
 2092 0117 3B       		.uleb128 0x3b
 2093 0118 05       		.uleb128 0x5
 2094 0119 27       		.uleb128 0x27
 2095 011a 19       		.uleb128 0x19
 2096 011b 49       		.uleb128 0x49
 2097 011c 13       		.uleb128 0x13
 2098 011d 11       		.uleb128 0x11
 2099 011e 01       		.uleb128 0x1
 2100 011f 12       		.uleb128 0x12
 2101 0120 06       		.uleb128 0x6
 2102 0121 40       		.uleb128 0x40
 2103 0122 18       		.uleb128 0x18
 2104 0123 9642     		.uleb128 0x2116
 2105 0125 19       		.uleb128 0x19
 2106 0126 01       		.uleb128 0x1
 2107 0127 13       		.uleb128 0x13
 2108 0128 00       		.byte	0
 2109 0129 00       		.byte	0
 2110 012a 13       		.uleb128 0x13
 2111 012b 2E       		.uleb128 0x2e
 2112 012c 01       		.byte	0x1
 2113 012d 3F       		.uleb128 0x3f
 2114 012e 19       		.uleb128 0x19
 2115 012f 03       		.uleb128 0x3
 2116 0130 0E       		.uleb128 0xe
 2117 0131 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 53


 2118 0132 0B       		.uleb128 0xb
 2119 0133 3B       		.uleb128 0x3b
 2120 0134 05       		.uleb128 0x5
 2121 0135 27       		.uleb128 0x27
 2122 0136 19       		.uleb128 0x19
 2123 0137 11       		.uleb128 0x11
 2124 0138 01       		.uleb128 0x1
 2125 0139 12       		.uleb128 0x12
 2126 013a 06       		.uleb128 0x6
 2127 013b 40       		.uleb128 0x40
 2128 013c 18       		.uleb128 0x18
 2129 013d 9742     		.uleb128 0x2117
 2130 013f 19       		.uleb128 0x19
 2131 0140 01       		.uleb128 0x1
 2132 0141 13       		.uleb128 0x13
 2133 0142 00       		.byte	0
 2134 0143 00       		.byte	0
 2135 0144 14       		.uleb128 0x14
 2136 0145 2E       		.uleb128 0x2e
 2137 0146 01       		.byte	0x1
 2138 0147 3F       		.uleb128 0x3f
 2139 0148 19       		.uleb128 0x19
 2140 0149 03       		.uleb128 0x3
 2141 014a 0E       		.uleb128 0xe
 2142 014b 3A       		.uleb128 0x3a
 2143 014c 0B       		.uleb128 0xb
 2144 014d 3B       		.uleb128 0x3b
 2145 014e 05       		.uleb128 0x5
 2146 014f 27       		.uleb128 0x27
 2147 0150 19       		.uleb128 0x19
 2148 0151 11       		.uleb128 0x11
 2149 0152 01       		.uleb128 0x1
 2150 0153 12       		.uleb128 0x12
 2151 0154 06       		.uleb128 0x6
 2152 0155 40       		.uleb128 0x40
 2153 0156 18       		.uleb128 0x18
 2154 0157 9642     		.uleb128 0x2116
 2155 0159 19       		.uleb128 0x19
 2156 015a 01       		.uleb128 0x1
 2157 015b 13       		.uleb128 0x13
 2158 015c 00       		.byte	0
 2159 015d 00       		.byte	0
 2160 015e 15       		.uleb128 0x15
 2161 015f 34       		.uleb128 0x34
 2162 0160 00       		.byte	0
 2163 0161 03       		.uleb128 0x3
 2164 0162 0E       		.uleb128 0xe
 2165 0163 3A       		.uleb128 0x3a
 2166 0164 0B       		.uleb128 0xb
 2167 0165 3B       		.uleb128 0x3b
 2168 0166 0B       		.uleb128 0xb
 2169 0167 49       		.uleb128 0x49
 2170 0168 13       		.uleb128 0x13
 2171 0169 3F       		.uleb128 0x3f
 2172 016a 19       		.uleb128 0x19
 2173 016b 02       		.uleb128 0x2
 2174 016c 18       		.uleb128 0x18
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 54


 2175 016d 00       		.byte	0
 2176 016e 00       		.byte	0
 2177 016f 00       		.byte	0
 2178              		.section	.debug_aranges,"",%progbits
 2179 0000 A4000000 		.4byte	0xa4
 2180 0004 0200     		.2byte	0x2
 2181 0006 00000000 		.4byte	.Ldebug_info0
 2182 000a 04       		.byte	0x4
 2183 000b 00       		.byte	0
 2184 000c 0000     		.2byte	0
 2185 000e 0000     		.2byte	0
 2186 0010 00000000 		.4byte	.LFB0
 2187 0014 24000000 		.4byte	.LFE0-.LFB0
 2188 0018 00000000 		.4byte	.LFB1
 2189 001c F4010000 		.4byte	.LFE1-.LFB1
 2190 0020 00000000 		.4byte	.LFB2
 2191 0024 28000000 		.4byte	.LFE2-.LFB2
 2192 0028 00000000 		.4byte	.LFB3
 2193 002c 18000000 		.4byte	.LFE3-.LFB3
 2194 0030 00000000 		.4byte	.LFB4
 2195 0034 1C000000 		.4byte	.LFE4-.LFB4
 2196 0038 00000000 		.4byte	.LFB5
 2197 003c 1C000000 		.4byte	.LFE5-.LFB5
 2198 0040 00000000 		.4byte	.LFB6
 2199 0044 48000000 		.4byte	.LFE6-.LFB6
 2200 0048 00000000 		.4byte	.LFB7
 2201 004c 44000000 		.4byte	.LFE7-.LFB7
 2202 0050 00000000 		.4byte	.LFB8
 2203 0054 1C000000 		.4byte	.LFE8-.LFB8
 2204 0058 00000000 		.4byte	.LFB9
 2205 005c 30000000 		.4byte	.LFE9-.LFB9
 2206 0060 00000000 		.4byte	.LFB10
 2207 0064 2C000000 		.4byte	.LFE10-.LFB10
 2208 0068 00000000 		.4byte	.LFB11
 2209 006c 1C000000 		.4byte	.LFE11-.LFB11
 2210 0070 00000000 		.4byte	.LFB12
 2211 0074 1C000000 		.4byte	.LFE12-.LFB12
 2212 0078 00000000 		.4byte	.LFB13
 2213 007c 30000000 		.4byte	.LFE13-.LFB13
 2214 0080 00000000 		.4byte	.LFB14
 2215 0084 2C000000 		.4byte	.LFE14-.LFB14
 2216 0088 00000000 		.4byte	.LFB15
 2217 008c A4000000 		.4byte	.LFE15-.LFB15
 2218 0090 00000000 		.4byte	.LFB16
 2219 0094 98000000 		.4byte	.LFE16-.LFB16
 2220 0098 00000000 		.4byte	.LFB17
 2221 009c 80000000 		.4byte	.LFE17-.LFB17
 2222 00a0 00000000 		.4byte	0
 2223 00a4 00000000 		.4byte	0
 2224              		.section	.debug_ranges,"",%progbits
 2225              	.Ldebug_ranges0:
 2226 0000 00000000 		.4byte	.LFB0
 2227 0004 24000000 		.4byte	.LFE0
 2228 0008 00000000 		.4byte	.LFB1
 2229 000c F4010000 		.4byte	.LFE1
 2230 0010 00000000 		.4byte	.LFB2
 2231 0014 28000000 		.4byte	.LFE2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 55


 2232 0018 00000000 		.4byte	.LFB3
 2233 001c 18000000 		.4byte	.LFE3
 2234 0020 00000000 		.4byte	.LFB4
 2235 0024 1C000000 		.4byte	.LFE4
 2236 0028 00000000 		.4byte	.LFB5
 2237 002c 1C000000 		.4byte	.LFE5
 2238 0030 00000000 		.4byte	.LFB6
 2239 0034 48000000 		.4byte	.LFE6
 2240 0038 00000000 		.4byte	.LFB7
 2241 003c 44000000 		.4byte	.LFE7
 2242 0040 00000000 		.4byte	.LFB8
 2243 0044 1C000000 		.4byte	.LFE8
 2244 0048 00000000 		.4byte	.LFB9
 2245 004c 30000000 		.4byte	.LFE9
 2246 0050 00000000 		.4byte	.LFB10
 2247 0054 2C000000 		.4byte	.LFE10
 2248 0058 00000000 		.4byte	.LFB11
 2249 005c 1C000000 		.4byte	.LFE11
 2250 0060 00000000 		.4byte	.LFB12
 2251 0064 1C000000 		.4byte	.LFE12
 2252 0068 00000000 		.4byte	.LFB13
 2253 006c 30000000 		.4byte	.LFE13
 2254 0070 00000000 		.4byte	.LFB14
 2255 0074 2C000000 		.4byte	.LFE14
 2256 0078 00000000 		.4byte	.LFB15
 2257 007c A4000000 		.4byte	.LFE15
 2258 0080 00000000 		.4byte	.LFB16
 2259 0084 98000000 		.4byte	.LFE16
 2260 0088 00000000 		.4byte	.LFB17
 2261 008c 80000000 		.4byte	.LFE17
 2262 0090 00000000 		.4byte	0
 2263 0094 00000000 		.4byte	0
 2264              		.section	.debug_line,"",%progbits
 2265              	.Ldebug_line0:
 2266 0000 30020000 		.section	.debug_str,"MS",%progbits,1
 2266      02004200 
 2266      00000201 
 2266      FB0E0D00 
 2266      01010101 
 2267              	.LASF10:
 2268 0000 75696E74 		.ascii	"uint16\000"
 2268      313600
 2269              	.LASF48:
 2270 0007 61646347 		.ascii	"adcGain\000"
 2270      61696E00 
 2271              	.LASF23:
 2272 000f 636F756E 		.ascii	"counts\000"
 2272      747300
 2273              	.LASF54:
 2274 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2274      436F756E 
 2274      7473546F 
 2274      5F566F6C 
 2274      747300
 2275              	.LASF36:
 2276 0029 4144435F 		.ascii	"ADC_Init\000"
 2276      496E6974 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 56


 2276      00
 2277              	.LASF7:
 2278 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2278      206C6F6E 
 2278      6720756E 
 2278      7369676E 
 2278      65642069 
 2279              	.LASF24:
 2280 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2280      496E7075 
 2280      7473506C 
 2280      6163656D 
 2280      656E7400 
 2281              	.LASF28:
 2282 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2282      53746172 
 2282      74436F6E 
 2282      76657274 
 2282      00
 2283              	.LASF6:
 2284 006e 6C6F6E67 		.ascii	"long long int\000"
 2284      206C6F6E 
 2284      6720696E 
 2284      7400
 2285              	.LASF0:
 2286 007c 7369676E 		.ascii	"signed char\000"
 2286      65642063 
 2286      68617200 
 2287              	.LASF30:
 2288 0088 73746174 		.ascii	"status\000"
 2288      757300
 2289              	.LASF13:
 2290 008f 696E7433 		.ascii	"int32\000"
 2290      3200
 2291              	.LASF25:
 2292 0095 4144435F 		.ascii	"ADC_Start\000"
 2292      53746172 
 2292      7400
 2293              	.LASF4:
 2294 009f 6C6F6E67 		.ascii	"long int\000"
 2294      20696E74 
 2294      00
 2295              	.LASF52:
 2296 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2296      436F756E 
 2296      7473546F 
 2296      5F75566F 
 2296      6C747300 
 2297              	.LASF59:
 2298 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2298      636F756E 
 2298      74735065 
 2298      72313056 
 2298      6F6C7400 
 2299              	.LASF9:
 2300 00d0 75696E74 		.ascii	"uint8\000"
 2300      3800
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 57


 2301              	.LASF16:
 2302 00d6 646F7562 		.ascii	"double\000"
 2302      6C6500
 2303              	.LASF11:
 2304 00dd 75696E74 		.ascii	"uint32\000"
 2304      333200
 2305              	.LASF38:
 2306 00e4 6D61736B 		.ascii	"mask\000"
 2306      00
 2307              	.LASF57:
 2308 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2308      696E6974 
 2308      56617200 
 2309              	.LASF33:
 2310 00f5 7265744D 		.ascii	"retMode\000"
 2310      6F646500 
 2311              	.LASF43:
 2312 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2312      5365744C 
 2312      696D6974 
 2312      4D61736B 
 2312      00
 2313              	.LASF8:
 2314 010e 756E7369 		.ascii	"unsigned int\000"
 2314      676E6564 
 2314      20696E74 
 2314      00
 2315              	.LASF53:
 2316 011b 75566F6C 		.ascii	"uVolts\000"
 2316      747300
 2317              	.LASF5:
 2318 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2318      20756E73 
 2318      69676E65 
 2318      6420696E 
 2318      7400
 2319              	.LASF44:
 2320 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2320      53657453 
 2320      61744D61 
 2320      736B00
 2321              	.LASF55:
 2322 0143 766F6C74 		.ascii	"volts\000"
 2322      7300
 2323              	.LASF22:
 2324 0149 746D7052 		.ascii	"tmpRegVal\000"
 2324      65675661 
 2324      6C00
 2325              	.LASF3:
 2326 0153 73686F72 		.ascii	"short unsigned int\000"
 2326      7420756E 
 2326      7369676E 
 2326      65642069 
 2326      6E7400
 2327              	.LASF29:
 2328 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2328      53746F70 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 58


 2328      436F6E76 
 2328      65727400 
 2329              	.LASF51:
 2330 0176 6D566F6C 		.ascii	"mVolts\000"
 2330      747300
 2331              	.LASF19:
 2332 017d 72656733 		.ascii	"reg32\000"
 2332      3200
 2333              	.LASF14:
 2334 0183 666C6F61 		.ascii	"float32\000"
 2334      74333200 
 2335              	.LASF20:
 2336 018b 73697A65 		.ascii	"sizetype\000"
 2336      74797065 
 2336      00
 2337              	.LASF40:
 2338 0194 6C6F774C 		.ascii	"lowLimit\000"
 2338      696D6974 
 2338      00
 2339              	.LASF41:
 2340 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2340      53657448 
 2340      6967684C 
 2340      696D6974 
 2340      00
 2341              	.LASF31:
 2342 01ae 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2342      4973456E 
 2342      64436F6E 
 2342      76657273 
 2342      696F6E00 
 2343              	.LASF17:
 2344 01c2 696E7436 		.ascii	"int64\000"
 2344      3400
 2345              	.LASF37:
 2346 01c8 4144435F 		.ascii	"ADC_SetChanMask\000"
 2346      53657443 
 2346      68616E4D 
 2346      61736B00 
 2347              	.LASF47:
 2348 01d8 4144435F 		.ascii	"ADC_SetGain\000"
 2348      53657447 
 2348      61696E00 
 2349              	.LASF15:
 2350 01e4 666C6F61 		.ascii	"float\000"
 2350      7400
 2351              	.LASF60:
 2352 01ea 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2352      4320342E 
 2352      382E3420 
 2352      32303134 
 2352      30353236 
 2353 021d 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2353      20726576 
 2353      6973696F 
 2353      6E203231 
 2353      31333538 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 59


 2354 0250 30202D66 		.ascii	"0 -ffunction-sections\000"
 2354      66756E63 
 2354      74696F6E 
 2354      2D736563 
 2354      74696F6E 
 2355              	.LASF62:
 2356 0266 433A5C55 		.ascii	"C:\\Users\\Snufkin\\Documents\\GitHub\\KingFunk2\\C"
 2356      73657273 
 2356      5C536E75 
 2356      666B696E 
 2356      5C446F63 
 2357 0293 52545F74 		.ascii	"RT_timer\\CRT_timer.cydsn\000"
 2357      696D6572 
 2357      5C435254 
 2357      5F74696D 
 2357      65722E63 
 2358              	.LASF49:
 2359 02ac 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2359      436F756E 
 2359      7473546F 
 2359      5F6D566F 
 2359      6C747300 
 2360              	.LASF39:
 2361 02c0 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2361      5365744C 
 2361      6F774C69 
 2361      6D697400 
 2362              	.LASF61:
 2363 02d0 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2363      6E657261 
 2363      7465645F 
 2363      536F7572 
 2363      63655C50 
 2364              	.LASF1:
 2365 02ef 756E7369 		.ascii	"unsigned char\000"
 2365      676E6564 
 2365      20636861 
 2365      7200
 2366              	.LASF58:
 2367 02fd 4144435F 		.ascii	"ADC_offset\000"
 2367      6F666673 
 2367      657400
 2368              	.LASF2:
 2369 0308 73686F72 		.ascii	"short int\000"
 2369      7420696E 
 2369      7400
 2370              	.LASF27:
 2371 0312 4144435F 		.ascii	"ADC_Stop\000"
 2371      53746F70 
 2371      00
 2372              	.LASF21:
 2373 031b 63684E75 		.ascii	"chNum\000"
 2373      6D00
 2374              	.LASF34:
 2375 0321 6368616E 		.ascii	"chan\000"
 2375      00
 2376              	.LASF18:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccutT6zy.s 			page 60


 2377 0326 63686172 		.ascii	"char\000"
 2377      00
 2378              	.LASF56:
 2379 032b 4144435F 		.ascii	"ADC_channelsConfig\000"
 2379      6368616E 
 2379      6E656C73 
 2379      436F6E66 
 2379      696700
 2380              	.LASF46:
 2381 033e 6F666673 		.ascii	"offset\000"
 2381      657400
 2382              	.LASF50:
 2383 0345 61646343 		.ascii	"adcCounts\000"
 2383      6F756E74 
 2383      7300
 2384              	.LASF26:
 2385 034f 4144435F 		.ascii	"ADC_Enable\000"
 2385      456E6162 
 2385      6C6500
 2386              	.LASF42:
 2387 035a 68696768 		.ascii	"highLimit\000"
 2387      4C696D69 
 2387      7400
 2388              	.LASF12:
 2389 0364 696E7431 		.ascii	"int16\000"
 2389      3600
 2390              	.LASF45:
 2391 036a 4144435F 		.ascii	"ADC_SetOffset\000"
 2391      5365744F 
 2391      66667365 
 2391      7400
 2392              	.LASF35:
 2393 0378 72657375 		.ascii	"result\000"
 2393      6C7400
 2394              	.LASF32:
 2395 037f 4144435F 		.ascii	"ADC_GetResult16\000"
 2395      47657452 
 2395      6573756C 
 2395      74313600 
 2396              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
