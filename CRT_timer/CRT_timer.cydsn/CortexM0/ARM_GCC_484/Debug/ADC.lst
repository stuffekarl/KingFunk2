ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 00020000 		.word	512
  31 0004 00120000 		.word	4608
  32              		.section	.text.ADC_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_Start, %function
  38              	ADC_Start:
  39              	.LFB0:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000200u, 0x00001200u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_initVar
  71              		.cfi_endproc
  72              	.LFE0:
  73              		.size	ADC_Start, .-ADC_Start
  74              		.global	__aeabi_idiv
  75              		.section	.text.ADC_Init,"ax",%progbits
  76              		.align	2
  77              		.global	ADC_Init
  78              		.code	16
  79              		.thumb_func
  80              		.type	ADC_Init, %function
  81              	ADC_Init:
  82              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 4


  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  83              		.loc 1 95 0
  84              		.cfi_startproc
  85 0000 90B5     		push	{r4, r7, lr}
  86              		.cfi_def_cfa_offset 12
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 85B0     		sub	sp, sp, #20
  91              		.cfi_def_cfa_offset 32
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 5


 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  94              		.loc 1 140 0
  95 0006 0E20     		mov	r0, #14
  96 0008 0321     		mov	r1, #3
  97 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  98              		.loc 1 141 0
  99 000e 5E4B     		ldr	r3, .L14
 100 0010 0E20     		mov	r0, #14
 101 0012 191C     		mov	r1, r3
 102 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 103              		.loc 1 145 0
 104 0018 5C4B     		ldr	r3, .L14+4
 105 001a 0322     		mov	r2, #3
 106 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG = ADC_DEFAULT_CTRL_REG_CFG;
 107              		.loc 1 146 0
 108 001e 5C4B     		ldr	r3, .L14+8
 109 0020 5C4A     		ldr	r2, .L14+12
 110 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 111              		.loc 1 147 0
 112 0024 5C4B     		ldr	r3, .L14+16
 113 0026 5D4A     		ldr	r2, .L14+20
 114 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 115              		.loc 1 148 0
 116 002a 5D4B     		ldr	r3, .L14+24
 117 002c 5D4A     		ldr	r2, .L14+28
 118 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 119              		.loc 1 149 0
 120 0030 5D4B     		ldr	r3, .L14+32
 121 0032 0022     		mov	r2, #0
 122 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 123              		.loc 1 150 0
 124 0036 5D4B     		ldr	r3, .L14+36
 125 0038 5D4A     		ldr	r2, .L14+40
 126 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 127              		.loc 1 151 0
 128 003c 5D4B     		ldr	r3, .L14+44
 129 003e 5E4A     		ldr	r2, .L14+48
 130 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     
 153:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 6


 131              		.loc 1 155 0
 132 0042 5E4B     		ldr	r3, .L14+52
 133 0044 5D4A     		ldr	r2, .L14+52
 134 0046 1268     		ldr	r2, [r2]
 135 0048 8021     		mov	r1, #128
 136 004a 4902     		lsl	r1, r1, #9
 137 004c 0A43     		orr	r2, r1
 138 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 139              		.loc 1 158 0
 140 0050 5B4B     		ldr	r3, .L14+56
 141 0052 5B4A     		ldr	r2, .L14+56
 142 0054 1268     		ldr	r2, [r2]
 143 0056 8021     		mov	r1, #128
 144 0058 4902     		lsl	r1, r1, #9
 145 005a 0A43     		orr	r2, r1
 146 005c 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC.c **** 
 162:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 147              		.loc 1 162 0
 148 005e 594B     		ldr	r3, .L14+60
 149 0060 0022     		mov	r2, #0
 150 0062 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 151              		.loc 1 163 0
 152 0064 584B     		ldr	r3, .L14+64
 153 0066 0022     		mov	r2, #0
 154 0068 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 155              		.loc 1 164 0
 156 006a 584B     		ldr	r3, .L14+68
 157 006c 0122     		mov	r2, #1
 158 006e 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC.c **** 
 166:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 159              		.loc 1 167 0
 160 0070 574B     		ldr	r3, .L14+72
 161 0072 0222     		mov	r2, #2
 162 0074 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 163              		.loc 1 171 0
 164 0076 574B     		ldr	r3, .L14+76
 165 0078 1B68     		ldr	r3, [r3]
 166 007a 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 167              		.loc 1 172 0
 168 007c 7A68     		ldr	r2, [r7, #4]
 169 007e 564B     		ldr	r3, .L14+80
 170 0080 1340     		and	r3, r2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 7


 171 0082 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC.c ****     
 174:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 172              		.loc 1 178 0
 173 0084 7B68     		ldr	r3, [r7, #4]
 174 0086 0122     		mov	r2, #1
 175 0088 1343     		orr	r3, r2
 176 008a 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC.c ****     #else
 181:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC.c ****         #else
 185:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC.c ****     
 191:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 177              		.loc 1 191 0
 178 008c 514B     		ldr	r3, .L14+76
 179 008e 7A68     		ldr	r2, [r7, #4]
 180 0090 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c **** 
 193:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 181              		.loc 1 194 0
 182 0092 524B     		ldr	r3, .L14+84
 183 0094 0222     		mov	r2, #2
 184 0096 1A60     		str	r2, [r3]
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 185              		.loc 1 197 0
 186 0098 0023     		mov	r3, #0
 187 009a FB60     		str	r3, [r7, #12]
 188 009c 6DE0     		b	.L6
 189              	.L13:
 198:.\Generated_Source\PSoC4/ADC.c ****     {
 199:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 190              		.loc 1 199 0
 191 009e 504B     		ldr	r3, .L14+88
 192 00a0 FA68     		ldr	r2, [r7, #12]
 193 00a2 9200     		lsl	r2, r2, #2
 194 00a4 D258     		ldr	r2, [r2, r3]
 195 00a6 DC23     		mov	r3, #220
 196 00a8 9B01     		lsl	r3, r3, #6
 197 00aa 1340     		and	r3, r2
 198 00ac 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 8


 199              		.loc 1 201 0
 200 00ae 4D4A     		ldr	r2, .L14+92
 201 00b0 FB68     		ldr	r3, [r7, #12]
 202 00b2 D318     		add	r3, r2, r3
 203 00b4 1B78     		ldrb	r3, [r3]
 204 00b6 7A68     		ldr	r2, [r7, #4]
 205 00b8 1343     		orr	r3, r2
 206 00ba 7B60     		str	r3, [r7, #4]
 202:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC.c ****         
 204:.\Generated_Source\PSoC4/ADC.c ****         
 205:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC.c ****         */
 209:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC.c **** 
 214:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC.c ****         {
 218:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 207              		.loc 1 218 0
 208 00bc FB68     		ldr	r3, [r7, #12]
 209 00be 9B00     		lsl	r3, r3, #2
 210 00c0 494A     		ldr	r2, .L14+96
 211 00c2 9B18     		add	r3, r3, r2
 212 00c4 7A68     		ldr	r2, [r7, #4]
 213 00c6 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC.c **** 
 220:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 214              		.loc 1 220 0
 215 00c8 454B     		ldr	r3, .L14+88
 216 00ca FA68     		ldr	r2, [r7, #12]
 217 00cc 9200     		lsl	r2, r2, #2
 218 00ce D258     		ldr	r2, [r2, r3]
 219 00d0 0123     		mov	r3, #1
 220 00d2 1340     		and	r3, r2
 221 00d4 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC.c ****             {
 222:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 222              		.loc 1 222 0
 223 00d6 3B4B     		ldr	r3, .L14+60
 224 00d8 3A4A     		ldr	r2, .L14+60
 225 00da 1168     		ldr	r1, [r2]
 226 00dc FA68     		ldr	r2, [r7, #12]
 227 00de 0120     		mov	r0, #1
 228 00e0 041C     		mov	r4, r0
 229 00e2 9440     		lsl	r4, r4, r2
 230 00e4 221C     		mov	r2, r4
 231 00e6 92B2     		uxth	r2, r2
 232 00e8 0A43     		orr	r2, r1
 233 00ea 1A60     		str	r2, [r3]
 234              	.L7:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 9


 223:.\Generated_Source\PSoC4/ADC.c ****             }
 224:.\Generated_Source\PSoC4/ADC.c **** 
 225:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 235              		.loc 1 225 0
 236 00ec 3C4B     		ldr	r3, .L14+88
 237 00ee FA68     		ldr	r2, [r7, #12]
 238 00f0 9200     		lsl	r2, r2, #2
 239 00f2 D258     		ldr	r2, [r2, r3]
 240 00f4 0223     		mov	r3, #2
 241 00f6 1340     		and	r3, r2
 242 00f8 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC.c ****             {
 227:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 243              		.loc 1 227 0
 244 00fa 334B     		ldr	r3, .L14+64
 245 00fc 324A     		ldr	r2, .L14+64
 246 00fe 1168     		ldr	r1, [r2]
 247 0100 FA68     		ldr	r2, [r7, #12]
 248 0102 0120     		mov	r0, #1
 249 0104 041C     		mov	r4, r0
 250 0106 9440     		lsl	r4, r4, r2
 251 0108 221C     		mov	r2, r4
 252 010a 92B2     		uxth	r2, r2
 253 010c 0A43     		orr	r2, r1
 254 010e 1A60     		str	r2, [r3]
 255              	.L8:
 228:.\Generated_Source\PSoC4/ADC.c ****             }
 229:.\Generated_Source\PSoC4/ADC.c ****         }
 230:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC.c ****             else
 232:.\Generated_Source\PSoC4/ADC.c ****             {
 233:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC.c **** 
 235:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC.c ****                 {
 237:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC.c ****                 }
 239:.\Generated_Source\PSoC4/ADC.c **** 
 240:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC.c ****                 {
 242:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC.c ****                 }
 244:.\Generated_Source\PSoC4/ADC.c ****             }
 245:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC.c **** 
 247:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 256              		.loc 1 247 0
 257 0110 334B     		ldr	r3, .L14+88
 258 0112 FA68     		ldr	r2, [r7, #12]
 259 0114 9200     		lsl	r2, r2, #2
 260 0116 D258     		ldr	r2, [r2, r3]
 261 0118 8023     		mov	r3, #128
 262 011a 9B00     		lsl	r3, r3, #2
 263 011c 1340     		and	r3, r2
 264 011e 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC.c ****         {
 249:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 10


 265              		.loc 1 249 0
 266 0120 8023     		mov	r3, #128
 267 0122 5B00     		lsl	r3, r3, #1
 268 0124 BB60     		str	r3, [r7, #8]
 269 0126 02E0     		b	.L10
 270              	.L9:
 250:.\Generated_Source\PSoC4/ADC.c ****         }
 251:.\Generated_Source\PSoC4/ADC.c ****         else
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 271              		.loc 1 253 0
 272 0128 8023     		mov	r3, #128
 273 012a 5B01     		lsl	r3, r3, #5
 274 012c BB60     		str	r3, [r7, #8]
 275              	.L10:
 254:.\Generated_Source\PSoC4/ADC.c ****         }
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 276              		.loc 1 256 0
 277 012e 2C4B     		ldr	r3, .L14+88
 278 0130 FA68     		ldr	r2, [r7, #12]
 279 0132 9200     		lsl	r2, r2, #2
 280 0134 D258     		ldr	r2, [r2, r3]
 281 0136 8023     		mov	r3, #128
 282 0138 5B00     		lsl	r3, r3, #1
 283 013a 1340     		and	r3, r2
 284 013c 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC.c ****         {
 258:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 260:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC.c ****             #else
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 285              		.loc 1 263 0
 286 013e 2B4B     		ldr	r3, .L14+100
 287 0140 FA68     		ldr	r2, [r7, #12]
 288 0142 5200     		lsl	r2, r2, #1
 289 0144 0021     		mov	r1, #0
 290 0146 D152     		strh	r1, [r2, r3]
 291 0148 04E0     		b	.L12
 292              	.L11:
 264:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC.c ****         {
 268:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 271:.\Generated_Source\PSoC4/ADC.c ****             #else
 272:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 293              		.loc 1 272 0
 294 014a 284B     		ldr	r3, .L14+100
 295 014c FA68     		ldr	r2, [r7, #12]
 296 014e 5200     		lsl	r2, r2, #1
 297 0150 0021     		mov	r1, #0
 298 0152 D152     		strh	r1, [r2, r3]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 11


 299              	.L12:
 273:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC.c ****         }
 275:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 300              		.loc 1 276 0
 301 0154 BB68     		ldr	r3, [r7, #8]
 302 0156 264A     		ldr	r2, .L14+104
 303 0158 5343     		mul	r3, r2
 304 015a 264A     		ldr	r2, .L14+108
 305 015c 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 306              		.loc 1 277 0
 307 015e 181C     		mov	r0, r3
 308 0160 2549     		ldr	r1, .L14+112
 309 0162 FFF7FEFF 		bl	__aeabi_idiv
 310 0166 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 311              		.loc 1 276 0
 312 0168 9BB2     		uxth	r3, r3
 313 016a 19B2     		sxth	r1, r3
 314 016c 234B     		ldr	r3, .L14+116
 315 016e FA68     		ldr	r2, [r7, #12]
 316 0170 9200     		lsl	r2, r2, #2
 317 0172 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 318              		.loc 1 197 0
 319 0174 FB68     		ldr	r3, [r7, #12]
 320 0176 0133     		add	r3, r3, #1
 321 0178 FB60     		str	r3, [r7, #12]
 322              	.L6:
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 323              		.loc 1 197 0 is_stmt 0 discriminator 1
 324 017a FB68     		ldr	r3, [r7, #12]
 325 017c 012B     		cmp	r3, #1
 326 017e 8ED9     		bls	.L13
 278:.\Generated_Source\PSoC4/ADC.c ****     }
 279:.\Generated_Source\PSoC4/ADC.c **** }
 327              		.loc 1 279 0 is_stmt 1
 328 0180 BD46     		mov	sp, r7
 329 0182 05B0     		add	sp, sp, #20
 330              		@ sp needed
 331 0184 90BD     		pop	{r4, r7, pc}
 332              	.L15:
 333 0186 C046     		.align	2
 334              	.L14:
 335 0188 00000000 		.word	ADC_ISR
 336 018c 20001A40 		.word	1075445792
 337 0190 00001A40 		.word	1075445760
 338 0194 70200010 		.word	268443760
 339 0198 04001A40 		.word	1075445764
 340 019c 8C000080 		.word	-2147483508
 341 01a0 18001A40 		.word	1075445784
 342 01a4 0000FF07 		.word	134152192
 343 01a8 1C001A40 		.word	1075445788
 344 01ac 10001A40 		.word	1075445776
 345 01b0 02001E00 		.word	1966082
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 12


 346 01b4 14001A40 		.word	1075445780
 347 01b8 02000200 		.word	131074
 348 01bc 00031A40 		.word	1075446528
 349 01c0 40031A40 		.word	1075446592
 350 01c4 28021A40 		.word	1075446312
 351 01c8 38021A40 		.word	1075446328
 352 01cc 18021A40 		.word	1075446296
 353 01d0 000F1A40 		.word	1075449600
 354 01d4 30001A40 		.word	1075445808
 355 01d8 FFFFFFDF 		.word	-536870913
 356 01dc 040F1A40 		.word	1075449604
 357 01e0 00000000 		.word	ADC_channelsConfig
 358 01e4 08000000 		.word	ADC_InputsPlacement.4717
 359 01e8 80001A40 		.word	1075445888
 360 01ec 00000000 		.word	ADC_offset
 361 01f0 10270000 		.word	10000
 362 01f4 E40C0000 		.word	3300
 363 01f8 C8190000 		.word	6600
 364 01fc 00000000 		.word	ADC_countsPer10Volt
 365              		.cfi_endproc
 366              	.LFE1:
 367              		.size	ADC_Init, .-ADC_Init
 368              		.section	.text.ADC_Enable,"ax",%progbits
 369              		.align	2
 370              		.global	ADC_Enable
 371              		.code	16
 372              		.thumb_func
 373              		.type	ADC_Enable, %function
 374              	ADC_Enable:
 375              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC.c **** 
 281:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC.c **** *
 285:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 296:.\Generated_Source\PSoC4/ADC.c **** {
 376              		.loc 1 296 0
 377              		.cfi_startproc
 378 0000 80B5     		push	{r7, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 7, -8
 381              		.cfi_offset 14, -4
 382 0002 00AF     		add	r7, sp, #0
 383              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 384              		.loc 1 297 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 13


 385 0004 074B     		ldr	r3, .L18
 386 0006 1B68     		ldr	r3, [r3]
 387 0008 002B     		cmp	r3, #0
 388 000a 09DB     		blt	.L16
 298:.\Generated_Source\PSoC4/ADC.c ****     {
 299:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC.c **** 
 301:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC.c ****             {
 303:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC.c ****             }
 305:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC.c ****         
 307:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 389              		.loc 1 307 0
 390 000c 054B     		ldr	r3, .L18
 391 000e 054A     		ldr	r2, .L18
 392 0010 1268     		ldr	r2, [r2]
 393 0012 8021     		mov	r1, #128
 394 0014 0906     		lsl	r1, r1, #24
 395 0016 0A43     		orr	r2, r1
 396 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC.c ****         
 309:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 397              		.loc 1 310 0
 398 001a 0A20     		mov	r0, #10
 399 001c FFF7FEFF 		bl	CyDelayUs
 400              	.L16:
 311:.\Generated_Source\PSoC4/ADC.c ****     }
 312:.\Generated_Source\PSoC4/ADC.c **** }
 401              		.loc 1 312 0
 402 0020 BD46     		mov	sp, r7
 403              		@ sp needed
 404 0022 80BD     		pop	{r7, pc}
 405              	.L19:
 406              		.align	2
 407              	.L18:
 408 0024 00001A40 		.word	1075445760
 409              		.cfi_endproc
 410              	.LFE2:
 411              		.size	ADC_Enable, .-ADC_Enable
 412              		.section	.text.ADC_Stop,"ax",%progbits
 413              		.align	2
 414              		.global	ADC_Stop
 415              		.code	16
 416              		.thumb_func
 417              		.type	ADC_Stop, %function
 418              	ADC_Stop:
 419              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC.c **** 
 314:.\Generated_Source\PSoC4/ADC.c **** 
 315:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 317:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** *
 319:.\Generated_Source\PSoC4/ADC.c **** * Summary:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 14


 320:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 420              		.loc 1 331 0
 421              		.cfi_startproc
 422 0000 80B5     		push	{r7, lr}
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 7, -8
 425              		.cfi_offset 14, -4
 426 0002 00AF     		add	r7, sp, #0
 427              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 428              		.loc 1 332 0
 429 0004 034B     		ldr	r3, .L21
 430 0006 034A     		ldr	r2, .L21
 431 0008 1268     		ldr	r2, [r2]
 432 000a 5200     		lsl	r2, r2, #1
 433 000c 5208     		lsr	r2, r2, #1
 434 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC.c **** }
 435              		.loc 1 333 0
 436 0010 BD46     		mov	sp, r7
 437              		@ sp needed
 438 0012 80BD     		pop	{r7, pc}
 439              	.L22:
 440              		.align	2
 441              	.L21:
 442 0014 00001A40 		.word	1075445760
 443              		.cfi_endproc
 444              	.LFE3:
 445              		.size	ADC_Stop, .-ADC_Stop
 446              		.section	.text.ADC_StartConvert,"ax",%progbits
 447              		.align	2
 448              		.global	ADC_StartConvert
 449              		.code	16
 450              		.thumb_func
 451              		.type	ADC_StartConvert, %function
 452              	ADC_StartConvert:
 453              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC.c **** 
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 338:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC.c **** *
 340:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 15


 343:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC.c **** *
 345:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC.c **** *
 349:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC.c **** {
 454              		.loc 1 357 0
 455              		.cfi_startproc
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 00AF     		add	r7, sp, #0
 461              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 462              		.loc 1 359 0
 463 0004 044B     		ldr	r3, .L24
 464 0006 044A     		ldr	r2, .L24
 465 0008 1268     		ldr	r2, [r2]
 466 000a 8021     		mov	r1, #128
 467 000c 4902     		lsl	r1, r1, #9
 468 000e 0A43     		orr	r2, r1
 469 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC.c **** 
 364:.\Generated_Source\PSoC4/ADC.c **** }
 470              		.loc 1 364 0
 471 0012 BD46     		mov	sp, r7
 472              		@ sp needed
 473 0014 80BD     		pop	{r7, pc}
 474              	.L25:
 475 0016 C046     		.align	2
 476              	.L24:
 477 0018 04001A40 		.word	1075445764
 478              		.cfi_endproc
 479              	.LFE4:
 480              		.size	ADC_StartConvert, .-ADC_StartConvert
 481              		.section	.text.ADC_StopConvert,"ax",%progbits
 482              		.align	2
 483              		.global	ADC_StopConvert
 484              		.code	16
 485              		.thumb_func
 486              		.type	ADC_StopConvert, %function
 487              	ADC_StopConvert:
 488              	.LFB5:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 16


 365:.\Generated_Source\PSoC4/ADC.c **** 
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 369:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC.c **** *
 371:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC.c **** {
 489              		.loc 1 382 0
 490              		.cfi_startproc
 491 0000 80B5     		push	{r7, lr}
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 7, -8
 494              		.cfi_offset 14, -4
 495 0002 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 497              		.loc 1 384 0
 498 0004 034B     		ldr	r3, .L27
 499 0006 034A     		ldr	r2, .L27
 500 0008 1168     		ldr	r1, [r2]
 501 000a 034A     		ldr	r2, .L27+4
 502 000c 0A40     		and	r2, r1
 503 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC.c **** }
 504              		.loc 1 386 0
 505 0010 BD46     		mov	sp, r7
 506              		@ sp needed
 507 0012 80BD     		pop	{r7, pc}
 508              	.L28:
 509              		.align	2
 510              	.L27:
 511 0014 04001A40 		.word	1075445764
 512 0018 FFFFFEFF 		.word	-65537
 513              		.cfi_endproc
 514              	.LFE5:
 515              		.size	ADC_StopConvert, .-ADC_StopConvert
 516              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 517              		.align	2
 518              		.global	ADC_IsEndConversion
 519              		.code	16
 520              		.thumb_func
 521              		.type	ADC_IsEndConversion, %function
 522              	ADC_IsEndConversion:
 523              	.LFB6:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 17


 387:.\Generated_Source\PSoC4/ADC.c **** 
 388:.\Generated_Source\PSoC4/ADC.c **** 
 389:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC.c **** *
 393:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC.c **** *
 402:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC.c **** *
 414:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC.c **** {
 524              		.loc 1 416 0
 525              		.cfi_startproc
 526 0000 80B5     		push	{r7, lr}
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 7, -8
 529              		.cfi_offset 14, -4
 530 0002 84B0     		sub	sp, sp, #16
 531              		.cfi_def_cfa_offset 24
 532 0004 00AF     		add	r7, sp, #0
 533              		.cfi_def_cfa_register 7
 534 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 535              		.loc 1 417 0
 536 0008 0023     		mov	r3, #0
 537 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC.c **** 
 419:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 538              		.loc 1 419 0
 539 000c 7A68     		ldr	r2, [r7, #4]
 540 000e 0323     		mov	r3, #3
 541 0010 1340     		and	r3, r2
 542 0012 11D0     		beq	.L30
 543              	.L32:
 420:.\Generated_Source\PSoC4/ADC.c ****     {
 421:.\Generated_Source\PSoC4/ADC.c ****         do
 422:.\Generated_Source\PSoC4/ADC.c ****         {
 423:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 18


 544              		.loc 1 423 0 discriminator 1
 545 0014 0B4B     		ldr	r3, .L34
 546 0016 1A68     		ldr	r2, [r3]
 547 0018 0123     		mov	r3, #1
 548 001a 1340     		and	r3, r2
 549 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 550              		.loc 1 424 0 discriminator 1
 551 001e FB68     		ldr	r3, [r7, #12]
 552 0020 002B     		cmp	r3, #0
 553 0022 03D1     		bne	.L31
 554 0024 7A68     		ldr	r2, [r7, #4]
 555 0026 0223     		mov	r3, #2
 556 0028 1340     		and	r3, r2
 557 002a F3D1     		bne	.L32
 558              	.L31:
 425:.\Generated_Source\PSoC4/ADC.c **** 
 426:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 559              		.loc 1 426 0
 560 002c FB68     		ldr	r3, [r7, #12]
 561 002e 002B     		cmp	r3, #0
 562 0030 02D0     		beq	.L30
 427:.\Generated_Source\PSoC4/ADC.c ****         {
 428:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 563              		.loc 1 429 0
 564 0032 044B     		ldr	r3, .L34
 565 0034 0122     		mov	r2, #1
 566 0036 1A60     		str	r2, [r3]
 567              	.L30:
 430:.\Generated_Source\PSoC4/ADC.c ****         }
 431:.\Generated_Source\PSoC4/ADC.c ****     }
 432:.\Generated_Source\PSoC4/ADC.c **** 
 433:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC.c ****         {
 436:.\Generated_Source\PSoC4/ADC.c ****             do
 437:.\Generated_Source\PSoC4/ADC.c ****             {
 438:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC.c **** 
 442:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC.c ****             {
 444:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC.c ****             }
 447:.\Generated_Source\PSoC4/ADC.c ****         }
 448:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC.c **** 
 450:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 568              		.loc 1 450 0
 569 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC.c **** }
 570              		.loc 1 451 0
 571 003a 181C     		mov	r0, r3
 572 003c BD46     		mov	sp, r7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 19


 573 003e 04B0     		add	sp, sp, #16
 574              		@ sp needed
 575 0040 80BD     		pop	{r7, pc}
 576              	.L35:
 577 0042 C046     		.align	2
 578              	.L34:
 579 0044 10021A40 		.word	1075446288
 580              		.cfi_endproc
 581              	.LFE6:
 582              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 583              		.section	.text.ADC_GetResult16,"ax",%progbits
 584              		.align	2
 585              		.global	ADC_GetResult16
 586              		.code	16
 587              		.thumb_func
 588              		.type	ADC_GetResult16, %function
 589              	ADC_GetResult16:
 590              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 456:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC.c **** *
 458:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC.c **** *
 465:.\Generated_Source\PSoC4/ADC.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC.c **** {
 591              		.loc 1 470 0
 592              		.cfi_startproc
 593 0000 80B5     		push	{r7, lr}
 594              		.cfi_def_cfa_offset 8
 595              		.cfi_offset 7, -8
 596              		.cfi_offset 14, -4
 597 0002 84B0     		sub	sp, sp, #16
 598              		.cfi_def_cfa_offset 24
 599 0004 00AF     		add	r7, sp, #0
 600              		.cfi_def_cfa_register 7
 601 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC.c **** 
 473:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 602              		.loc 1 474 0
 603 0008 7B68     		ldr	r3, [r7, #4]
 604 000a 012B     		cmp	r3, #1
 605 000c 02D9     		bls	.L37
 606              		.loc 1 474 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 20


 607 000e 0020     		mov	r0, #0
 608 0010 FFF7FEFF 		bl	CyHalt
 609              	.L37:
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 610              		.loc 1 476 0 is_stmt 1
 611 0014 7B68     		ldr	r3, [r7, #4]
 612 0016 012B     		cmp	r3, #1
 613 0018 08D8     		bhi	.L38
 477:.\Generated_Source\PSoC4/ADC.c ****     {
 478:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 614              		.loc 1 478 0
 615 001a 7B68     		ldr	r3, [r7, #4]
 616 001c 9B00     		lsl	r3, r3, #2
 617 001e 084A     		ldr	r2, .L41
 618 0020 9B18     		add	r3, r3, r2
 619 0022 1B68     		ldr	r3, [r3]
 620 0024 1B04     		lsl	r3, r3, #16
 621 0026 1B0C     		lsr	r3, r3, #16
 622 0028 FB60     		str	r3, [r7, #12]
 623 002a 01E0     		b	.L39
 624              	.L38:
 479:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC.c ****     }
 481:.\Generated_Source\PSoC4/ADC.c ****     else
 482:.\Generated_Source\PSoC4/ADC.c ****     {
 483:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC.c ****         #else
 486:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 625              		.loc 1 486 0
 626 002c 0023     		mov	r3, #0
 627 002e FB60     		str	r3, [r7, #12]
 628              	.L39:
 487:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC.c ****     }
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 629              		.loc 1 490 0
 630 0030 FB68     		ldr	r3, [r7, #12]
 631 0032 9BB2     		uxth	r3, r3
 632 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC.c **** }
 633              		.loc 1 491 0
 634 0036 181C     		mov	r0, r3
 635 0038 BD46     		mov	sp, r7
 636 003a 04B0     		add	sp, sp, #16
 637              		@ sp needed
 638 003c 80BD     		pop	{r7, pc}
 639              	.L42:
 640 003e C046     		.align	2
 641              	.L41:
 642 0040 80011A40 		.word	1075446144
 643              		.cfi_endproc
 644              	.LFE7:
 645              		.size	ADC_GetResult16, .-ADC_GetResult16
 646              		.section	.text.ADC_SetChanMask,"ax",%progbits
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 21


 647              		.align	2
 648              		.global	ADC_SetChanMask
 649              		.code	16
 650              		.thumb_func
 651              		.type	ADC_SetChanMask, %function
 652              	ADC_SetChanMask:
 653              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c **** 
 494:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 496:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC.c **** *
 498:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC.c **** *
 510:.\Generated_Source\PSoC4/ADC.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC.c **** {
 654              		.loc 1 515 0
 655              		.cfi_startproc
 656 0000 80B5     		push	{r7, lr}
 657              		.cfi_def_cfa_offset 8
 658              		.cfi_offset 7, -8
 659              		.cfi_offset 14, -4
 660 0002 82B0     		sub	sp, sp, #8
 661              		.cfi_def_cfa_offset 16
 662 0004 00AF     		add	r7, sp, #0
 663              		.cfi_def_cfa_register 7
 664 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 665              		.loc 1 516 0
 666 0008 034B     		ldr	r3, .L44
 667 000a 7968     		ldr	r1, [r7, #4]
 668 000c 0322     		mov	r2, #3
 669 000e 0A40     		and	r2, r1
 670 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC.c **** }
 671              		.loc 1 517 0
 672 0012 BD46     		mov	sp, r7
 673 0014 02B0     		add	sp, sp, #8
 674              		@ sp needed
 675 0016 80BD     		pop	{r7, pc}
 676              	.L45:
 677              		.align	2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 22


 678              	.L44:
 679 0018 20001A40 		.word	1075445792
 680              		.cfi_endproc
 681              	.LFE8:
 682              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 683              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 684              		.align	2
 685              		.global	ADC_SetLowLimit
 686              		.code	16
 687              		.thumb_func
 688              		.type	ADC_SetLowLimit, %function
 689              	ADC_SetLowLimit:
 690              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC.c **** 
 519:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c **** 
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 524:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC.c ****     *
 526:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC.c ****     {
 538:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC.c ****     }
 540:.\Generated_Source\PSoC4/ADC.c **** 
 541:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC.c **** 
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC.c **** {
 691              		.loc 1 559 0
 692              		.cfi_startproc
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 23


 693 0000 80B5     		push	{r7, lr}
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0002 82B0     		sub	sp, sp, #8
 698              		.cfi_def_cfa_offset 16
 699 0004 00AF     		add	r7, sp, #0
 700              		.cfi_def_cfa_register 7
 701 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 702              		.loc 1 560 0
 703 0008 084B     		ldr	r3, .L47
 704 000a 084A     		ldr	r2, .L47
 705 000c 1268     		ldr	r2, [r2]
 706 000e 120C     		lsr	r2, r2, #16
 707 0010 1204     		lsl	r2, r2, #16
 708 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 709              		.loc 1 561 0
 710 0014 054B     		ldr	r3, .L47
 711 0016 054A     		ldr	r2, .L47
 712 0018 1168     		ldr	r1, [r2]
 713 001a 7A68     		ldr	r2, [r7, #4]
 714 001c 1204     		lsl	r2, r2, #16
 715 001e 120C     		lsr	r2, r2, #16
 716 0020 0A43     		orr	r2, r1
 717 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC.c **** }
 718              		.loc 1 562 0
 719 0024 BD46     		mov	sp, r7
 720 0026 02B0     		add	sp, sp, #8
 721              		@ sp needed
 722 0028 80BD     		pop	{r7, pc}
 723              	.L48:
 724 002a C046     		.align	2
 725              	.L47:
 726 002c 18001A40 		.word	1075445784
 727              		.cfi_endproc
 728              	.LFE9:
 729              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 730              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 731              		.align	2
 732              		.global	ADC_SetHighLimit
 733              		.code	16
 734              		.thumb_func
 735              		.type	ADC_SetHighLimit, %function
 736              	ADC_SetHighLimit:
 737              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC.c **** 
 564:.\Generated_Source\PSoC4/ADC.c **** 
 565:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC.c **** *
 569:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 24


 572:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC.c **** {
 738              		.loc 1 580 0
 739              		.cfi_startproc
 740 0000 80B5     		push	{r7, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744 0002 82B0     		sub	sp, sp, #8
 745              		.cfi_def_cfa_offset 16
 746 0004 00AF     		add	r7, sp, #0
 747              		.cfi_def_cfa_register 7
 748 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 749              		.loc 1 581 0
 750 0008 074B     		ldr	r3, .L50
 751 000a 074A     		ldr	r2, .L50
 752 000c 1268     		ldr	r2, [r2]
 753 000e 1204     		lsl	r2, r2, #16
 754 0010 120C     		lsr	r2, r2, #16
 755 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 756              		.loc 1 582 0
 757 0014 044B     		ldr	r3, .L50
 758 0016 044A     		ldr	r2, .L50
 759 0018 1168     		ldr	r1, [r2]
 760 001a 7A68     		ldr	r2, [r7, #4]
 761 001c 1204     		lsl	r2, r2, #16
 762 001e 0A43     		orr	r2, r1
 763 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC.c **** }
 764              		.loc 1 583 0
 765 0022 BD46     		mov	sp, r7
 766 0024 02B0     		add	sp, sp, #8
 767              		@ sp needed
 768 0026 80BD     		pop	{r7, pc}
 769              	.L51:
 770              		.align	2
 771              	.L50:
 772 0028 18001A40 		.word	1075445784
 773              		.cfi_endproc
 774              	.LFE10:
 775              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 776              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 777              		.align	2
 778              		.global	ADC_SetLimitMask
 779              		.code	16
 780              		.thumb_func
 781              		.type	ADC_SetLimitMask, %function
 782              	ADC_SetLimitMask:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 25


 783              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC.c **** 
 585:.\Generated_Source\PSoC4/ADC.c **** 
 586:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC.c **** *
 599:.\Generated_Source\PSoC4/ADC.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC.c **** {
 784              		.loc 1 604 0
 785              		.cfi_startproc
 786 0000 80B5     		push	{r7, lr}
 787              		.cfi_def_cfa_offset 8
 788              		.cfi_offset 7, -8
 789              		.cfi_offset 14, -4
 790 0002 82B0     		sub	sp, sp, #8
 791              		.cfi_def_cfa_offset 16
 792 0004 00AF     		add	r7, sp, #0
 793              		.cfi_def_cfa_register 7
 794 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 795              		.loc 1 605 0
 796 0008 034B     		ldr	r3, .L53
 797 000a 7968     		ldr	r1, [r7, #4]
 798 000c 0322     		mov	r2, #3
 799 000e 0A40     		and	r2, r1
 800 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC.c **** }
 801              		.loc 1 606 0
 802 0012 BD46     		mov	sp, r7
 803 0014 02B0     		add	sp, sp, #8
 804              		@ sp needed
 805 0016 80BD     		pop	{r7, pc}
 806              	.L54:
 807              		.align	2
 808              	.L53:
 809 0018 38021A40 		.word	1075446328
 810              		.cfi_endproc
 811              	.LFE11:
 812              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 813              		.section	.text.ADC_SetSatMask,"ax",%progbits
 814              		.align	2
 815              		.global	ADC_SetSatMask
 816              		.code	16
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 26


 817              		.thumb_func
 818              		.type	ADC_SetSatMask, %function
 819              	ADC_SetSatMask:
 820              	.LFB12:
 607:.\Generated_Source\PSoC4/ADC.c **** 
 608:.\Generated_Source\PSoC4/ADC.c **** 
 609:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 611:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC.c **** *
 622:.\Generated_Source\PSoC4/ADC.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC.c **** {
 821              		.loc 1 627 0
 822              		.cfi_startproc
 823 0000 80B5     		push	{r7, lr}
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 7, -8
 826              		.cfi_offset 14, -4
 827 0002 82B0     		sub	sp, sp, #8
 828              		.cfi_def_cfa_offset 16
 829 0004 00AF     		add	r7, sp, #0
 830              		.cfi_def_cfa_register 7
 831 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 832              		.loc 1 628 0
 833 0008 034B     		ldr	r3, .L56
 834 000a 7968     		ldr	r1, [r7, #4]
 835 000c 0322     		mov	r2, #3
 836 000e 0A40     		and	r2, r1
 837 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC.c **** }
 838              		.loc 1 629 0
 839 0012 BD46     		mov	sp, r7
 840 0014 02B0     		add	sp, sp, #8
 841              		@ sp needed
 842 0016 80BD     		pop	{r7, pc}
 843              	.L57:
 844              		.align	2
 845              	.L56:
 846 0018 28021A40 		.word	1075446312
 847              		.cfi_endproc
 848              	.LFE12:
 849              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 850              		.section	.text.ADC_SetOffset,"ax",%progbits
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 27


 851              		.align	2
 852              		.global	ADC_SetOffset
 853              		.code	16
 854              		.thumb_func
 855              		.type	ADC_SetOffset, %function
 856              	ADC_SetOffset:
 857              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC.c **** 
 631:.\Generated_Source\PSoC4/ADC.c **** 
 632:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 634:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC.c **** *
 636:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC.c **** *
 642:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC.c **** *
 647:.\Generated_Source\PSoC4/ADC.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC.c **** {
 858              		.loc 1 655 0
 859              		.cfi_startproc
 860 0000 80B5     		push	{r7, lr}
 861              		.cfi_def_cfa_offset 8
 862              		.cfi_offset 7, -8
 863              		.cfi_offset 14, -4
 864 0002 82B0     		sub	sp, sp, #8
 865              		.cfi_def_cfa_offset 16
 866 0004 00AF     		add	r7, sp, #0
 867              		.cfi_def_cfa_register 7
 868 0006 7860     		str	r0, [r7, #4]
 869 0008 0A1C     		mov	r2, r1
 870 000a BB1C     		add	r3, r7, #2
 871 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 872              		.loc 1 657 0
 873 000e 7B68     		ldr	r3, [r7, #4]
 874 0010 012B     		cmp	r3, #1
 875 0012 02D9     		bls	.L59
 876              		.loc 1 657 0 is_stmt 0 discriminator 1
 877 0014 0020     		mov	r0, #0
 878 0016 FFF7FEFF 		bl	CyHalt
 879              	.L59:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 28


 658:.\Generated_Source\PSoC4/ADC.c **** 
 659:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 880              		.loc 1 659 0 is_stmt 1
 881 001a 044B     		ldr	r3, .L60
 882 001c 7A68     		ldr	r2, [r7, #4]
 883 001e 5200     		lsl	r2, r2, #1
 884 0020 B91C     		add	r1, r7, #2
 885 0022 0988     		ldrh	r1, [r1]
 886 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC.c **** }
 887              		.loc 1 660 0
 888 0026 BD46     		mov	sp, r7
 889 0028 02B0     		add	sp, sp, #8
 890              		@ sp needed
 891 002a 80BD     		pop	{r7, pc}
 892              	.L61:
 893              		.align	2
 894              	.L60:
 895 002c 00000000 		.word	ADC_offset
 896              		.cfi_endproc
 897              	.LFE13:
 898              		.size	ADC_SetOffset, .-ADC_SetOffset
 899              		.section	.text.ADC_SetGain,"ax",%progbits
 900              		.align	2
 901              		.global	ADC_SetGain
 902              		.code	16
 903              		.thumb_func
 904              		.type	ADC_SetGain, %function
 905              	ADC_SetGain:
 906              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c **** 
 663:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 665:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC.c **** *
 667:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC.c **** *
 676:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC.c **** *
 680:.\Generated_Source\PSoC4/ADC.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC.c **** *
 687:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 29


 688:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC.c **** {
 907              		.loc 1 689 0
 908              		.cfi_startproc
 909 0000 80B5     		push	{r7, lr}
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 7, -8
 912              		.cfi_offset 14, -4
 913 0002 82B0     		sub	sp, sp, #8
 914              		.cfi_def_cfa_offset 16
 915 0004 00AF     		add	r7, sp, #0
 916              		.cfi_def_cfa_register 7
 917 0006 7860     		str	r0, [r7, #4]
 918 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 919              		.loc 1 691 0
 920 000a 7B68     		ldr	r3, [r7, #4]
 921 000c 012B     		cmp	r3, #1
 922 000e 02D9     		bls	.L63
 923              		.loc 1 691 0 is_stmt 0 discriminator 1
 924 0010 0020     		mov	r0, #0
 925 0012 FFF7FEFF 		bl	CyHalt
 926              	.L63:
 692:.\Generated_Source\PSoC4/ADC.c **** 
 693:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 927              		.loc 1 693 0 is_stmt 1
 928 0016 044B     		ldr	r3, .L64
 929 0018 7A68     		ldr	r2, [r7, #4]
 930 001a 9200     		lsl	r2, r2, #2
 931 001c 3968     		ldr	r1, [r7]
 932 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC.c **** }
 933              		.loc 1 694 0
 934 0020 BD46     		mov	sp, r7
 935 0022 02B0     		add	sp, sp, #8
 936              		@ sp needed
 937 0024 80BD     		pop	{r7, pc}
 938              	.L65:
 939 0026 C046     		.align	2
 940              	.L64:
 941 0028 00000000 		.word	ADC_countsPer10Volt
 942              		.cfi_endproc
 943              	.LFE14:
 944              		.size	ADC_SetGain, .-ADC_SetGain
 945              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 946              		.align	2
 947              		.global	ADC_CountsTo_mVolts
 948              		.code	16
 949              		.thumb_func
 950              		.type	ADC_CountsTo_mVolts, %function
 951              	ADC_CountsTo_mVolts:
 952              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 698:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 30


 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC.c ****     *
 704:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC.c ****     *
 708:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC.c ****     *
 712:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC.c ****     *
 720:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC.c ****     {
 953              		.loc 1 722 0
 954              		.cfi_startproc
 955 0000 80B5     		push	{r7, lr}
 956              		.cfi_def_cfa_offset 8
 957              		.cfi_offset 7, -8
 958              		.cfi_offset 14, -4
 959 0002 84B0     		sub	sp, sp, #16
 960              		.cfi_def_cfa_offset 24
 961 0004 00AF     		add	r7, sp, #0
 962              		.cfi_def_cfa_register 7
 963 0006 7860     		str	r0, [r7, #4]
 964 0008 0A1C     		mov	r2, r1
 965 000a BB1C     		add	r3, r7, #2
 966 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC.c **** 
 725:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 967              		.loc 1 726 0
 968 000e 7B68     		ldr	r3, [r7, #4]
 969 0010 012B     		cmp	r3, #1
 970 0012 02D9     		bls	.L67
 971              		.loc 1 726 0 is_stmt 0 discriminator 1
 972 0014 0020     		mov	r0, #0
 973 0016 FFF7FEFF 		bl	CyHalt
 974              	.L67:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC.c ****             {
 732:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC.c ****             }
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 31


 734:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 975              		.loc 1 737 0 is_stmt 1
 976 001a BB1C     		add	r3, r7, #2
 977 001c 1A88     		ldrh	r2, [r3]
 978 001e 1E4B     		ldr	r3, .L73
 979 0020 7968     		ldr	r1, [r7, #4]
 980 0022 4900     		lsl	r1, r1, #1
 981 0024 CB5A     		ldrh	r3, [r1, r3]
 982 0026 9BB2     		uxth	r3, r3
 983 0028 9BB2     		uxth	r3, r3
 984 002a D31A     		sub	r3, r2, r3
 985 002c 9AB2     		uxth	r2, r3
 986 002e BB1C     		add	r3, r7, #2
 987 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 988              		.loc 1 739 0
 989 0032 BB1C     		add	r3, r7, #2
 990 0034 0021     		mov	r1, #0
 991 0036 5B5E     		ldrsh	r3, [r3, r1]
 992 0038 184A     		ldr	r2, .L73+4
 993 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 994              		.loc 1 740 0
 995 003c BB1C     		add	r3, r7, #2
 996 003e 0021     		mov	r1, #0
 997 0040 5B5E     		ldrsh	r3, [r3, r1]
 998 0042 002B     		cmp	r3, #0
 999 0044 08DD     		ble	.L68
 1000              		.loc 1 740 0 is_stmt 0 discriminator 1
 1001 0046 164B     		ldr	r3, .L73+8
 1002 0048 7968     		ldr	r1, [r7, #4]
 1003 004a 8900     		lsl	r1, r1, #2
 1004 004c CB58     		ldr	r3, [r1, r3]
 1005 004e 002B     		cmp	r3, #0
 1006 0050 00DA     		bge	.L69
 1007 0052 0133     		add	r3, r3, #1
 1008              	.L69:
 1009 0054 5B10     		asr	r3, r3, #1
 1010 0056 08E0     		b	.L70
 1011              	.L68:
 1012              		.loc 1 740 0 discriminator 2
 1013 0058 114B     		ldr	r3, .L73+8
 1014 005a 7968     		ldr	r1, [r7, #4]
 1015 005c 8900     		lsl	r1, r1, #2
 1016 005e CB58     		ldr	r3, [r1, r3]
 1017 0060 002B     		cmp	r3, #0
 1018 0062 00DA     		bge	.L71
 1019 0064 0133     		add	r3, r3, #1
 1020              	.L71:
 1021 0066 5B10     		asr	r3, r3, #1
 1022 0068 5B42     		neg	r3, r3
 1023              	.L70:
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 32


 1024              		.loc 1 739 0 is_stmt 1
 1025 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1026              		.loc 1 741 0
 1027 006c 0C4B     		ldr	r3, .L73+8
 1028 006e 7968     		ldr	r1, [r7, #4]
 1029 0070 8900     		lsl	r1, r1, #2
 1030 0072 CB58     		ldr	r3, [r1, r3]
 1031 0074 101C     		mov	r0, r2
 1032 0076 191C     		mov	r1, r3
 1033 0078 FFF7FEFF 		bl	__aeabi_idiv
 1034 007c 031C     		mov	r3, r0
 1035 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1036              		.loc 1 739 0
 1037 0080 3B1C     		mov	r3, r7
 1038 0082 0E33     		add	r3, r3, #14
 1039 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC.c **** 
 743:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1040              		.loc 1 743 0
 1041 0086 3B1C     		mov	r3, r7
 1042 0088 0E33     		add	r3, r3, #14
 1043 008a 1B88     		ldrh	r3, [r3]
 1044 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC.c ****     }
 1045              		.loc 1 744 0
 1046 008e 181C     		mov	r0, r3
 1047 0090 BD46     		mov	sp, r7
 1048 0092 04B0     		add	sp, sp, #16
 1049              		@ sp needed
 1050 0094 80BD     		pop	{r7, pc}
 1051              	.L74:
 1052 0096 C046     		.align	2
 1053              	.L73:
 1054 0098 00000000 		.word	ADC_offset
 1055 009c 10270000 		.word	10000
 1056 00a0 00000000 		.word	ADC_countsPer10Volt
 1057              		.cfi_endproc
 1058              	.LFE15:
 1059              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1060              		.global	__aeabi_lmul
 1061              		.global	__aeabi_ldivmod
 1062              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1063              		.align	2
 1064              		.global	ADC_CountsTo_uVolts
 1065              		.code	16
 1066              		.thumb_func
 1067              		.type	ADC_CountsTo_uVolts, %function
 1068              	ADC_CountsTo_uVolts:
 1069              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c **** 
 747:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 33


 751:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC.c ****     *
 759:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC.c ****     *
 767:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC.c ****     *
 774:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC.c ****     {
 1070              		.loc 1 776 0
 1071              		.cfi_startproc
 1072 0000 B0B5     		push	{r4, r5, r7, lr}
 1073              		.cfi_def_cfa_offset 16
 1074              		.cfi_offset 4, -16
 1075              		.cfi_offset 5, -12
 1076              		.cfi_offset 7, -8
 1077              		.cfi_offset 14, -4
 1078 0002 86B0     		sub	sp, sp, #24
 1079              		.cfi_def_cfa_offset 40
 1080 0004 00AF     		add	r7, sp, #0
 1081              		.cfi_def_cfa_register 7
 1082 0006 F860     		str	r0, [r7, #12]
 1083 0008 0A1C     		mov	r2, r1
 1084 000a 3B1C     		mov	r3, r7
 1085 000c 0A33     		add	r3, r3, #10
 1086 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1087              		.loc 1 780 0
 1088 0010 FB68     		ldr	r3, [r7, #12]
 1089 0012 012B     		cmp	r3, #1
 1090 0014 02D9     		bls	.L76
 1091              		.loc 1 780 0 is_stmt 0 discriminator 1
 1092 0016 0020     		mov	r0, #0
 1093 0018 FFF7FEFF 		bl	CyHalt
 1094              	.L76:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 34


 783:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC.c ****             {
 786:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC.c ****             }
 788:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC.c **** 
 790:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1095              		.loc 1 791 0 is_stmt 1
 1096 001c 3B1C     		mov	r3, r7
 1097 001e 0A33     		add	r3, r3, #10
 1098 0020 1A88     		ldrh	r2, [r3]
 1099 0022 1B4B     		ldr	r3, .L78+8
 1100 0024 F968     		ldr	r1, [r7, #12]
 1101 0026 4900     		lsl	r1, r1, #1
 1102 0028 CB5A     		ldrh	r3, [r1, r3]
 1103 002a 9BB2     		uxth	r3, r3
 1104 002c 9BB2     		uxth	r3, r3
 1105 002e D31A     		sub	r3, r2, r3
 1106 0030 9AB2     		uxth	r2, r3
 1107 0032 3B1C     		mov	r3, r7
 1108 0034 0A33     		add	r3, r3, #10
 1109 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1110              		.loc 1 793 0
 1111 0038 3B1C     		mov	r3, r7
 1112 003a 0A33     		add	r3, r3, #10
 1113 003c 1B88     		ldrh	r3, [r3]
 1114 003e 1BB2     		sxth	r3, r3
 1115 0040 3B60     		str	r3, [r7]
 1116 0042 DB17     		asr	r3, r3, #31
 1117 0044 7B60     		str	r3, [r7, #4]
 1118 0046 3868     		ldr	r0, [r7]
 1119 0048 7968     		ldr	r1, [r7, #4]
 1120 004a 104B     		ldr	r3, .L78+4
 1121 004c 0E4A     		ldr	r2, .L78
 1122 004e FFF7FEFF 		bl	__aeabi_lmul
 1123 0052 021C     		mov	r2, r0
 1124 0054 0B1C     		mov	r3, r1
 1125 0056 0F49     		ldr	r1, .L78+12
 1126 0058 F868     		ldr	r0, [r7, #12]
 1127 005a 8000     		lsl	r0, r0, #2
 1128 005c 4158     		ldr	r1, [r0, r1]
 1129 005e 0C1C     		mov	r4, r1
 1130 0060 C917     		asr	r1, r1, #31
 1131 0062 0D1C     		mov	r5, r1
 1132 0064 101C     		mov	r0, r2
 1133 0066 191C     		mov	r1, r3
 1134 0068 221C     		mov	r2, r4
 1135 006a 2B1C     		mov	r3, r5
 1136 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1137 0070 031C     		mov	r3, r0
 1138 0072 0C1C     		mov	r4, r1
 1139 0074 3B61     		str	r3, [r7, #16]
 1140 0076 7C61     		str	r4, [r7, #20]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 35


 794:.\Generated_Source\PSoC4/ADC.c **** 
 795:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1141              		.loc 1 795 0
 1142 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC.c ****     }
 1143              		.loc 1 796 0
 1144 007a 181C     		mov	r0, r3
 1145 007c BD46     		mov	sp, r7
 1146 007e 06B0     		add	sp, sp, #24
 1147              		@ sp needed
 1148 0080 B0BD     		pop	{r4, r5, r7, pc}
 1149              	.L79:
 1150 0082 C046C046 		.align	3
 1150      C046
 1151              	.L78:
 1152 0088 80969800 		.word	10000000
 1153 008c 00000000 		.word	0
 1154 0090 00000000 		.word	ADC_offset
 1155 0094 00000000 		.word	ADC_countsPer10Volt
 1156              		.cfi_endproc
 1157              	.LFE16:
 1158              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1159              		.global	__aeabi_i2f
 1160              		.global	__aeabi_fmul
 1161              		.global	__aeabi_fdiv
 1162              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1163              		.align	2
 1164              		.global	ADC_CountsTo_Volts
 1165              		.code	16
 1166              		.thumb_func
 1167              		.type	ADC_CountsTo_Volts, %function
 1168              	ADC_CountsTo_Volts:
 1169              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c **** 
 799:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC.c ****     *
 807:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC.c ****     *
 811:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC.c ****     *
 819:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 36


 821:.\Generated_Source\PSoC4/ADC.c ****     {
 1170              		.loc 1 821 0
 1171              		.cfi_startproc
 1172 0000 90B5     		push	{r4, r7, lr}
 1173              		.cfi_def_cfa_offset 12
 1174              		.cfi_offset 4, -12
 1175              		.cfi_offset 7, -8
 1176              		.cfi_offset 14, -4
 1177 0002 85B0     		sub	sp, sp, #20
 1178              		.cfi_def_cfa_offset 32
 1179 0004 00AF     		add	r7, sp, #0
 1180              		.cfi_def_cfa_register 7
 1181 0006 7860     		str	r0, [r7, #4]
 1182 0008 0A1C     		mov	r2, r1
 1183 000a BB1C     		add	r3, r7, #2
 1184 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC.c **** 
 824:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1185              		.loc 1 825 0
 1186 000e 7B68     		ldr	r3, [r7, #4]
 1187 0010 012B     		cmp	r3, #1
 1188 0012 02D9     		bls	.L81
 1189              		.loc 1 825 0 is_stmt 0 discriminator 1
 1190 0014 0020     		mov	r0, #0
 1191 0016 FFF7FEFF 		bl	CyHalt
 1192              	.L81:
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC.c ****             {
 831:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC.c ****             }
 833:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1193              		.loc 1 836 0 is_stmt 1
 1194 001a BB1C     		add	r3, r7, #2
 1195 001c 1A88     		ldrh	r2, [r3]
 1196 001e 154B     		ldr	r3, .L83
 1197 0020 7968     		ldr	r1, [r7, #4]
 1198 0022 4900     		lsl	r1, r1, #1
 1199 0024 CB5A     		ldrh	r3, [r1, r3]
 1200 0026 9BB2     		uxth	r3, r3
 1201 0028 9BB2     		uxth	r3, r3
 1202 002a D31A     		sub	r3, r2, r3
 1203 002c 9AB2     		uxth	r2, r3
 1204 002e BB1C     		add	r3, r7, #2
 1205 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1206              		.loc 1 838 0
 1207 0032 BB1C     		add	r3, r7, #2
 1208 0034 0022     		mov	r2, #0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 37


 1209 0036 9B5E     		ldrsh	r3, [r3, r2]
 1210 0038 181C     		mov	r0, r3
 1211 003a FFF7FEFF 		bl	__aeabi_i2f
 1212 003e 031C     		add	r3, r0, #0
 1213 0040 181C     		add	r0, r3, #0
 1214 0042 0D49     		ldr	r1, .L83+4
 1215 0044 FFF7FEFF 		bl	__aeabi_fmul
 1216 0048 031C     		add	r3, r0, #0
 1217 004a 1C1C     		add	r4, r3, #0
 1218 004c 0B4B     		ldr	r3, .L83+8
 1219 004e 7A68     		ldr	r2, [r7, #4]
 1220 0050 9200     		lsl	r2, r2, #2
 1221 0052 D358     		ldr	r3, [r2, r3]
 1222 0054 181C     		mov	r0, r3
 1223 0056 FFF7FEFF 		bl	__aeabi_i2f
 1224 005a 031C     		add	r3, r0, #0
 1225 005c 201C     		add	r0, r4, #0
 1226 005e 191C     		add	r1, r3, #0
 1227 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1228 0064 031C     		add	r3, r0, #0
 1229 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC.c **** 
 840:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1230              		.loc 1 840 0
 1231 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC.c ****     }
 1232              		.loc 1 841 0
 1233 006a 181C     		add	r0, r3, #0
 1234 006c BD46     		mov	sp, r7
 1235 006e 05B0     		add	sp, sp, #20
 1236              		@ sp needed
 1237 0070 90BD     		pop	{r4, r7, pc}
 1238              	.L84:
 1239 0072 C046     		.align	2
 1240              	.L83:
 1241 0074 00000000 		.word	ADC_offset
 1242 0078 00002041 		.word	1092616192
 1243 007c 00000000 		.word	ADC_countsPer10Volt
 1244              		.cfi_endproc
 1245              	.LFE17:
 1246              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1247              		.section	.rodata
 1248              		.align	2
 1249              		.type	ADC_InputsPlacement.4717, %object
 1250              		.size	ADC_InputsPlacement.4717, 2
 1251              	ADC_InputsPlacement.4717:
 1252 0008 13       		.byte	19
 1253 0009 00       		.byte	0
 1254 000a 0000     		.text
 1255              	.Letext0:
 1256              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1257              		.section	.debug_info,"",%progbits
 1258              	.Ldebug_info0:
 1259 0000 96040000 		.4byte	0x496
 1260 0004 0400     		.2byte	0x4
 1261 0006 00000000 		.4byte	.Ldebug_abbrev0
 1262 000a 04       		.byte	0x4
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 38


 1263 000b 01       		.uleb128 0x1
 1264 000c EA010000 		.4byte	.LASF60
 1265 0010 01       		.byte	0x1
 1266 0011 D0020000 		.4byte	.LASF61
 1267 0015 66020000 		.4byte	.LASF62
 1268 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1269 001d 00000000 		.4byte	0
 1270 0021 00000000 		.4byte	.Ldebug_line0
 1271 0025 02       		.uleb128 0x2
 1272 0026 01       		.byte	0x1
 1273 0027 06       		.byte	0x6
 1274 0028 7C000000 		.4byte	.LASF0
 1275 002c 02       		.uleb128 0x2
 1276 002d 01       		.byte	0x1
 1277 002e 08       		.byte	0x8
 1278 002f EF020000 		.4byte	.LASF1
 1279 0033 02       		.uleb128 0x2
 1280 0034 02       		.byte	0x2
 1281 0035 05       		.byte	0x5
 1282 0036 08030000 		.4byte	.LASF2
 1283 003a 02       		.uleb128 0x2
 1284 003b 02       		.byte	0x2
 1285 003c 07       		.byte	0x7
 1286 003d 53010000 		.4byte	.LASF3
 1287 0041 02       		.uleb128 0x2
 1288 0042 04       		.byte	0x4
 1289 0043 05       		.byte	0x5
 1290 0044 9F000000 		.4byte	.LASF4
 1291 0048 02       		.uleb128 0x2
 1292 0049 04       		.byte	0x4
 1293 004a 07       		.byte	0x7
 1294 004b 22010000 		.4byte	.LASF5
 1295 004f 02       		.uleb128 0x2
 1296 0050 08       		.byte	0x8
 1297 0051 05       		.byte	0x5
 1298 0052 6E000000 		.4byte	.LASF6
 1299 0056 02       		.uleb128 0x2
 1300 0057 08       		.byte	0x8
 1301 0058 07       		.byte	0x7
 1302 0059 32000000 		.4byte	.LASF7
 1303 005d 03       		.uleb128 0x3
 1304 005e 04       		.byte	0x4
 1305 005f 05       		.byte	0x5
 1306 0060 696E7400 		.ascii	"int\000"
 1307 0064 02       		.uleb128 0x2
 1308 0065 04       		.byte	0x4
 1309 0066 07       		.byte	0x7
 1310 0067 0E010000 		.4byte	.LASF8
 1311 006b 04       		.uleb128 0x4
 1312 006c D0000000 		.4byte	.LASF9
 1313 0070 02       		.byte	0x2
 1314 0071 A1       		.byte	0xa1
 1315 0072 2C000000 		.4byte	0x2c
 1316 0076 04       		.uleb128 0x4
 1317 0077 00000000 		.4byte	.LASF10
 1318 007b 02       		.byte	0x2
 1319 007c A2       		.byte	0xa2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 39


 1320 007d 3A000000 		.4byte	0x3a
 1321 0081 04       		.uleb128 0x4
 1322 0082 DD000000 		.4byte	.LASF11
 1323 0086 02       		.byte	0x2
 1324 0087 A3       		.byte	0xa3
 1325 0088 48000000 		.4byte	0x48
 1326 008c 04       		.uleb128 0x4
 1327 008d 64030000 		.4byte	.LASF12
 1328 0091 02       		.byte	0x2
 1329 0092 A5       		.byte	0xa5
 1330 0093 33000000 		.4byte	0x33
 1331 0097 04       		.uleb128 0x4
 1332 0098 8F000000 		.4byte	.LASF13
 1333 009c 02       		.byte	0x2
 1334 009d A6       		.byte	0xa6
 1335 009e 41000000 		.4byte	0x41
 1336 00a2 04       		.uleb128 0x4
 1337 00a3 83010000 		.4byte	.LASF14
 1338 00a7 02       		.byte	0x2
 1339 00a8 A7       		.byte	0xa7
 1340 00a9 AD000000 		.4byte	0xad
 1341 00ad 02       		.uleb128 0x2
 1342 00ae 04       		.byte	0x4
 1343 00af 04       		.byte	0x4
 1344 00b0 E4010000 		.4byte	.LASF15
 1345 00b4 02       		.uleb128 0x2
 1346 00b5 08       		.byte	0x8
 1347 00b6 04       		.byte	0x4
 1348 00b7 D6000000 		.4byte	.LASF16
 1349 00bb 04       		.uleb128 0x4
 1350 00bc C2010000 		.4byte	.LASF17
 1351 00c0 02       		.byte	0x2
 1352 00c1 AC       		.byte	0xac
 1353 00c2 4F000000 		.4byte	0x4f
 1354 00c6 02       		.uleb128 0x2
 1355 00c7 01       		.byte	0x1
 1356 00c8 08       		.byte	0x8
 1357 00c9 26030000 		.4byte	.LASF18
 1358 00cd 05       		.uleb128 0x5
 1359 00ce 7D010000 		.4byte	.LASF19
 1360 00d2 02       		.byte	0x2
 1361 00d3 4D01     		.2byte	0x14d
 1362 00d5 D9000000 		.4byte	0xd9
 1363 00d9 06       		.uleb128 0x6
 1364 00da 81000000 		.4byte	0x81
 1365 00de 02       		.uleb128 0x2
 1366 00df 04       		.byte	0x4
 1367 00e0 07       		.byte	0x7
 1368 00e1 8B010000 		.4byte	.LASF20
 1369 00e5 07       		.uleb128 0x7
 1370 00e6 95000000 		.4byte	.LASF25
 1371 00ea 01       		.byte	0x1
 1372 00eb 3F       		.byte	0x3f
 1373 00ec 00000000 		.4byte	.LFB0
 1374 00f0 24000000 		.4byte	.LFE0-.LFB0
 1375 00f4 01       		.uleb128 0x1
 1376 00f5 9C       		.byte	0x9c
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 40


 1377 00f6 08       		.uleb128 0x8
 1378 00f7 29000000 		.4byte	.LASF36
 1379 00fb 01       		.byte	0x1
 1380 00fc 5E       		.byte	0x5e
 1381 00fd 00000000 		.4byte	.LFB1
 1382 0101 00020000 		.4byte	.LFE1-.LFB1
 1383 0105 01       		.uleb128 0x1
 1384 0106 9C       		.byte	0x9c
 1385 0107 47010000 		.4byte	0x147
 1386 010b 09       		.uleb128 0x9
 1387 010c 1B030000 		.4byte	.LASF21
 1388 0110 01       		.byte	0x1
 1389 0111 60       		.byte	0x60
 1390 0112 81000000 		.4byte	0x81
 1391 0116 02       		.uleb128 0x2
 1392 0117 91       		.byte	0x91
 1393 0118 6C       		.sleb128 -20
 1394 0119 09       		.uleb128 0x9
 1395 011a 49010000 		.4byte	.LASF22
 1396 011e 01       		.byte	0x1
 1397 011f 61       		.byte	0x61
 1398 0120 81000000 		.4byte	0x81
 1399 0124 02       		.uleb128 0x2
 1400 0125 91       		.byte	0x91
 1401 0126 64       		.sleb128 -28
 1402 0127 09       		.uleb128 0x9
 1403 0128 0F000000 		.4byte	.LASF23
 1404 012c 01       		.byte	0x1
 1405 012d 62       		.byte	0x62
 1406 012e 97000000 		.4byte	0x97
 1407 0132 02       		.uleb128 0x2
 1408 0133 91       		.byte	0x91
 1409 0134 68       		.sleb128 -24
 1410 0135 09       		.uleb128 0x9
 1411 0136 49000000 		.4byte	.LASF24
 1412 013a 01       		.byte	0x1
 1413 013b 65       		.byte	0x65
 1414 013c 57010000 		.4byte	0x157
 1415 0140 05       		.uleb128 0x5
 1416 0141 03       		.byte	0x3
 1417 0142 08000000 		.4byte	ADC_InputsPlacement.4717
 1418 0146 00       		.byte	0
 1419 0147 0A       		.uleb128 0xa
 1420 0148 6B000000 		.4byte	0x6b
 1421 014c 57010000 		.4byte	0x157
 1422 0150 0B       		.uleb128 0xb
 1423 0151 DE000000 		.4byte	0xde
 1424 0155 01       		.byte	0x1
 1425 0156 00       		.byte	0
 1426 0157 0C       		.uleb128 0xc
 1427 0158 47010000 		.4byte	0x147
 1428 015c 0D       		.uleb128 0xd
 1429 015d 4F030000 		.4byte	.LASF26
 1430 0161 01       		.byte	0x1
 1431 0162 2701     		.2byte	0x127
 1432 0164 00000000 		.4byte	.LFB2
 1433 0168 28000000 		.4byte	.LFE2-.LFB2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 41


 1434 016c 01       		.uleb128 0x1
 1435 016d 9C       		.byte	0x9c
 1436 016e 0E       		.uleb128 0xe
 1437 016f 12030000 		.4byte	.LASF27
 1438 0173 01       		.byte	0x1
 1439 0174 4A01     		.2byte	0x14a
 1440 0176 00000000 		.4byte	.LFB3
 1441 017a 18000000 		.4byte	.LFE3-.LFB3
 1442 017e 01       		.uleb128 0x1
 1443 017f 9C       		.byte	0x9c
 1444 0180 0E       		.uleb128 0xe
 1445 0181 5D000000 		.4byte	.LASF28
 1446 0185 01       		.byte	0x1
 1447 0186 6401     		.2byte	0x164
 1448 0188 00000000 		.4byte	.LFB4
 1449 018c 1C000000 		.4byte	.LFE4-.LFB4
 1450 0190 01       		.uleb128 0x1
 1451 0191 9C       		.byte	0x9c
 1452 0192 0E       		.uleb128 0xe
 1453 0193 66010000 		.4byte	.LASF29
 1454 0197 01       		.byte	0x1
 1455 0198 7D01     		.2byte	0x17d
 1456 019a 00000000 		.4byte	.LFB5
 1457 019e 1C000000 		.4byte	.LFE5-.LFB5
 1458 01a2 01       		.uleb128 0x1
 1459 01a3 9C       		.byte	0x9c
 1460 01a4 0F       		.uleb128 0xf
 1461 01a5 AE010000 		.4byte	.LASF31
 1462 01a9 01       		.byte	0x1
 1463 01aa 9F01     		.2byte	0x19f
 1464 01ac 81000000 		.4byte	0x81
 1465 01b0 00000000 		.4byte	.LFB6
 1466 01b4 48000000 		.4byte	.LFE6-.LFB6
 1467 01b8 01       		.uleb128 0x1
 1468 01b9 9C       		.byte	0x9c
 1469 01ba DD010000 		.4byte	0x1dd
 1470 01be 10       		.uleb128 0x10
 1471 01bf F5000000 		.4byte	.LASF33
 1472 01c3 01       		.byte	0x1
 1473 01c4 9F01     		.2byte	0x19f
 1474 01c6 81000000 		.4byte	0x81
 1475 01ca 02       		.uleb128 0x2
 1476 01cb 91       		.byte	0x91
 1477 01cc 6C       		.sleb128 -20
 1478 01cd 11       		.uleb128 0x11
 1479 01ce 88000000 		.4byte	.LASF30
 1480 01d2 01       		.byte	0x1
 1481 01d3 A101     		.2byte	0x1a1
 1482 01d5 81000000 		.4byte	0x81
 1483 01d9 02       		.uleb128 0x2
 1484 01da 91       		.byte	0x91
 1485 01db 74       		.sleb128 -12
 1486 01dc 00       		.byte	0
 1487 01dd 12       		.uleb128 0x12
 1488 01de 7F030000 		.4byte	.LASF32
 1489 01e2 01       		.byte	0x1
 1490 01e3 D501     		.2byte	0x1d5
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 42


 1491 01e5 8C000000 		.4byte	0x8c
 1492 01e9 00000000 		.4byte	.LFB7
 1493 01ed 44000000 		.4byte	.LFE7-.LFB7
 1494 01f1 01       		.uleb128 0x1
 1495 01f2 9C       		.byte	0x9c
 1496 01f3 16020000 		.4byte	0x216
 1497 01f7 10       		.uleb128 0x10
 1498 01f8 21030000 		.4byte	.LASF34
 1499 01fc 01       		.byte	0x1
 1500 01fd D501     		.2byte	0x1d5
 1501 01ff 81000000 		.4byte	0x81
 1502 0203 02       		.uleb128 0x2
 1503 0204 91       		.byte	0x91
 1504 0205 6C       		.sleb128 -20
 1505 0206 11       		.uleb128 0x11
 1506 0207 78030000 		.4byte	.LASF35
 1507 020b 01       		.byte	0x1
 1508 020c D701     		.2byte	0x1d7
 1509 020e 81000000 		.4byte	0x81
 1510 0212 02       		.uleb128 0x2
 1511 0213 91       		.byte	0x91
 1512 0214 74       		.sleb128 -12
 1513 0215 00       		.byte	0
 1514 0216 13       		.uleb128 0x13
 1515 0217 C8010000 		.4byte	.LASF37
 1516 021b 01       		.byte	0x1
 1517 021c 0202     		.2byte	0x202
 1518 021e 00000000 		.4byte	.LFB8
 1519 0222 1C000000 		.4byte	.LFE8-.LFB8
 1520 0226 01       		.uleb128 0x1
 1521 0227 9C       		.byte	0x9c
 1522 0228 3C020000 		.4byte	0x23c
 1523 022c 10       		.uleb128 0x10
 1524 022d E4000000 		.4byte	.LASF38
 1525 0231 01       		.byte	0x1
 1526 0232 0202     		.2byte	0x202
 1527 0234 81000000 		.4byte	0x81
 1528 0238 02       		.uleb128 0x2
 1529 0239 91       		.byte	0x91
 1530 023a 74       		.sleb128 -12
 1531 023b 00       		.byte	0
 1532 023c 13       		.uleb128 0x13
 1533 023d C0020000 		.4byte	.LASF39
 1534 0241 01       		.byte	0x1
 1535 0242 2E02     		.2byte	0x22e
 1536 0244 00000000 		.4byte	.LFB9
 1537 0248 30000000 		.4byte	.LFE9-.LFB9
 1538 024c 01       		.uleb128 0x1
 1539 024d 9C       		.byte	0x9c
 1540 024e 62020000 		.4byte	0x262
 1541 0252 10       		.uleb128 0x10
 1542 0253 94010000 		.4byte	.LASF40
 1543 0257 01       		.byte	0x1
 1544 0258 2E02     		.2byte	0x22e
 1545 025a 81000000 		.4byte	0x81
 1546 025e 02       		.uleb128 0x2
 1547 025f 91       		.byte	0x91
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 43


 1548 0260 74       		.sleb128 -12
 1549 0261 00       		.byte	0
 1550 0262 13       		.uleb128 0x13
 1551 0263 9D010000 		.4byte	.LASF41
 1552 0267 01       		.byte	0x1
 1553 0268 4302     		.2byte	0x243
 1554 026a 00000000 		.4byte	.LFB10
 1555 026e 2C000000 		.4byte	.LFE10-.LFB10
 1556 0272 01       		.uleb128 0x1
 1557 0273 9C       		.byte	0x9c
 1558 0274 88020000 		.4byte	0x288
 1559 0278 10       		.uleb128 0x10
 1560 0279 5A030000 		.4byte	.LASF42
 1561 027d 01       		.byte	0x1
 1562 027e 4302     		.2byte	0x243
 1563 0280 81000000 		.4byte	0x81
 1564 0284 02       		.uleb128 0x2
 1565 0285 91       		.byte	0x91
 1566 0286 74       		.sleb128 -12
 1567 0287 00       		.byte	0
 1568 0288 13       		.uleb128 0x13
 1569 0289 FD000000 		.4byte	.LASF43
 1570 028d 01       		.byte	0x1
 1571 028e 5B02     		.2byte	0x25b
 1572 0290 00000000 		.4byte	.LFB11
 1573 0294 1C000000 		.4byte	.LFE11-.LFB11
 1574 0298 01       		.uleb128 0x1
 1575 0299 9C       		.byte	0x9c
 1576 029a AE020000 		.4byte	0x2ae
 1577 029e 10       		.uleb128 0x10
 1578 029f E4000000 		.4byte	.LASF38
 1579 02a3 01       		.byte	0x1
 1580 02a4 5B02     		.2byte	0x25b
 1581 02a6 81000000 		.4byte	0x81
 1582 02aa 02       		.uleb128 0x2
 1583 02ab 91       		.byte	0x91
 1584 02ac 74       		.sleb128 -12
 1585 02ad 00       		.byte	0
 1586 02ae 13       		.uleb128 0x13
 1587 02af 34010000 		.4byte	.LASF44
 1588 02b3 01       		.byte	0x1
 1589 02b4 7202     		.2byte	0x272
 1590 02b6 00000000 		.4byte	.LFB12
 1591 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1592 02be 01       		.uleb128 0x1
 1593 02bf 9C       		.byte	0x9c
 1594 02c0 D4020000 		.4byte	0x2d4
 1595 02c4 10       		.uleb128 0x10
 1596 02c5 E4000000 		.4byte	.LASF38
 1597 02c9 01       		.byte	0x1
 1598 02ca 7202     		.2byte	0x272
 1599 02cc 81000000 		.4byte	0x81
 1600 02d0 02       		.uleb128 0x2
 1601 02d1 91       		.byte	0x91
 1602 02d2 74       		.sleb128 -12
 1603 02d3 00       		.byte	0
 1604 02d4 14       		.uleb128 0x14
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 44


 1605 02d5 6A030000 		.4byte	.LASF45
 1606 02d9 01       		.byte	0x1
 1607 02da 8E02     		.2byte	0x28e
 1608 02dc 00000000 		.4byte	.LFB13
 1609 02e0 30000000 		.4byte	.LFE13-.LFB13
 1610 02e4 01       		.uleb128 0x1
 1611 02e5 9C       		.byte	0x9c
 1612 02e6 09030000 		.4byte	0x309
 1613 02ea 10       		.uleb128 0x10
 1614 02eb 21030000 		.4byte	.LASF34
 1615 02ef 01       		.byte	0x1
 1616 02f0 8E02     		.2byte	0x28e
 1617 02f2 81000000 		.4byte	0x81
 1618 02f6 02       		.uleb128 0x2
 1619 02f7 91       		.byte	0x91
 1620 02f8 74       		.sleb128 -12
 1621 02f9 10       		.uleb128 0x10
 1622 02fa 3E030000 		.4byte	.LASF46
 1623 02fe 01       		.byte	0x1
 1624 02ff 8E02     		.2byte	0x28e
 1625 0301 8C000000 		.4byte	0x8c
 1626 0305 02       		.uleb128 0x2
 1627 0306 91       		.byte	0x91
 1628 0307 72       		.sleb128 -14
 1629 0308 00       		.byte	0
 1630 0309 14       		.uleb128 0x14
 1631 030a D8010000 		.4byte	.LASF47
 1632 030e 01       		.byte	0x1
 1633 030f B002     		.2byte	0x2b0
 1634 0311 00000000 		.4byte	.LFB14
 1635 0315 2C000000 		.4byte	.LFE14-.LFB14
 1636 0319 01       		.uleb128 0x1
 1637 031a 9C       		.byte	0x9c
 1638 031b 3E030000 		.4byte	0x33e
 1639 031f 10       		.uleb128 0x10
 1640 0320 21030000 		.4byte	.LASF34
 1641 0324 01       		.byte	0x1
 1642 0325 B002     		.2byte	0x2b0
 1643 0327 81000000 		.4byte	0x81
 1644 032b 02       		.uleb128 0x2
 1645 032c 91       		.byte	0x91
 1646 032d 74       		.sleb128 -12
 1647 032e 10       		.uleb128 0x10
 1648 032f 07000000 		.4byte	.LASF48
 1649 0333 01       		.byte	0x1
 1650 0334 B002     		.2byte	0x2b0
 1651 0336 97000000 		.4byte	0x97
 1652 033a 02       		.uleb128 0x2
 1653 033b 91       		.byte	0x91
 1654 033c 70       		.sleb128 -16
 1655 033d 00       		.byte	0
 1656 033e 12       		.uleb128 0x12
 1657 033f AC020000 		.4byte	.LASF49
 1658 0343 01       		.byte	0x1
 1659 0344 D102     		.2byte	0x2d1
 1660 0346 8C000000 		.4byte	0x8c
 1661 034a 00000000 		.4byte	.LFB15
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 45


 1662 034e A4000000 		.4byte	.LFE15-.LFB15
 1663 0352 01       		.uleb128 0x1
 1664 0353 9C       		.byte	0x9c
 1665 0354 86030000 		.4byte	0x386
 1666 0358 10       		.uleb128 0x10
 1667 0359 21030000 		.4byte	.LASF34
 1668 035d 01       		.byte	0x1
 1669 035e D102     		.2byte	0x2d1
 1670 0360 81000000 		.4byte	0x81
 1671 0364 02       		.uleb128 0x2
 1672 0365 91       		.byte	0x91
 1673 0366 6C       		.sleb128 -20
 1674 0367 10       		.uleb128 0x10
 1675 0368 45030000 		.4byte	.LASF50
 1676 036c 01       		.byte	0x1
 1677 036d D102     		.2byte	0x2d1
 1678 036f 8C000000 		.4byte	0x8c
 1679 0373 02       		.uleb128 0x2
 1680 0374 91       		.byte	0x91
 1681 0375 6A       		.sleb128 -22
 1682 0376 11       		.uleb128 0x11
 1683 0377 76010000 		.4byte	.LASF51
 1684 037b 01       		.byte	0x1
 1685 037c D302     		.2byte	0x2d3
 1686 037e 8C000000 		.4byte	0x8c
 1687 0382 02       		.uleb128 0x2
 1688 0383 91       		.byte	0x91
 1689 0384 76       		.sleb128 -10
 1690 0385 00       		.byte	0
 1691 0386 12       		.uleb128 0x12
 1692 0387 A8000000 		.4byte	.LASF52
 1693 038b 01       		.byte	0x1
 1694 038c 0703     		.2byte	0x307
 1695 038e 97000000 		.4byte	0x97
 1696 0392 00000000 		.4byte	.LFB16
 1697 0396 98000000 		.4byte	.LFE16-.LFB16
 1698 039a 01       		.uleb128 0x1
 1699 039b 9C       		.byte	0x9c
 1700 039c CE030000 		.4byte	0x3ce
 1701 03a0 10       		.uleb128 0x10
 1702 03a1 21030000 		.4byte	.LASF34
 1703 03a5 01       		.byte	0x1
 1704 03a6 0703     		.2byte	0x307
 1705 03a8 81000000 		.4byte	0x81
 1706 03ac 02       		.uleb128 0x2
 1707 03ad 91       		.byte	0x91
 1708 03ae 64       		.sleb128 -28
 1709 03af 10       		.uleb128 0x10
 1710 03b0 45030000 		.4byte	.LASF50
 1711 03b4 01       		.byte	0x1
 1712 03b5 0703     		.2byte	0x307
 1713 03b7 8C000000 		.4byte	0x8c
 1714 03bb 02       		.uleb128 0x2
 1715 03bc 91       		.byte	0x91
 1716 03bd 62       		.sleb128 -30
 1717 03be 11       		.uleb128 0x11
 1718 03bf 1B010000 		.4byte	.LASF53
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 46


 1719 03c3 01       		.byte	0x1
 1720 03c4 0903     		.2byte	0x309
 1721 03c6 BB000000 		.4byte	0xbb
 1722 03ca 02       		.uleb128 0x2
 1723 03cb 91       		.byte	0x91
 1724 03cc 68       		.sleb128 -24
 1725 03cd 00       		.byte	0
 1726 03ce 12       		.uleb128 0x12
 1727 03cf 16000000 		.4byte	.LASF54
 1728 03d3 01       		.byte	0x1
 1729 03d4 3403     		.2byte	0x334
 1730 03d6 A2000000 		.4byte	0xa2
 1731 03da 00000000 		.4byte	.LFB17
 1732 03de 80000000 		.4byte	.LFE17-.LFB17
 1733 03e2 01       		.uleb128 0x1
 1734 03e3 9C       		.byte	0x9c
 1735 03e4 16040000 		.4byte	0x416
 1736 03e8 10       		.uleb128 0x10
 1737 03e9 21030000 		.4byte	.LASF34
 1738 03ed 01       		.byte	0x1
 1739 03ee 3403     		.2byte	0x334
 1740 03f0 81000000 		.4byte	0x81
 1741 03f4 02       		.uleb128 0x2
 1742 03f5 91       		.byte	0x91
 1743 03f6 64       		.sleb128 -28
 1744 03f7 10       		.uleb128 0x10
 1745 03f8 45030000 		.4byte	.LASF50
 1746 03fc 01       		.byte	0x1
 1747 03fd 3403     		.2byte	0x334
 1748 03ff 8C000000 		.4byte	0x8c
 1749 0403 02       		.uleb128 0x2
 1750 0404 91       		.byte	0x91
 1751 0405 62       		.sleb128 -30
 1752 0406 11       		.uleb128 0x11
 1753 0407 43010000 		.4byte	.LASF55
 1754 040b 01       		.byte	0x1
 1755 040c 3603     		.2byte	0x336
 1756 040e A2000000 		.4byte	0xa2
 1757 0412 02       		.uleb128 0x2
 1758 0413 91       		.byte	0x91
 1759 0414 6C       		.sleb128 -20
 1760 0415 00       		.byte	0
 1761 0416 0A       		.uleb128 0xa
 1762 0417 81000000 		.4byte	0x81
 1763 041b 26040000 		.4byte	0x426
 1764 041f 0B       		.uleb128 0xb
 1765 0420 DE000000 		.4byte	0xde
 1766 0424 01       		.byte	0x1
 1767 0425 00       		.byte	0
 1768 0426 09       		.uleb128 0x9
 1769 0427 2B030000 		.4byte	.LASF56
 1770 042b 01       		.byte	0x1
 1771 042c 21       		.byte	0x21
 1772 042d 37040000 		.4byte	0x437
 1773 0431 05       		.uleb128 0x5
 1774 0432 03       		.byte	0x3
 1775 0433 00000000 		.4byte	ADC_channelsConfig
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 47


 1776 0437 0C       		.uleb128 0xc
 1777 0438 16040000 		.4byte	0x416
 1778 043c 15       		.uleb128 0x15
 1779 043d E9000000 		.4byte	.LASF57
 1780 0441 01       		.byte	0x1
 1781 0442 18       		.byte	0x18
 1782 0443 6B000000 		.4byte	0x6b
 1783 0447 05       		.uleb128 0x5
 1784 0448 03       		.byte	0x3
 1785 0449 00000000 		.4byte	ADC_initVar
 1786 044d 0A       		.uleb128 0xa
 1787 044e 8C000000 		.4byte	0x8c
 1788 0452 5D040000 		.4byte	0x45d
 1789 0456 0B       		.uleb128 0xb
 1790 0457 DE000000 		.4byte	0xde
 1791 045b 01       		.byte	0x1
 1792 045c 00       		.byte	0
 1793 045d 15       		.uleb128 0x15
 1794 045e FD020000 		.4byte	.LASF58
 1795 0462 01       		.byte	0x1
 1796 0463 19       		.byte	0x19
 1797 0464 6E040000 		.4byte	0x46e
 1798 0468 05       		.uleb128 0x5
 1799 0469 03       		.byte	0x3
 1800 046a 00000000 		.4byte	ADC_offset
 1801 046e 06       		.uleb128 0x6
 1802 046f 4D040000 		.4byte	0x44d
 1803 0473 0A       		.uleb128 0xa
 1804 0474 97000000 		.4byte	0x97
 1805 0478 83040000 		.4byte	0x483
 1806 047c 0B       		.uleb128 0xb
 1807 047d DE000000 		.4byte	0xde
 1808 0481 01       		.byte	0x1
 1809 0482 00       		.byte	0
 1810 0483 15       		.uleb128 0x15
 1811 0484 BC000000 		.4byte	.LASF59
 1812 0488 01       		.byte	0x1
 1813 0489 1A       		.byte	0x1a
 1814 048a 94040000 		.4byte	0x494
 1815 048e 05       		.uleb128 0x5
 1816 048f 03       		.byte	0x3
 1817 0490 00000000 		.4byte	ADC_countsPer10Volt
 1818 0494 06       		.uleb128 0x6
 1819 0495 73040000 		.4byte	0x473
 1820 0499 00       		.byte	0
 1821              		.section	.debug_abbrev,"",%progbits
 1822              	.Ldebug_abbrev0:
 1823 0000 01       		.uleb128 0x1
 1824 0001 11       		.uleb128 0x11
 1825 0002 01       		.byte	0x1
 1826 0003 25       		.uleb128 0x25
 1827 0004 0E       		.uleb128 0xe
 1828 0005 13       		.uleb128 0x13
 1829 0006 0B       		.uleb128 0xb
 1830 0007 03       		.uleb128 0x3
 1831 0008 0E       		.uleb128 0xe
 1832 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 48


 1833 000a 0E       		.uleb128 0xe
 1834 000b 55       		.uleb128 0x55
 1835 000c 17       		.uleb128 0x17
 1836 000d 11       		.uleb128 0x11
 1837 000e 01       		.uleb128 0x1
 1838 000f 10       		.uleb128 0x10
 1839 0010 17       		.uleb128 0x17
 1840 0011 00       		.byte	0
 1841 0012 00       		.byte	0
 1842 0013 02       		.uleb128 0x2
 1843 0014 24       		.uleb128 0x24
 1844 0015 00       		.byte	0
 1845 0016 0B       		.uleb128 0xb
 1846 0017 0B       		.uleb128 0xb
 1847 0018 3E       		.uleb128 0x3e
 1848 0019 0B       		.uleb128 0xb
 1849 001a 03       		.uleb128 0x3
 1850 001b 0E       		.uleb128 0xe
 1851 001c 00       		.byte	0
 1852 001d 00       		.byte	0
 1853 001e 03       		.uleb128 0x3
 1854 001f 24       		.uleb128 0x24
 1855 0020 00       		.byte	0
 1856 0021 0B       		.uleb128 0xb
 1857 0022 0B       		.uleb128 0xb
 1858 0023 3E       		.uleb128 0x3e
 1859 0024 0B       		.uleb128 0xb
 1860 0025 03       		.uleb128 0x3
 1861 0026 08       		.uleb128 0x8
 1862 0027 00       		.byte	0
 1863 0028 00       		.byte	0
 1864 0029 04       		.uleb128 0x4
 1865 002a 16       		.uleb128 0x16
 1866 002b 00       		.byte	0
 1867 002c 03       		.uleb128 0x3
 1868 002d 0E       		.uleb128 0xe
 1869 002e 3A       		.uleb128 0x3a
 1870 002f 0B       		.uleb128 0xb
 1871 0030 3B       		.uleb128 0x3b
 1872 0031 0B       		.uleb128 0xb
 1873 0032 49       		.uleb128 0x49
 1874 0033 13       		.uleb128 0x13
 1875 0034 00       		.byte	0
 1876 0035 00       		.byte	0
 1877 0036 05       		.uleb128 0x5
 1878 0037 16       		.uleb128 0x16
 1879 0038 00       		.byte	0
 1880 0039 03       		.uleb128 0x3
 1881 003a 0E       		.uleb128 0xe
 1882 003b 3A       		.uleb128 0x3a
 1883 003c 0B       		.uleb128 0xb
 1884 003d 3B       		.uleb128 0x3b
 1885 003e 05       		.uleb128 0x5
 1886 003f 49       		.uleb128 0x49
 1887 0040 13       		.uleb128 0x13
 1888 0041 00       		.byte	0
 1889 0042 00       		.byte	0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 49


 1890 0043 06       		.uleb128 0x6
 1891 0044 35       		.uleb128 0x35
 1892 0045 00       		.byte	0
 1893 0046 49       		.uleb128 0x49
 1894 0047 13       		.uleb128 0x13
 1895 0048 00       		.byte	0
 1896 0049 00       		.byte	0
 1897 004a 07       		.uleb128 0x7
 1898 004b 2E       		.uleb128 0x2e
 1899 004c 00       		.byte	0
 1900 004d 3F       		.uleb128 0x3f
 1901 004e 19       		.uleb128 0x19
 1902 004f 03       		.uleb128 0x3
 1903 0050 0E       		.uleb128 0xe
 1904 0051 3A       		.uleb128 0x3a
 1905 0052 0B       		.uleb128 0xb
 1906 0053 3B       		.uleb128 0x3b
 1907 0054 0B       		.uleb128 0xb
 1908 0055 27       		.uleb128 0x27
 1909 0056 19       		.uleb128 0x19
 1910 0057 11       		.uleb128 0x11
 1911 0058 01       		.uleb128 0x1
 1912 0059 12       		.uleb128 0x12
 1913 005a 06       		.uleb128 0x6
 1914 005b 40       		.uleb128 0x40
 1915 005c 18       		.uleb128 0x18
 1916 005d 9642     		.uleb128 0x2116
 1917 005f 19       		.uleb128 0x19
 1918 0060 00       		.byte	0
 1919 0061 00       		.byte	0
 1920 0062 08       		.uleb128 0x8
 1921 0063 2E       		.uleb128 0x2e
 1922 0064 01       		.byte	0x1
 1923 0065 3F       		.uleb128 0x3f
 1924 0066 19       		.uleb128 0x19
 1925 0067 03       		.uleb128 0x3
 1926 0068 0E       		.uleb128 0xe
 1927 0069 3A       		.uleb128 0x3a
 1928 006a 0B       		.uleb128 0xb
 1929 006b 3B       		.uleb128 0x3b
 1930 006c 0B       		.uleb128 0xb
 1931 006d 27       		.uleb128 0x27
 1932 006e 19       		.uleb128 0x19
 1933 006f 11       		.uleb128 0x11
 1934 0070 01       		.uleb128 0x1
 1935 0071 12       		.uleb128 0x12
 1936 0072 06       		.uleb128 0x6
 1937 0073 40       		.uleb128 0x40
 1938 0074 18       		.uleb128 0x18
 1939 0075 9642     		.uleb128 0x2116
 1940 0077 19       		.uleb128 0x19
 1941 0078 01       		.uleb128 0x1
 1942 0079 13       		.uleb128 0x13
 1943 007a 00       		.byte	0
 1944 007b 00       		.byte	0
 1945 007c 09       		.uleb128 0x9
 1946 007d 34       		.uleb128 0x34
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 50


 1947 007e 00       		.byte	0
 1948 007f 03       		.uleb128 0x3
 1949 0080 0E       		.uleb128 0xe
 1950 0081 3A       		.uleb128 0x3a
 1951 0082 0B       		.uleb128 0xb
 1952 0083 3B       		.uleb128 0x3b
 1953 0084 0B       		.uleb128 0xb
 1954 0085 49       		.uleb128 0x49
 1955 0086 13       		.uleb128 0x13
 1956 0087 02       		.uleb128 0x2
 1957 0088 18       		.uleb128 0x18
 1958 0089 00       		.byte	0
 1959 008a 00       		.byte	0
 1960 008b 0A       		.uleb128 0xa
 1961 008c 01       		.uleb128 0x1
 1962 008d 01       		.byte	0x1
 1963 008e 49       		.uleb128 0x49
 1964 008f 13       		.uleb128 0x13
 1965 0090 01       		.uleb128 0x1
 1966 0091 13       		.uleb128 0x13
 1967 0092 00       		.byte	0
 1968 0093 00       		.byte	0
 1969 0094 0B       		.uleb128 0xb
 1970 0095 21       		.uleb128 0x21
 1971 0096 00       		.byte	0
 1972 0097 49       		.uleb128 0x49
 1973 0098 13       		.uleb128 0x13
 1974 0099 2F       		.uleb128 0x2f
 1975 009a 0B       		.uleb128 0xb
 1976 009b 00       		.byte	0
 1977 009c 00       		.byte	0
 1978 009d 0C       		.uleb128 0xc
 1979 009e 26       		.uleb128 0x26
 1980 009f 00       		.byte	0
 1981 00a0 49       		.uleb128 0x49
 1982 00a1 13       		.uleb128 0x13
 1983 00a2 00       		.byte	0
 1984 00a3 00       		.byte	0
 1985 00a4 0D       		.uleb128 0xd
 1986 00a5 2E       		.uleb128 0x2e
 1987 00a6 00       		.byte	0
 1988 00a7 3F       		.uleb128 0x3f
 1989 00a8 19       		.uleb128 0x19
 1990 00a9 03       		.uleb128 0x3
 1991 00aa 0E       		.uleb128 0xe
 1992 00ab 3A       		.uleb128 0x3a
 1993 00ac 0B       		.uleb128 0xb
 1994 00ad 3B       		.uleb128 0x3b
 1995 00ae 05       		.uleb128 0x5
 1996 00af 27       		.uleb128 0x27
 1997 00b0 19       		.uleb128 0x19
 1998 00b1 11       		.uleb128 0x11
 1999 00b2 01       		.uleb128 0x1
 2000 00b3 12       		.uleb128 0x12
 2001 00b4 06       		.uleb128 0x6
 2002 00b5 40       		.uleb128 0x40
 2003 00b6 18       		.uleb128 0x18
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 51


 2004 00b7 9642     		.uleb128 0x2116
 2005 00b9 19       		.uleb128 0x19
 2006 00ba 00       		.byte	0
 2007 00bb 00       		.byte	0
 2008 00bc 0E       		.uleb128 0xe
 2009 00bd 2E       		.uleb128 0x2e
 2010 00be 00       		.byte	0
 2011 00bf 3F       		.uleb128 0x3f
 2012 00c0 19       		.uleb128 0x19
 2013 00c1 03       		.uleb128 0x3
 2014 00c2 0E       		.uleb128 0xe
 2015 00c3 3A       		.uleb128 0x3a
 2016 00c4 0B       		.uleb128 0xb
 2017 00c5 3B       		.uleb128 0x3b
 2018 00c6 05       		.uleb128 0x5
 2019 00c7 27       		.uleb128 0x27
 2020 00c8 19       		.uleb128 0x19
 2021 00c9 11       		.uleb128 0x11
 2022 00ca 01       		.uleb128 0x1
 2023 00cb 12       		.uleb128 0x12
 2024 00cc 06       		.uleb128 0x6
 2025 00cd 40       		.uleb128 0x40
 2026 00ce 18       		.uleb128 0x18
 2027 00cf 9742     		.uleb128 0x2117
 2028 00d1 19       		.uleb128 0x19
 2029 00d2 00       		.byte	0
 2030 00d3 00       		.byte	0
 2031 00d4 0F       		.uleb128 0xf
 2032 00d5 2E       		.uleb128 0x2e
 2033 00d6 01       		.byte	0x1
 2034 00d7 3F       		.uleb128 0x3f
 2035 00d8 19       		.uleb128 0x19
 2036 00d9 03       		.uleb128 0x3
 2037 00da 0E       		.uleb128 0xe
 2038 00db 3A       		.uleb128 0x3a
 2039 00dc 0B       		.uleb128 0xb
 2040 00dd 3B       		.uleb128 0x3b
 2041 00de 05       		.uleb128 0x5
 2042 00df 27       		.uleb128 0x27
 2043 00e0 19       		.uleb128 0x19
 2044 00e1 49       		.uleb128 0x49
 2045 00e2 13       		.uleb128 0x13
 2046 00e3 11       		.uleb128 0x11
 2047 00e4 01       		.uleb128 0x1
 2048 00e5 12       		.uleb128 0x12
 2049 00e6 06       		.uleb128 0x6
 2050 00e7 40       		.uleb128 0x40
 2051 00e8 18       		.uleb128 0x18
 2052 00e9 9742     		.uleb128 0x2117
 2053 00eb 19       		.uleb128 0x19
 2054 00ec 01       		.uleb128 0x1
 2055 00ed 13       		.uleb128 0x13
 2056 00ee 00       		.byte	0
 2057 00ef 00       		.byte	0
 2058 00f0 10       		.uleb128 0x10
 2059 00f1 05       		.uleb128 0x5
 2060 00f2 00       		.byte	0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 52


 2061 00f3 03       		.uleb128 0x3
 2062 00f4 0E       		.uleb128 0xe
 2063 00f5 3A       		.uleb128 0x3a
 2064 00f6 0B       		.uleb128 0xb
 2065 00f7 3B       		.uleb128 0x3b
 2066 00f8 05       		.uleb128 0x5
 2067 00f9 49       		.uleb128 0x49
 2068 00fa 13       		.uleb128 0x13
 2069 00fb 02       		.uleb128 0x2
 2070 00fc 18       		.uleb128 0x18
 2071 00fd 00       		.byte	0
 2072 00fe 00       		.byte	0
 2073 00ff 11       		.uleb128 0x11
 2074 0100 34       		.uleb128 0x34
 2075 0101 00       		.byte	0
 2076 0102 03       		.uleb128 0x3
 2077 0103 0E       		.uleb128 0xe
 2078 0104 3A       		.uleb128 0x3a
 2079 0105 0B       		.uleb128 0xb
 2080 0106 3B       		.uleb128 0x3b
 2081 0107 05       		.uleb128 0x5
 2082 0108 49       		.uleb128 0x49
 2083 0109 13       		.uleb128 0x13
 2084 010a 02       		.uleb128 0x2
 2085 010b 18       		.uleb128 0x18
 2086 010c 00       		.byte	0
 2087 010d 00       		.byte	0
 2088 010e 12       		.uleb128 0x12
 2089 010f 2E       		.uleb128 0x2e
 2090 0110 01       		.byte	0x1
 2091 0111 3F       		.uleb128 0x3f
 2092 0112 19       		.uleb128 0x19
 2093 0113 03       		.uleb128 0x3
 2094 0114 0E       		.uleb128 0xe
 2095 0115 3A       		.uleb128 0x3a
 2096 0116 0B       		.uleb128 0xb
 2097 0117 3B       		.uleb128 0x3b
 2098 0118 05       		.uleb128 0x5
 2099 0119 27       		.uleb128 0x27
 2100 011a 19       		.uleb128 0x19
 2101 011b 49       		.uleb128 0x49
 2102 011c 13       		.uleb128 0x13
 2103 011d 11       		.uleb128 0x11
 2104 011e 01       		.uleb128 0x1
 2105 011f 12       		.uleb128 0x12
 2106 0120 06       		.uleb128 0x6
 2107 0121 40       		.uleb128 0x40
 2108 0122 18       		.uleb128 0x18
 2109 0123 9642     		.uleb128 0x2116
 2110 0125 19       		.uleb128 0x19
 2111 0126 01       		.uleb128 0x1
 2112 0127 13       		.uleb128 0x13
 2113 0128 00       		.byte	0
 2114 0129 00       		.byte	0
 2115 012a 13       		.uleb128 0x13
 2116 012b 2E       		.uleb128 0x2e
 2117 012c 01       		.byte	0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 53


 2118 012d 3F       		.uleb128 0x3f
 2119 012e 19       		.uleb128 0x19
 2120 012f 03       		.uleb128 0x3
 2121 0130 0E       		.uleb128 0xe
 2122 0131 3A       		.uleb128 0x3a
 2123 0132 0B       		.uleb128 0xb
 2124 0133 3B       		.uleb128 0x3b
 2125 0134 05       		.uleb128 0x5
 2126 0135 27       		.uleb128 0x27
 2127 0136 19       		.uleb128 0x19
 2128 0137 11       		.uleb128 0x11
 2129 0138 01       		.uleb128 0x1
 2130 0139 12       		.uleb128 0x12
 2131 013a 06       		.uleb128 0x6
 2132 013b 40       		.uleb128 0x40
 2133 013c 18       		.uleb128 0x18
 2134 013d 9742     		.uleb128 0x2117
 2135 013f 19       		.uleb128 0x19
 2136 0140 01       		.uleb128 0x1
 2137 0141 13       		.uleb128 0x13
 2138 0142 00       		.byte	0
 2139 0143 00       		.byte	0
 2140 0144 14       		.uleb128 0x14
 2141 0145 2E       		.uleb128 0x2e
 2142 0146 01       		.byte	0x1
 2143 0147 3F       		.uleb128 0x3f
 2144 0148 19       		.uleb128 0x19
 2145 0149 03       		.uleb128 0x3
 2146 014a 0E       		.uleb128 0xe
 2147 014b 3A       		.uleb128 0x3a
 2148 014c 0B       		.uleb128 0xb
 2149 014d 3B       		.uleb128 0x3b
 2150 014e 05       		.uleb128 0x5
 2151 014f 27       		.uleb128 0x27
 2152 0150 19       		.uleb128 0x19
 2153 0151 11       		.uleb128 0x11
 2154 0152 01       		.uleb128 0x1
 2155 0153 12       		.uleb128 0x12
 2156 0154 06       		.uleb128 0x6
 2157 0155 40       		.uleb128 0x40
 2158 0156 18       		.uleb128 0x18
 2159 0157 9642     		.uleb128 0x2116
 2160 0159 19       		.uleb128 0x19
 2161 015a 01       		.uleb128 0x1
 2162 015b 13       		.uleb128 0x13
 2163 015c 00       		.byte	0
 2164 015d 00       		.byte	0
 2165 015e 15       		.uleb128 0x15
 2166 015f 34       		.uleb128 0x34
 2167 0160 00       		.byte	0
 2168 0161 03       		.uleb128 0x3
 2169 0162 0E       		.uleb128 0xe
 2170 0163 3A       		.uleb128 0x3a
 2171 0164 0B       		.uleb128 0xb
 2172 0165 3B       		.uleb128 0x3b
 2173 0166 0B       		.uleb128 0xb
 2174 0167 49       		.uleb128 0x49
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 54


 2175 0168 13       		.uleb128 0x13
 2176 0169 3F       		.uleb128 0x3f
 2177 016a 19       		.uleb128 0x19
 2178 016b 02       		.uleb128 0x2
 2179 016c 18       		.uleb128 0x18
 2180 016d 00       		.byte	0
 2181 016e 00       		.byte	0
 2182 016f 00       		.byte	0
 2183              		.section	.debug_aranges,"",%progbits
 2184 0000 A4000000 		.4byte	0xa4
 2185 0004 0200     		.2byte	0x2
 2186 0006 00000000 		.4byte	.Ldebug_info0
 2187 000a 04       		.byte	0x4
 2188 000b 00       		.byte	0
 2189 000c 0000     		.2byte	0
 2190 000e 0000     		.2byte	0
 2191 0010 00000000 		.4byte	.LFB0
 2192 0014 24000000 		.4byte	.LFE0-.LFB0
 2193 0018 00000000 		.4byte	.LFB1
 2194 001c 00020000 		.4byte	.LFE1-.LFB1
 2195 0020 00000000 		.4byte	.LFB2
 2196 0024 28000000 		.4byte	.LFE2-.LFB2
 2197 0028 00000000 		.4byte	.LFB3
 2198 002c 18000000 		.4byte	.LFE3-.LFB3
 2199 0030 00000000 		.4byte	.LFB4
 2200 0034 1C000000 		.4byte	.LFE4-.LFB4
 2201 0038 00000000 		.4byte	.LFB5
 2202 003c 1C000000 		.4byte	.LFE5-.LFB5
 2203 0040 00000000 		.4byte	.LFB6
 2204 0044 48000000 		.4byte	.LFE6-.LFB6
 2205 0048 00000000 		.4byte	.LFB7
 2206 004c 44000000 		.4byte	.LFE7-.LFB7
 2207 0050 00000000 		.4byte	.LFB8
 2208 0054 1C000000 		.4byte	.LFE8-.LFB8
 2209 0058 00000000 		.4byte	.LFB9
 2210 005c 30000000 		.4byte	.LFE9-.LFB9
 2211 0060 00000000 		.4byte	.LFB10
 2212 0064 2C000000 		.4byte	.LFE10-.LFB10
 2213 0068 00000000 		.4byte	.LFB11
 2214 006c 1C000000 		.4byte	.LFE11-.LFB11
 2215 0070 00000000 		.4byte	.LFB12
 2216 0074 1C000000 		.4byte	.LFE12-.LFB12
 2217 0078 00000000 		.4byte	.LFB13
 2218 007c 30000000 		.4byte	.LFE13-.LFB13
 2219 0080 00000000 		.4byte	.LFB14
 2220 0084 2C000000 		.4byte	.LFE14-.LFB14
 2221 0088 00000000 		.4byte	.LFB15
 2222 008c A4000000 		.4byte	.LFE15-.LFB15
 2223 0090 00000000 		.4byte	.LFB16
 2224 0094 98000000 		.4byte	.LFE16-.LFB16
 2225 0098 00000000 		.4byte	.LFB17
 2226 009c 80000000 		.4byte	.LFE17-.LFB17
 2227 00a0 00000000 		.4byte	0
 2228 00a4 00000000 		.4byte	0
 2229              		.section	.debug_ranges,"",%progbits
 2230              	.Ldebug_ranges0:
 2231 0000 00000000 		.4byte	.LFB0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 55


 2232 0004 24000000 		.4byte	.LFE0
 2233 0008 00000000 		.4byte	.LFB1
 2234 000c 00020000 		.4byte	.LFE1
 2235 0010 00000000 		.4byte	.LFB2
 2236 0014 28000000 		.4byte	.LFE2
 2237 0018 00000000 		.4byte	.LFB3
 2238 001c 18000000 		.4byte	.LFE3
 2239 0020 00000000 		.4byte	.LFB4
 2240 0024 1C000000 		.4byte	.LFE4
 2241 0028 00000000 		.4byte	.LFB5
 2242 002c 1C000000 		.4byte	.LFE5
 2243 0030 00000000 		.4byte	.LFB6
 2244 0034 48000000 		.4byte	.LFE6
 2245 0038 00000000 		.4byte	.LFB7
 2246 003c 44000000 		.4byte	.LFE7
 2247 0040 00000000 		.4byte	.LFB8
 2248 0044 1C000000 		.4byte	.LFE8
 2249 0048 00000000 		.4byte	.LFB9
 2250 004c 30000000 		.4byte	.LFE9
 2251 0050 00000000 		.4byte	.LFB10
 2252 0054 2C000000 		.4byte	.LFE10
 2253 0058 00000000 		.4byte	.LFB11
 2254 005c 1C000000 		.4byte	.LFE11
 2255 0060 00000000 		.4byte	.LFB12
 2256 0064 1C000000 		.4byte	.LFE12
 2257 0068 00000000 		.4byte	.LFB13
 2258 006c 30000000 		.4byte	.LFE13
 2259 0070 00000000 		.4byte	.LFB14
 2260 0074 2C000000 		.4byte	.LFE14
 2261 0078 00000000 		.4byte	.LFB15
 2262 007c A4000000 		.4byte	.LFE15
 2263 0080 00000000 		.4byte	.LFB16
 2264 0084 98000000 		.4byte	.LFE16
 2265 0088 00000000 		.4byte	.LFB17
 2266 008c 80000000 		.4byte	.LFE17
 2267 0090 00000000 		.4byte	0
 2268 0094 00000000 		.4byte	0
 2269              		.section	.debug_line,"",%progbits
 2270              	.Ldebug_line0:
 2271 0000 31020000 		.section	.debug_str,"MS",%progbits,1
 2271      02004200 
 2271      00000201 
 2271      FB0E0D00 
 2271      01010101 
 2272              	.LASF10:
 2273 0000 75696E74 		.ascii	"uint16\000"
 2273      313600
 2274              	.LASF48:
 2275 0007 61646347 		.ascii	"adcGain\000"
 2275      61696E00 
 2276              	.LASF23:
 2277 000f 636F756E 		.ascii	"counts\000"
 2277      747300
 2278              	.LASF54:
 2279 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2279      436F756E 
 2279      7473546F 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 56


 2279      5F566F6C 
 2279      747300
 2280              	.LASF36:
 2281 0029 4144435F 		.ascii	"ADC_Init\000"
 2281      496E6974 
 2281      00
 2282              	.LASF7:
 2283 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2283      206C6F6E 
 2283      6720756E 
 2283      7369676E 
 2283      65642069 
 2284              	.LASF24:
 2285 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2285      496E7075 
 2285      7473506C 
 2285      6163656D 
 2285      656E7400 
 2286              	.LASF28:
 2287 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2287      53746172 
 2287      74436F6E 
 2287      76657274 
 2287      00
 2288              	.LASF6:
 2289 006e 6C6F6E67 		.ascii	"long long int\000"
 2289      206C6F6E 
 2289      6720696E 
 2289      7400
 2290              	.LASF0:
 2291 007c 7369676E 		.ascii	"signed char\000"
 2291      65642063 
 2291      68617200 
 2292              	.LASF30:
 2293 0088 73746174 		.ascii	"status\000"
 2293      757300
 2294              	.LASF13:
 2295 008f 696E7433 		.ascii	"int32\000"
 2295      3200
 2296              	.LASF25:
 2297 0095 4144435F 		.ascii	"ADC_Start\000"
 2297      53746172 
 2297      7400
 2298              	.LASF4:
 2299 009f 6C6F6E67 		.ascii	"long int\000"
 2299      20696E74 
 2299      00
 2300              	.LASF52:
 2301 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2301      436F756E 
 2301      7473546F 
 2301      5F75566F 
 2301      6C747300 
 2302              	.LASF59:
 2303 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2303      636F756E 
 2303      74735065 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 57


 2303      72313056 
 2303      6F6C7400 
 2304              	.LASF9:
 2305 00d0 75696E74 		.ascii	"uint8\000"
 2305      3800
 2306              	.LASF16:
 2307 00d6 646F7562 		.ascii	"double\000"
 2307      6C6500
 2308              	.LASF11:
 2309 00dd 75696E74 		.ascii	"uint32\000"
 2309      333200
 2310              	.LASF38:
 2311 00e4 6D61736B 		.ascii	"mask\000"
 2311      00
 2312              	.LASF57:
 2313 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2313      696E6974 
 2313      56617200 
 2314              	.LASF33:
 2315 00f5 7265744D 		.ascii	"retMode\000"
 2315      6F646500 
 2316              	.LASF43:
 2317 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2317      5365744C 
 2317      696D6974 
 2317      4D61736B 
 2317      00
 2318              	.LASF8:
 2319 010e 756E7369 		.ascii	"unsigned int\000"
 2319      676E6564 
 2319      20696E74 
 2319      00
 2320              	.LASF53:
 2321 011b 75566F6C 		.ascii	"uVolts\000"
 2321      747300
 2322              	.LASF5:
 2323 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2323      20756E73 
 2323      69676E65 
 2323      6420696E 
 2323      7400
 2324              	.LASF44:
 2325 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2325      53657453 
 2325      61744D61 
 2325      736B00
 2326              	.LASF55:
 2327 0143 766F6C74 		.ascii	"volts\000"
 2327      7300
 2328              	.LASF22:
 2329 0149 746D7052 		.ascii	"tmpRegVal\000"
 2329      65675661 
 2329      6C00
 2330              	.LASF3:
 2331 0153 73686F72 		.ascii	"short unsigned int\000"
 2331      7420756E 
 2331      7369676E 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 58


 2331      65642069 
 2331      6E7400
 2332              	.LASF29:
 2333 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2333      53746F70 
 2333      436F6E76 
 2333      65727400 
 2334              	.LASF51:
 2335 0176 6D566F6C 		.ascii	"mVolts\000"
 2335      747300
 2336              	.LASF19:
 2337 017d 72656733 		.ascii	"reg32\000"
 2337      3200
 2338              	.LASF14:
 2339 0183 666C6F61 		.ascii	"float32\000"
 2339      74333200 
 2340              	.LASF20:
 2341 018b 73697A65 		.ascii	"sizetype\000"
 2341      74797065 
 2341      00
 2342              	.LASF40:
 2343 0194 6C6F774C 		.ascii	"lowLimit\000"
 2343      696D6974 
 2343      00
 2344              	.LASF41:
 2345 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2345      53657448 
 2345      6967684C 
 2345      696D6974 
 2345      00
 2346              	.LASF31:
 2347 01ae 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2347      4973456E 
 2347      64436F6E 
 2347      76657273 
 2347      696F6E00 
 2348              	.LASF17:
 2349 01c2 696E7436 		.ascii	"int64\000"
 2349      3400
 2350              	.LASF37:
 2351 01c8 4144435F 		.ascii	"ADC_SetChanMask\000"
 2351      53657443 
 2351      68616E4D 
 2351      61736B00 
 2352              	.LASF47:
 2353 01d8 4144435F 		.ascii	"ADC_SetGain\000"
 2353      53657447 
 2353      61696E00 
 2354              	.LASF15:
 2355 01e4 666C6F61 		.ascii	"float\000"
 2355      7400
 2356              	.LASF60:
 2357 01ea 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2357      4320342E 
 2357      382E3420 
 2357      32303134 
 2357      30353236 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 59


 2358 021d 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2358      20726576 
 2358      6973696F 
 2358      6E203231 
 2358      31333538 
 2359 0250 30202D66 		.ascii	"0 -ffunction-sections\000"
 2359      66756E63 
 2359      74696F6E 
 2359      2D736563 
 2359      74696F6E 
 2360              	.LASF62:
 2361 0266 433A5C55 		.ascii	"C:\\Users\\Snufkin\\Documents\\GitHub\\KingFunk2\\C"
 2361      73657273 
 2361      5C536E75 
 2361      666B696E 
 2361      5C446F63 
 2362 0293 52545F74 		.ascii	"RT_timer\\CRT_timer.cydsn\000"
 2362      696D6572 
 2362      5C435254 
 2362      5F74696D 
 2362      65722E63 
 2363              	.LASF49:
 2364 02ac 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2364      436F756E 
 2364      7473546F 
 2364      5F6D566F 
 2364      6C747300 
 2365              	.LASF39:
 2366 02c0 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2366      5365744C 
 2366      6F774C69 
 2366      6D697400 
 2367              	.LASF61:
 2368 02d0 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2368      6E657261 
 2368      7465645F 
 2368      536F7572 
 2368      63655C50 
 2369              	.LASF1:
 2370 02ef 756E7369 		.ascii	"unsigned char\000"
 2370      676E6564 
 2370      20636861 
 2370      7200
 2371              	.LASF58:
 2372 02fd 4144435F 		.ascii	"ADC_offset\000"
 2372      6F666673 
 2372      657400
 2373              	.LASF2:
 2374 0308 73686F72 		.ascii	"short int\000"
 2374      7420696E 
 2374      7400
 2375              	.LASF27:
 2376 0312 4144435F 		.ascii	"ADC_Stop\000"
 2376      53746F70 
 2376      00
 2377              	.LASF21:
 2378 031b 63684E75 		.ascii	"chNum\000"
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccoDCDlZ.s 			page 60


 2378      6D00
 2379              	.LASF34:
 2380 0321 6368616E 		.ascii	"chan\000"
 2380      00
 2381              	.LASF18:
 2382 0326 63686172 		.ascii	"char\000"
 2382      00
 2383              	.LASF56:
 2384 032b 4144435F 		.ascii	"ADC_channelsConfig\000"
 2384      6368616E 
 2384      6E656C73 
 2384      436F6E66 
 2384      696700
 2385              	.LASF46:
 2386 033e 6F666673 		.ascii	"offset\000"
 2386      657400
 2387              	.LASF50:
 2388 0345 61646343 		.ascii	"adcCounts\000"
 2388      6F756E74 
 2388      7300
 2389              	.LASF26:
 2390 034f 4144435F 		.ascii	"ADC_Enable\000"
 2390      456E6162 
 2390      6C6500
 2391              	.LASF42:
 2392 035a 68696768 		.ascii	"highLimit\000"
 2392      4C696D69 
 2392      7400
 2393              	.LASF12:
 2394 0364 696E7431 		.ascii	"int16\000"
 2394      3600
 2395              	.LASF45:
 2396 036a 4144435F 		.ascii	"ADC_SetOffset\000"
 2396      5365744F 
 2396      66667365 
 2396      7400
 2397              	.LASF35:
 2398 0378 72657375 		.ascii	"result\000"
 2398      6C7400
 2399              	.LASF32:
 2400 037f 4144435F 		.ascii	"ADC_GetResult16\000"
 2400      47657452 
 2400      6573756C 
 2400      74313600 
 2401              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
