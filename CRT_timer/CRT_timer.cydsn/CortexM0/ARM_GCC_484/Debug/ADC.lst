ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 00020000 		.word	512
  31 0004 00120000 		.word	4608
  32              		.section	.text.ADC_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_Start, %function
  38              	ADC_Start:
  39              	.LFB0:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.10
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000200u, 0x00001200u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_initVar
  71              		.cfi_endproc
  72              	.LFE0:
  73              		.size	ADC_Start, .-ADC_Start
  74              		.global	__aeabi_idiv
  75              		.section	.text.ADC_Init,"ax",%progbits
  76              		.align	2
  77              		.global	ADC_Init
  78              		.code	16
  79              		.thumb_func
  80              		.type	ADC_Init, %function
  81              	ADC_Init:
  82              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 4


  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  83              		.loc 1 95 0
  84              		.cfi_startproc
  85 0000 90B5     		push	{r4, r7, lr}
  86              		.cfi_def_cfa_offset 12
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 85B0     		sub	sp, sp, #20
  91              		.cfi_def_cfa_offset 32
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 5


 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  94              		.loc 1 140 0
  95 0006 0E20     		mov	r0, #14
  96 0008 0321     		mov	r1, #3
  97 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  98              		.loc 1 141 0
  99 000e 624B     		ldr	r3, .L16
 100 0010 0E20     		mov	r0, #14
 101 0012 191C     		mov	r1, r3
 102 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 103              		.loc 1 145 0
 104 0018 604B     		ldr	r3, .L16+4
 105 001a 0322     		mov	r2, #3
 106 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 107              		.loc 1 146 0
 108 001e 604B     		ldr	r3, .L16+8
 109 0020 5F4A     		ldr	r2, .L16+8
 110 0022 1168     		ldr	r1, [r2]
 147:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 148:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 111              		.loc 1 148 0
 112 0024 5F4A     		ldr	r2, .L16+12
 113 0026 1268     		ldr	r2, [r2]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 146 0
 115 0028 002A     		cmp	r2, #0
 116 002a 01DA     		bge	.L6
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 146 0 is_stmt 0 discriminator 1
 118 002c 5E4A     		ldr	r2, .L16+16
 119 002e 00E0     		b	.L7
 120              	.L6:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 121              		.loc 1 146 0 discriminator 2
 122 0030 5E4A     		ldr	r2, .L16+20
 123              	.L7:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 124              		.loc 1 146 0 discriminator 3
 125 0032 0A43     		orr	r2, r1
 126 0034 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 127              		.loc 1 150 0 is_stmt 1 discriminator 3
 128 0036 5E4B     		ldr	r3, .L16+24
 129 0038 5E4A     		ldr	r2, .L16+28
 130 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 6


 131              		.loc 1 151 0 discriminator 3
 132 003c 5E4B     		ldr	r3, .L16+32
 133 003e 5F4A     		ldr	r2, .L16+36
 134 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 135              		.loc 1 152 0 discriminator 3
 136 0042 5F4B     		ldr	r3, .L16+40
 137 0044 0022     		mov	r2, #0
 138 0046 1A60     		str	r2, [r3]
 153:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 139              		.loc 1 153 0 discriminator 3
 140 0048 5E4B     		ldr	r3, .L16+44
 141 004a 5F4A     		ldr	r2, .L16+48
 142 004c 1A60     		str	r2, [r3]
 154:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 143              		.loc 1 154 0 discriminator 3
 144 004e 5F4B     		ldr	r3, .L16+52
 145 0050 5F4A     		ldr	r2, .L16+56
 146 0052 1A60     		str	r2, [r3]
 155:.\Generated_Source\PSoC4/ADC.c ****     
 156:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 157:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 158:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 147              		.loc 1 158 0 discriminator 3
 148 0054 5F4B     		ldr	r3, .L16+60
 149 0056 5F4A     		ldr	r2, .L16+60
 150 0058 1268     		ldr	r2, [r2]
 151 005a 8021     		mov	r1, #128
 152 005c 4902     		lsl	r1, r1, #9
 153 005e 0A43     		orr	r2, r1
 154 0060 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 160:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 161:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 155              		.loc 1 161 0 discriminator 3
 156 0062 5D4B     		ldr	r3, .L16+64
 157 0064 5C4A     		ldr	r2, .L16+64
 158 0066 1268     		ldr	r2, [r2]
 159 0068 8021     		mov	r1, #128
 160 006a 4902     		lsl	r1, r1, #9
 161 006c 0A43     		orr	r2, r1
 162 006e 1A60     		str	r2, [r3]
 162:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 163:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 164:.\Generated_Source\PSoC4/ADC.c **** 
 165:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 163              		.loc 1 165 0 discriminator 3
 164 0070 5A4B     		ldr	r3, .L16+68
 165 0072 0022     		mov	r2, #0
 166 0074 1A60     		str	r2, [r3]
 166:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 167              		.loc 1 166 0 discriminator 3
 168 0076 5A4B     		ldr	r3, .L16+72
 169 0078 0022     		mov	r2, #0
 170 007a 1A60     		str	r2, [r3]
 167:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 171              		.loc 1 167 0 discriminator 3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 7


 172 007c 594B     		ldr	r3, .L16+76
 173 007e 0122     		mov	r2, #1
 174 0080 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c **** 
 169:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 170:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 175              		.loc 1 170 0 discriminator 3
 176 0082 594B     		ldr	r3, .L16+80
 177 0084 0222     		mov	r2, #2
 178 0086 1A60     		str	r2, [r3]
 171:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 172:.\Generated_Source\PSoC4/ADC.c **** 
 173:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 174:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 179              		.loc 1 174 0 discriminator 3
 180 0088 584B     		ldr	r3, .L16+84
 181 008a 1B68     		ldr	r3, [r3]
 182 008c 7B60     		str	r3, [r7, #4]
 175:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 183              		.loc 1 175 0 discriminator 3
 184 008e 7A68     		ldr	r2, [r7, #4]
 185 0090 574B     		ldr	r3, .L16+88
 186 0092 1340     		and	r3, r2
 187 0094 7B60     		str	r3, [r7, #4]
 176:.\Generated_Source\PSoC4/ADC.c ****     
 177:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 178:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 179:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 180:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 181:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 188              		.loc 1 181 0 discriminator 3
 189 0096 7B68     		ldr	r3, [r7, #4]
 190 0098 0122     		mov	r2, #1
 191 009a 1343     		orr	r3, r2
 192 009c 7B60     		str	r3, [r7, #4]
 182:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 183:.\Generated_Source\PSoC4/ADC.c ****     #else
 184:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 185:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #else
 188:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 189:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 190:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 191:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 192:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 193:.\Generated_Source\PSoC4/ADC.c ****     
 194:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 193              		.loc 1 194 0 discriminator 3
 194 009e 534B     		ldr	r3, .L16+84
 195 00a0 7A68     		ldr	r2, [r7, #4]
 196 00a2 1A60     		str	r2, [r3]
 195:.\Generated_Source\PSoC4/ADC.c **** 
 196:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 197:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 197              		.loc 1 197 0 discriminator 3
 198 00a4 534B     		ldr	r3, .L16+92
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 8


 199 00a6 0222     		mov	r2, #2
 200 00a8 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 199:.\Generated_Source\PSoC4/ADC.c **** 
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 201              		.loc 1 200 0 discriminator 3
 202 00aa 0023     		mov	r3, #0
 203 00ac FB60     		str	r3, [r7, #12]
 204 00ae 6DE0     		b	.L8
 205              	.L15:
 201:.\Generated_Source\PSoC4/ADC.c ****     {
 202:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 206              		.loc 1 202 0
 207 00b0 514B     		ldr	r3, .L16+96
 208 00b2 FA68     		ldr	r2, [r7, #12]
 209 00b4 9200     		lsl	r2, r2, #2
 210 00b6 D258     		ldr	r2, [r2, r3]
 211 00b8 DC23     		mov	r3, #220
 212 00ba 9B01     		lsl	r3, r3, #6
 213 00bc 1340     		and	r3, r2
 214 00be 7B60     		str	r3, [r7, #4]
 203:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 204:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 215              		.loc 1 204 0
 216 00c0 4E4A     		ldr	r2, .L16+100
 217 00c2 FB68     		ldr	r3, [r7, #12]
 218 00c4 D318     		add	r3, r2, r3
 219 00c6 1B78     		ldrb	r3, [r3]
 220 00c8 7A68     		ldr	r2, [r7, #4]
 221 00ca 1343     		orr	r3, r2
 222 00cc 7B60     		str	r3, [r7, #4]
 205:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 206:.\Generated_Source\PSoC4/ADC.c ****         
 207:.\Generated_Source\PSoC4/ADC.c ****         
 208:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 209:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 210:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 211:.\Generated_Source\PSoC4/ADC.c ****         */
 212:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 213:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 214:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 215:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 216:.\Generated_Source\PSoC4/ADC.c **** 
 217:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 218:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 219:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 220:.\Generated_Source\PSoC4/ADC.c ****         {
 221:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 223              		.loc 1 221 0
 224 00ce FB68     		ldr	r3, [r7, #12]
 225 00d0 9B00     		lsl	r3, r3, #2
 226 00d2 4B4A     		ldr	r2, .L16+104
 227 00d4 9B18     		add	r3, r3, r2
 228 00d6 7A68     		ldr	r2, [r7, #4]
 229 00d8 1A60     		str	r2, [r3]
 222:.\Generated_Source\PSoC4/ADC.c **** 
 223:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 9


 230              		.loc 1 223 0
 231 00da 474B     		ldr	r3, .L16+96
 232 00dc FA68     		ldr	r2, [r7, #12]
 233 00de 9200     		lsl	r2, r2, #2
 234 00e0 D258     		ldr	r2, [r2, r3]
 235 00e2 0123     		mov	r3, #1
 236 00e4 1340     		and	r3, r2
 237 00e6 0AD0     		beq	.L9
 224:.\Generated_Source\PSoC4/ADC.c ****             {
 225:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 238              		.loc 1 225 0
 239 00e8 3C4B     		ldr	r3, .L16+68
 240 00ea 3C4A     		ldr	r2, .L16+68
 241 00ec 1168     		ldr	r1, [r2]
 242 00ee FA68     		ldr	r2, [r7, #12]
 243 00f0 0120     		mov	r0, #1
 244 00f2 041C     		mov	r4, r0
 245 00f4 9440     		lsl	r4, r4, r2
 246 00f6 221C     		mov	r2, r4
 247 00f8 92B2     		uxth	r2, r2
 248 00fa 0A43     		orr	r2, r1
 249 00fc 1A60     		str	r2, [r3]
 250              	.L9:
 226:.\Generated_Source\PSoC4/ADC.c ****             }
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 251              		.loc 1 228 0
 252 00fe 3E4B     		ldr	r3, .L16+96
 253 0100 FA68     		ldr	r2, [r7, #12]
 254 0102 9200     		lsl	r2, r2, #2
 255 0104 D258     		ldr	r2, [r2, r3]
 256 0106 0223     		mov	r3, #2
 257 0108 1340     		and	r3, r2
 258 010a 0AD0     		beq	.L10
 229:.\Generated_Source\PSoC4/ADC.c ****             {
 230:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 259              		.loc 1 230 0
 260 010c 344B     		ldr	r3, .L16+72
 261 010e 344A     		ldr	r2, .L16+72
 262 0110 1168     		ldr	r1, [r2]
 263 0112 FA68     		ldr	r2, [r7, #12]
 264 0114 0120     		mov	r0, #1
 265 0116 041C     		mov	r4, r0
 266 0118 9440     		lsl	r4, r4, r2
 267 011a 221C     		mov	r2, r4
 268 011c 92B2     		uxth	r2, r2
 269 011e 0A43     		orr	r2, r1
 270 0120 1A60     		str	r2, [r3]
 271              	.L10:
 231:.\Generated_Source\PSoC4/ADC.c ****             }
 232:.\Generated_Source\PSoC4/ADC.c ****         }
 233:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 234:.\Generated_Source\PSoC4/ADC.c ****             else
 235:.\Generated_Source\PSoC4/ADC.c ****             {
 236:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 237:.\Generated_Source\PSoC4/ADC.c **** 
 238:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 10


 239:.\Generated_Source\PSoC4/ADC.c ****                 {
 240:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 241:.\Generated_Source\PSoC4/ADC.c ****                 }
 242:.\Generated_Source\PSoC4/ADC.c **** 
 243:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 244:.\Generated_Source\PSoC4/ADC.c ****                 {
 245:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 246:.\Generated_Source\PSoC4/ADC.c ****                 }
 247:.\Generated_Source\PSoC4/ADC.c ****             }
 248:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 249:.\Generated_Source\PSoC4/ADC.c **** 
 250:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 272              		.loc 1 250 0
 273 0122 354B     		ldr	r3, .L16+96
 274 0124 FA68     		ldr	r2, [r7, #12]
 275 0126 9200     		lsl	r2, r2, #2
 276 0128 D258     		ldr	r2, [r2, r3]
 277 012a 8023     		mov	r3, #128
 278 012c 9B00     		lsl	r3, r3, #2
 279 012e 1340     		and	r3, r2
 280 0130 03D0     		beq	.L11
 251:.\Generated_Source\PSoC4/ADC.c ****         {
 252:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 281              		.loc 1 252 0
 282 0132 8023     		mov	r3, #128
 283 0134 5B00     		lsl	r3, r3, #1
 284 0136 BB60     		str	r3, [r7, #8]
 285 0138 02E0     		b	.L12
 286              	.L11:
 253:.\Generated_Source\PSoC4/ADC.c ****         }
 254:.\Generated_Source\PSoC4/ADC.c ****         else
 255:.\Generated_Source\PSoC4/ADC.c ****         {
 256:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 287              		.loc 1 256 0
 288 013a 8023     		mov	r3, #128
 289 013c 5B01     		lsl	r3, r3, #5
 290 013e BB60     		str	r3, [r7, #8]
 291              	.L12:
 257:.\Generated_Source\PSoC4/ADC.c ****         }
 258:.\Generated_Source\PSoC4/ADC.c **** 
 259:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 292              		.loc 1 259 0
 293 0140 2D4B     		ldr	r3, .L16+96
 294 0142 FA68     		ldr	r2, [r7, #12]
 295 0144 9200     		lsl	r2, r2, #2
 296 0146 D258     		ldr	r2, [r2, r3]
 297 0148 8023     		mov	r3, #128
 298 014a 5B00     		lsl	r3, r3, #1
 299 014c 1340     		and	r3, r2
 300 014e 05D1     		bne	.L13
 260:.\Generated_Source\PSoC4/ADC.c ****         {
 261:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 262:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 263:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 264:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 265:.\Generated_Source\PSoC4/ADC.c ****             #else
 266:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 11


 301              		.loc 1 266 0
 302 0150 2C4B     		ldr	r3, .L16+108
 303 0152 FA68     		ldr	r2, [r7, #12]
 304 0154 5200     		lsl	r2, r2, #1
 305 0156 0021     		mov	r1, #0
 306 0158 D152     		strh	r1, [r2, r3]
 307 015a 04E0     		b	.L14
 308              	.L13:
 267:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 268:.\Generated_Source\PSoC4/ADC.c ****         }
 269:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 270:.\Generated_Source\PSoC4/ADC.c ****         {
 271:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 272:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 273:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 274:.\Generated_Source\PSoC4/ADC.c ****             #else
 275:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 309              		.loc 1 275 0
 310 015c 294B     		ldr	r3, .L16+108
 311 015e FA68     		ldr	r2, [r7, #12]
 312 0160 5200     		lsl	r2, r2, #1
 313 0162 0021     		mov	r1, #0
 314 0164 D152     		strh	r1, [r2, r3]
 315              	.L14:
 276:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 277:.\Generated_Source\PSoC4/ADC.c ****         }
 278:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 316              		.loc 1 279 0
 317 0166 BB68     		ldr	r3, [r7, #8]
 318 0168 274A     		ldr	r2, .L16+112
 319 016a 5343     		mul	r3, r2
 320 016c 274A     		ldr	r2, .L16+116
 321 016e 9B18     		add	r3, r3, r2
 280:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 322              		.loc 1 280 0
 323 0170 181C     		mov	r0, r3
 324 0172 2749     		ldr	r1, .L16+120
 325 0174 FFF7FEFF 		bl	__aeabi_idiv
 326 0178 031C     		mov	r3, r0
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 327              		.loc 1 279 0
 328 017a 9BB2     		uxth	r3, r3
 329 017c 19B2     		sxth	r1, r3
 330 017e 254B     		ldr	r3, .L16+124
 331 0180 FA68     		ldr	r2, [r7, #12]
 332 0182 9200     		lsl	r2, r2, #2
 333 0184 D150     		str	r1, [r2, r3]
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 334              		.loc 1 200 0
 335 0186 FB68     		ldr	r3, [r7, #12]
 336 0188 0133     		add	r3, r3, #1
 337 018a FB60     		str	r3, [r7, #12]
 338              	.L8:
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 339              		.loc 1 200 0 is_stmt 0 discriminator 1
 340 018c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 12


 341 018e 012B     		cmp	r3, #1
 342 0190 8ED9     		bls	.L15
 281:.\Generated_Source\PSoC4/ADC.c ****     }
 282:.\Generated_Source\PSoC4/ADC.c **** }
 343              		.loc 1 282 0 is_stmt 1
 344 0192 BD46     		mov	sp, r7
 345 0194 05B0     		add	sp, sp, #20
 346              		@ sp needed
 347 0196 90BD     		pop	{r4, r7, pc}
 348              	.L17:
 349              		.align	2
 350              	.L16:
 351 0198 00000000 		.word	ADC_ISR
 352 019c 20001A40 		.word	1075445792
 353 01a0 00001A40 		.word	1075445760
 354 01a4 80031A40 		.word	1075446656
 355 01a8 70201010 		.word	269492336
 356 01ac 70200010 		.word	268443760
 357 01b0 04001A40 		.word	1075445764
 358 01b4 8C000080 		.word	-2147483508
 359 01b8 18001A40 		.word	1075445784
 360 01bc 0000FF07 		.word	134152192
 361 01c0 1C001A40 		.word	1075445788
 362 01c4 10001A40 		.word	1075445776
 363 01c8 32001E00 		.word	1966130
 364 01cc 14001A40 		.word	1075445780
 365 01d0 02000200 		.word	131074
 366 01d4 00031A40 		.word	1075446528
 367 01d8 40031A40 		.word	1075446592
 368 01dc 28021A40 		.word	1075446312
 369 01e0 38021A40 		.word	1075446328
 370 01e4 18021A40 		.word	1075446296
 371 01e8 000F1A40 		.word	1075449600
 372 01ec 30001A40 		.word	1075445808
 373 01f0 FFFFFFDF 		.word	-536870913
 374 01f4 040F1A40 		.word	1075449604
 375 01f8 00000000 		.word	ADC_channelsConfig
 376 01fc 08000000 		.word	ADC_InputsPlacement.4717
 377 0200 80001A40 		.word	1075445888
 378 0204 00000000 		.word	ADC_offset
 379 0208 10270000 		.word	10000
 380 020c E40C0000 		.word	3300
 381 0210 C8190000 		.word	6600
 382 0214 00000000 		.word	ADC_countsPer10Volt
 383              		.cfi_endproc
 384              	.LFE1:
 385              		.size	ADC_Init, .-ADC_Init
 386              		.section	.text.ADC_Enable,"ax",%progbits
 387              		.align	2
 388              		.global	ADC_Enable
 389              		.code	16
 390              		.thumb_func
 391              		.type	ADC_Enable, %function
 392              	ADC_Enable:
 393              	.LFB2:
 283:.\Generated_Source\PSoC4/ADC.c **** 
 284:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 13


 285:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 286:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 289:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** * Return:
 295:.\Generated_Source\PSoC4/ADC.c **** *  None.
 296:.\Generated_Source\PSoC4/ADC.c **** *
 297:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 298:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 299:.\Generated_Source\PSoC4/ADC.c **** {
 394              		.loc 1 299 0
 395              		.cfi_startproc
 396 0000 80B5     		push	{r7, lr}
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 7, -8
 399              		.cfi_offset 14, -4
 400 0002 00AF     		add	r7, sp, #0
 401              		.cfi_def_cfa_register 7
 300:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 402              		.loc 1 300 0
 403 0004 074B     		ldr	r3, .L20
 404 0006 1B68     		ldr	r3, [r3]
 405 0008 002B     		cmp	r3, #0
 406 000a 09DB     		blt	.L18
 301:.\Generated_Source\PSoC4/ADC.c ****     {
 302:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 303:.\Generated_Source\PSoC4/ADC.c **** 
 304:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 305:.\Generated_Source\PSoC4/ADC.c ****             {
 306:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 307:.\Generated_Source\PSoC4/ADC.c ****             }
 308:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 309:.\Generated_Source\PSoC4/ADC.c ****         
 310:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 407              		.loc 1 310 0
 408 000c 054B     		ldr	r3, .L20
 409 000e 054A     		ldr	r2, .L20
 410 0010 1268     		ldr	r2, [r2]
 411 0012 8021     		mov	r1, #128
 412 0014 0906     		lsl	r1, r1, #24
 413 0016 0A43     		orr	r2, r1
 414 0018 1A60     		str	r2, [r3]
 311:.\Generated_Source\PSoC4/ADC.c ****         
 312:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 313:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 415              		.loc 1 313 0
 416 001a 0A20     		mov	r0, #10
 417 001c FFF7FEFF 		bl	CyDelayUs
 418              	.L18:
 314:.\Generated_Source\PSoC4/ADC.c ****     }
 315:.\Generated_Source\PSoC4/ADC.c **** }
 419              		.loc 1 315 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 14


 420 0020 BD46     		mov	sp, r7
 421              		@ sp needed
 422 0022 80BD     		pop	{r7, pc}
 423              	.L21:
 424              		.align	2
 425              	.L20:
 426 0024 00001A40 		.word	1075445760
 427              		.cfi_endproc
 428              	.LFE2:
 429              		.size	ADC_Enable, .-ADC_Enable
 430              		.section	.text.ADC_Stop,"ax",%progbits
 431              		.align	2
 432              		.global	ADC_Stop
 433              		.code	16
 434              		.thumb_func
 435              		.type	ADC_Stop, %function
 436              	ADC_Stop:
 437              	.LFB3:
 316:.\Generated_Source\PSoC4/ADC.c **** 
 317:.\Generated_Source\PSoC4/ADC.c **** 
 318:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 320:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 321:.\Generated_Source\PSoC4/ADC.c **** *
 322:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 323:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 324:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** * Return:
 330:.\Generated_Source\PSoC4/ADC.c **** *  None.
 331:.\Generated_Source\PSoC4/ADC.c **** *
 332:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 333:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 334:.\Generated_Source\PSoC4/ADC.c **** {
 438              		.loc 1 334 0
 439              		.cfi_startproc
 440 0000 80B5     		push	{r7, lr}
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 7, -8
 443              		.cfi_offset 14, -4
 444 0002 00AF     		add	r7, sp, #0
 445              		.cfi_def_cfa_register 7
 335:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 446              		.loc 1 335 0
 447 0004 034B     		ldr	r3, .L23
 448 0006 034A     		ldr	r2, .L23
 449 0008 1268     		ldr	r2, [r2]
 450 000a 5200     		lsl	r2, r2, #1
 451 000c 5208     		lsr	r2, r2, #1
 452 000e 1A60     		str	r2, [r3]
 336:.\Generated_Source\PSoC4/ADC.c **** }
 453              		.loc 1 336 0
 454 0010 BD46     		mov	sp, r7
 455              		@ sp needed
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 15


 456 0012 80BD     		pop	{r7, pc}
 457              	.L24:
 458              		.align	2
 459              	.L23:
 460 0014 00001A40 		.word	1075445760
 461              		.cfi_endproc
 462              	.LFE3:
 463              		.size	ADC_Stop, .-ADC_Stop
 464              		.section	.text.ADC_StartConvert,"ax",%progbits
 465              		.align	2
 466              		.global	ADC_StartConvert
 467              		.code	16
 468              		.thumb_func
 469              		.type	ADC_StartConvert, %function
 470              	ADC_StartConvert:
 471              	.LFB4:
 337:.\Generated_Source\PSoC4/ADC.c **** 
 338:.\Generated_Source\PSoC4/ADC.c **** 
 339:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 340:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 341:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 342:.\Generated_Source\PSoC4/ADC.c **** *
 343:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 344:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 345:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 346:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 347:.\Generated_Source\PSoC4/ADC.c **** *
 348:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 349:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 350:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** * Return:
 356:.\Generated_Source\PSoC4/ADC.c **** *  None.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 359:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 360:.\Generated_Source\PSoC4/ADC.c **** {
 472              		.loc 1 360 0
 473              		.cfi_startproc
 474 0000 80B5     		push	{r7, lr}
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 7, -8
 477              		.cfi_offset 14, -4
 478 0002 00AF     		add	r7, sp, #0
 479              		.cfi_def_cfa_register 7
 361:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 362:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 480              		.loc 1 362 0
 481 0004 044B     		ldr	r3, .L26
 482 0006 044A     		ldr	r2, .L26
 483 0008 1268     		ldr	r2, [r2]
 484 000a 8021     		mov	r1, #128
 485 000c 4902     		lsl	r1, r1, #9
 486 000e 0A43     		orr	r2, r1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 16


 487 0010 1A60     		str	r2, [r3]
 363:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 364:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 365:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** }
 488              		.loc 1 367 0
 489 0012 BD46     		mov	sp, r7
 490              		@ sp needed
 491 0014 80BD     		pop	{r7, pc}
 492              	.L27:
 493 0016 C046     		.align	2
 494              	.L26:
 495 0018 04001A40 		.word	1075445764
 496              		.cfi_endproc
 497              	.LFE4:
 498              		.size	ADC_StartConvert, .-ADC_StartConvert
 499              		.section	.text.ADC_StopConvert,"ax",%progbits
 500              		.align	2
 501              		.global	ADC_StopConvert
 502              		.code	16
 503              		.thumb_func
 504              		.type	ADC_StopConvert, %function
 505              	ADC_StopConvert:
 506              	.LFB5:
 368:.\Generated_Source\PSoC4/ADC.c **** 
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 371:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 372:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 375:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** * Return:
 381:.\Generated_Source\PSoC4/ADC.c **** *  None.
 382:.\Generated_Source\PSoC4/ADC.c **** *
 383:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 384:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 385:.\Generated_Source\PSoC4/ADC.c **** {
 507              		.loc 1 385 0
 508              		.cfi_startproc
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 00AF     		add	r7, sp, #0
 514              		.cfi_def_cfa_register 7
 386:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 387:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 515              		.loc 1 387 0
 516 0004 034B     		ldr	r3, .L29
 517 0006 034A     		ldr	r2, .L29
 518 0008 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 17


 519 000a 034A     		ldr	r2, .L29+4
 520 000c 0A40     		and	r2, r1
 521 000e 1A60     		str	r2, [r3]
 388:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 389:.\Generated_Source\PSoC4/ADC.c **** }
 522              		.loc 1 389 0
 523 0010 BD46     		mov	sp, r7
 524              		@ sp needed
 525 0012 80BD     		pop	{r7, pc}
 526              	.L30:
 527              		.align	2
 528              	.L29:
 529 0014 04001A40 		.word	1075445764
 530 0018 FFFFFEFF 		.word	-65537
 531              		.cfi_endproc
 532              	.LFE5:
 533              		.size	ADC_StopConvert, .-ADC_StopConvert
 534              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 535              		.align	2
 536              		.global	ADC_IsEndConversion
 537              		.code	16
 538              		.thumb_func
 539              		.type	ADC_IsEndConversion, %function
 540              	ADC_IsEndConversion:
 541              	.LFB6:
 390:.\Generated_Source\PSoC4/ADC.c **** 
 391:.\Generated_Source\PSoC4/ADC.c **** 
 392:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 393:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 394:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 395:.\Generated_Source\PSoC4/ADC.c **** *
 396:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 397:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 398:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 399:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 400:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 401:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 402:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 403:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 404:.\Generated_Source\PSoC4/ADC.c **** *
 405:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 406:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 408:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 409:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 410:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 411:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 412:.\Generated_Source\PSoC4/ADC.c **** *
 413:.\Generated_Source\PSoC4/ADC.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 415:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 416:.\Generated_Source\PSoC4/ADC.c **** *
 417:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 418:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 419:.\Generated_Source\PSoC4/ADC.c **** {
 542              		.loc 1 419 0
 543              		.cfi_startproc
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 18


 544 0000 80B5     		push	{r7, lr}
 545              		.cfi_def_cfa_offset 8
 546              		.cfi_offset 7, -8
 547              		.cfi_offset 14, -4
 548 0002 84B0     		sub	sp, sp, #16
 549              		.cfi_def_cfa_offset 24
 550 0004 00AF     		add	r7, sp, #0
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
 420:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 553              		.loc 1 420 0
 554 0008 0023     		mov	r3, #0
 555 000a FB60     		str	r3, [r7, #12]
 421:.\Generated_Source\PSoC4/ADC.c **** 
 422:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 556              		.loc 1 422 0
 557 000c 7A68     		ldr	r2, [r7, #4]
 558 000e 0323     		mov	r3, #3
 559 0010 1340     		and	r3, r2
 560 0012 11D0     		beq	.L32
 561              	.L34:
 423:.\Generated_Source\PSoC4/ADC.c ****     {
 424:.\Generated_Source\PSoC4/ADC.c ****         do
 425:.\Generated_Source\PSoC4/ADC.c ****         {
 426:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 562              		.loc 1 426 0 discriminator 1
 563 0014 0B4B     		ldr	r3, .L36
 564 0016 1A68     		ldr	r2, [r3]
 565 0018 0123     		mov	r3, #1
 566 001a 1340     		and	r3, r2
 567 001c FB60     		str	r3, [r7, #12]
 427:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 568              		.loc 1 427 0 discriminator 1
 569 001e FB68     		ldr	r3, [r7, #12]
 570 0020 002B     		cmp	r3, #0
 571 0022 03D1     		bne	.L33
 572 0024 7A68     		ldr	r2, [r7, #4]
 573 0026 0223     		mov	r3, #2
 574 0028 1340     		and	r3, r2
 575 002a F3D1     		bne	.L34
 576              	.L33:
 428:.\Generated_Source\PSoC4/ADC.c **** 
 429:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 577              		.loc 1 429 0
 578 002c FB68     		ldr	r3, [r7, #12]
 579 002e 002B     		cmp	r3, #0
 580 0030 02D0     		beq	.L32
 430:.\Generated_Source\PSoC4/ADC.c ****         {
 431:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 432:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 581              		.loc 1 432 0
 582 0032 044B     		ldr	r3, .L36
 583 0034 0122     		mov	r2, #1
 584 0036 1A60     		str	r2, [r3]
 585              	.L32:
 433:.\Generated_Source\PSoC4/ADC.c ****         }
 434:.\Generated_Source\PSoC4/ADC.c ****     }
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 19


 435:.\Generated_Source\PSoC4/ADC.c **** 
 436:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 437:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 438:.\Generated_Source\PSoC4/ADC.c ****         {
 439:.\Generated_Source\PSoC4/ADC.c ****             do
 440:.\Generated_Source\PSoC4/ADC.c ****             {
 441:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 442:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 443:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 444:.\Generated_Source\PSoC4/ADC.c **** 
 445:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 446:.\Generated_Source\PSoC4/ADC.c ****             {
 447:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 448:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 449:.\Generated_Source\PSoC4/ADC.c ****             }
 450:.\Generated_Source\PSoC4/ADC.c ****         }
 451:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 586              		.loc 1 453 0
 587 0038 FB68     		ldr	r3, [r7, #12]
 454:.\Generated_Source\PSoC4/ADC.c **** }
 588              		.loc 1 454 0
 589 003a 181C     		mov	r0, r3
 590 003c BD46     		mov	sp, r7
 591 003e 04B0     		add	sp, sp, #16
 592              		@ sp needed
 593 0040 80BD     		pop	{r7, pc}
 594              	.L37:
 595 0042 C046     		.align	2
 596              	.L36:
 597 0044 10021A40 		.word	1075446288
 598              		.cfi_endproc
 599              	.LFE6:
 600              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 601              		.section	.text.ADC_GetResult16,"ax",%progbits
 602              		.align	2
 603              		.global	ADC_GetResult16
 604              		.code	16
 605              		.thumb_func
 606              		.type	ADC_GetResult16, %function
 607              	ADC_GetResult16:
 608              	.LFB7:
 455:.\Generated_Source\PSoC4/ADC.c **** 
 456:.\Generated_Source\PSoC4/ADC.c **** 
 457:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 458:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 459:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 462:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 463:.\Generated_Source\PSoC4/ADC.c **** *
 464:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 465:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 466:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 20


 469:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 470:.\Generated_Source\PSoC4/ADC.c **** *
 471:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 472:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 473:.\Generated_Source\PSoC4/ADC.c **** {
 609              		.loc 1 473 0
 610              		.cfi_startproc
 611 0000 80B5     		push	{r7, lr}
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 84B0     		sub	sp, sp, #16
 616              		.cfi_def_cfa_offset 24
 617 0004 00AF     		add	r7, sp, #0
 618              		.cfi_def_cfa_register 7
 619 0006 7860     		str	r0, [r7, #4]
 474:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 477:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 620              		.loc 1 477 0
 621 0008 7B68     		ldr	r3, [r7, #4]
 622 000a 012B     		cmp	r3, #1
 623 000c 02D9     		bls	.L39
 624              		.loc 1 477 0 is_stmt 0 discriminator 1
 625 000e 0020     		mov	r0, #0
 626 0010 FFF7FEFF 		bl	CyHalt
 627              	.L39:
 478:.\Generated_Source\PSoC4/ADC.c **** 
 479:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 628              		.loc 1 479 0 is_stmt 1
 629 0014 7B68     		ldr	r3, [r7, #4]
 630 0016 012B     		cmp	r3, #1
 631 0018 08D8     		bhi	.L40
 480:.\Generated_Source\PSoC4/ADC.c ****     {
 481:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 632              		.loc 1 481 0
 633 001a 7B68     		ldr	r3, [r7, #4]
 634 001c 9B00     		lsl	r3, r3, #2
 635 001e 084A     		ldr	r2, .L43
 636 0020 9B18     		add	r3, r3, r2
 637 0022 1B68     		ldr	r3, [r3]
 638 0024 1B04     		lsl	r3, r3, #16
 639 0026 1B0C     		lsr	r3, r3, #16
 640 0028 FB60     		str	r3, [r7, #12]
 641 002a 01E0     		b	.L41
 642              	.L40:
 482:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 483:.\Generated_Source\PSoC4/ADC.c ****     }
 484:.\Generated_Source\PSoC4/ADC.c ****     else
 485:.\Generated_Source\PSoC4/ADC.c ****     {
 486:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 487:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 488:.\Generated_Source\PSoC4/ADC.c ****         #else
 489:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 643              		.loc 1 489 0
 644 002c 0023     		mov	r3, #0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 21


 645 002e FB60     		str	r3, [r7, #12]
 646              	.L41:
 490:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 491:.\Generated_Source\PSoC4/ADC.c ****     }
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 647              		.loc 1 493 0
 648 0030 FB68     		ldr	r3, [r7, #12]
 649 0032 9BB2     		uxth	r3, r3
 650 0034 1BB2     		sxth	r3, r3
 494:.\Generated_Source\PSoC4/ADC.c **** }
 651              		.loc 1 494 0
 652 0036 181C     		mov	r0, r3
 653 0038 BD46     		mov	sp, r7
 654 003a 04B0     		add	sp, sp, #16
 655              		@ sp needed
 656 003c 80BD     		pop	{r7, pc}
 657              	.L44:
 658 003e C046     		.align	2
 659              	.L43:
 660 0040 80011A40 		.word	1075446144
 661              		.cfi_endproc
 662              	.LFE7:
 663              		.size	ADC_GetResult16, .-ADC_GetResult16
 664              		.section	.text.ADC_SetChanMask,"ax",%progbits
 665              		.align	2
 666              		.global	ADC_SetChanMask
 667              		.code	16
 668              		.thumb_func
 669              		.type	ADC_SetChanMask, %function
 670              	ADC_SetChanMask:
 671              	.LFB8:
 495:.\Generated_Source\PSoC4/ADC.c **** 
 496:.\Generated_Source\PSoC4/ADC.c **** 
 497:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 498:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 499:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 502:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 503:.\Generated_Source\PSoC4/ADC.c **** *
 504:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 506:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 507:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 508:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 509:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 510:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 511:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** * Return:
 514:.\Generated_Source\PSoC4/ADC.c **** *  None.
 515:.\Generated_Source\PSoC4/ADC.c **** *
 516:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 517:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 518:.\Generated_Source\PSoC4/ADC.c **** {
 672              		.loc 1 518 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 22


 673              		.cfi_startproc
 674 0000 80B5     		push	{r7, lr}
 675              		.cfi_def_cfa_offset 8
 676              		.cfi_offset 7, -8
 677              		.cfi_offset 14, -4
 678 0002 82B0     		sub	sp, sp, #8
 679              		.cfi_def_cfa_offset 16
 680 0004 00AF     		add	r7, sp, #0
 681              		.cfi_def_cfa_register 7
 682 0006 7860     		str	r0, [r7, #4]
 519:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 683              		.loc 1 519 0
 684 0008 034B     		ldr	r3, .L46
 685 000a 7968     		ldr	r1, [r7, #4]
 686 000c 0322     		mov	r2, #3
 687 000e 0A40     		and	r2, r1
 688 0010 1A60     		str	r2, [r3]
 520:.\Generated_Source\PSoC4/ADC.c **** }
 689              		.loc 1 520 0
 690 0012 BD46     		mov	sp, r7
 691 0014 02B0     		add	sp, sp, #8
 692              		@ sp needed
 693 0016 80BD     		pop	{r7, pc}
 694              	.L47:
 695              		.align	2
 696              	.L46:
 697 0018 20001A40 		.word	1075445792
 698              		.cfi_endproc
 699              	.LFE8:
 700              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 701              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 702              		.align	2
 703              		.global	ADC_SetLowLimit
 704              		.code	16
 705              		.thumb_func
 706              		.type	ADC_SetLowLimit, %function
 707              	ADC_SetLowLimit:
 708              	.LFB9:
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 523:.\Generated_Source\PSoC4/ADC.c **** 
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 526:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 527:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 536:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 537:.\Generated_Source\PSoC4/ADC.c ****     *
 538:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 539:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 23


 540:.\Generated_Source\PSoC4/ADC.c ****     {
 541:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 542:.\Generated_Source\PSoC4/ADC.c ****     }
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 545:.\Generated_Source\PSoC4/ADC.c **** 
 546:.\Generated_Source\PSoC4/ADC.c **** 
 547:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 548:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 549:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 552:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 555:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** * Return:
 558:.\Generated_Source\PSoC4/ADC.c **** *  None.
 559:.\Generated_Source\PSoC4/ADC.c **** *
 560:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 561:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 562:.\Generated_Source\PSoC4/ADC.c **** {
 709              		.loc 1 562 0
 710              		.cfi_startproc
 711 0000 80B5     		push	{r7, lr}
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 7, -8
 714              		.cfi_offset 14, -4
 715 0002 82B0     		sub	sp, sp, #8
 716              		.cfi_def_cfa_offset 16
 717 0004 00AF     		add	r7, sp, #0
 718              		.cfi_def_cfa_register 7
 719 0006 7860     		str	r0, [r7, #4]
 563:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 720              		.loc 1 563 0
 721 0008 084B     		ldr	r3, .L49
 722 000a 084A     		ldr	r2, .L49
 723 000c 1268     		ldr	r2, [r2]
 724 000e 120C     		lsr	r2, r2, #16
 725 0010 1204     		lsl	r2, r2, #16
 726 0012 1A60     		str	r2, [r3]
 564:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 727              		.loc 1 564 0
 728 0014 054B     		ldr	r3, .L49
 729 0016 054A     		ldr	r2, .L49
 730 0018 1168     		ldr	r1, [r2]
 731 001a 7A68     		ldr	r2, [r7, #4]
 732 001c 1204     		lsl	r2, r2, #16
 733 001e 120C     		lsr	r2, r2, #16
 734 0020 0A43     		orr	r2, r1
 735 0022 1A60     		str	r2, [r3]
 565:.\Generated_Source\PSoC4/ADC.c **** }
 736              		.loc 1 565 0
 737 0024 BD46     		mov	sp, r7
 738 0026 02B0     		add	sp, sp, #8
 739              		@ sp needed
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 24


 740 0028 80BD     		pop	{r7, pc}
 741              	.L50:
 742 002a C046     		.align	2
 743              	.L49:
 744 002c 18001A40 		.word	1075445784
 745              		.cfi_endproc
 746              	.LFE9:
 747              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 748              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 749              		.align	2
 750              		.global	ADC_SetHighLimit
 751              		.code	16
 752              		.thumb_func
 753              		.type	ADC_SetHighLimit, %function
 754              	ADC_SetHighLimit:
 755              	.LFB10:
 566:.\Generated_Source\PSoC4/ADC.c **** 
 567:.\Generated_Source\PSoC4/ADC.c **** 
 568:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 569:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 570:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 573:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 576:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** * Return:
 579:.\Generated_Source\PSoC4/ADC.c **** *  None.
 580:.\Generated_Source\PSoC4/ADC.c **** *
 581:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 582:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 583:.\Generated_Source\PSoC4/ADC.c **** {
 756              		.loc 1 583 0
 757              		.cfi_startproc
 758 0000 80B5     		push	{r7, lr}
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 7, -8
 761              		.cfi_offset 14, -4
 762 0002 82B0     		sub	sp, sp, #8
 763              		.cfi_def_cfa_offset 16
 764 0004 00AF     		add	r7, sp, #0
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 584:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 767              		.loc 1 584 0
 768 0008 074B     		ldr	r3, .L52
 769 000a 074A     		ldr	r2, .L52
 770 000c 1268     		ldr	r2, [r2]
 771 000e 1204     		lsl	r2, r2, #16
 772 0010 120C     		lsr	r2, r2, #16
 773 0012 1A60     		str	r2, [r3]
 585:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 774              		.loc 1 585 0
 775 0014 044B     		ldr	r3, .L52
 776 0016 044A     		ldr	r2, .L52
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 25


 777 0018 1168     		ldr	r1, [r2]
 778 001a 7A68     		ldr	r2, [r7, #4]
 779 001c 1204     		lsl	r2, r2, #16
 780 001e 0A43     		orr	r2, r1
 781 0020 1A60     		str	r2, [r3]
 586:.\Generated_Source\PSoC4/ADC.c **** }
 782              		.loc 1 586 0
 783 0022 BD46     		mov	sp, r7
 784 0024 02B0     		add	sp, sp, #8
 785              		@ sp needed
 786 0026 80BD     		pop	{r7, pc}
 787              	.L53:
 788              		.align	2
 789              	.L52:
 790 0028 18001A40 		.word	1075445784
 791              		.cfi_endproc
 792              	.LFE10:
 793              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 794              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 795              		.align	2
 796              		.global	ADC_SetLimitMask
 797              		.code	16
 798              		.thumb_func
 799              		.type	ADC_SetLimitMask, %function
 800              	ADC_SetLimitMask:
 801              	.LFB11:
 587:.\Generated_Source\PSoC4/ADC.c **** 
 588:.\Generated_Source\PSoC4/ADC.c **** 
 589:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 590:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 591:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 594:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 595:.\Generated_Source\PSoC4/ADC.c **** *
 596:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 597:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 598:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 599:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 600:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** * Return:
 603:.\Generated_Source\PSoC4/ADC.c **** *  None.
 604:.\Generated_Source\PSoC4/ADC.c **** *
 605:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 606:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 607:.\Generated_Source\PSoC4/ADC.c **** {
 802              		.loc 1 607 0
 803              		.cfi_startproc
 804 0000 80B5     		push	{r7, lr}
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 7, -8
 807              		.cfi_offset 14, -4
 808 0002 82B0     		sub	sp, sp, #8
 809              		.cfi_def_cfa_offset 16
 810 0004 00AF     		add	r7, sp, #0
 811              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 26


 812 0006 7860     		str	r0, [r7, #4]
 608:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 813              		.loc 1 608 0
 814 0008 034B     		ldr	r3, .L55
 815 000a 7968     		ldr	r1, [r7, #4]
 816 000c 0322     		mov	r2, #3
 817 000e 0A40     		and	r2, r1
 818 0010 1A60     		str	r2, [r3]
 609:.\Generated_Source\PSoC4/ADC.c **** }
 819              		.loc 1 609 0
 820 0012 BD46     		mov	sp, r7
 821 0014 02B0     		add	sp, sp, #8
 822              		@ sp needed
 823 0016 80BD     		pop	{r7, pc}
 824              	.L56:
 825              		.align	2
 826              	.L55:
 827 0018 38021A40 		.word	1075446328
 828              		.cfi_endproc
 829              	.LFE11:
 830              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 831              		.section	.text.ADC_SetSatMask,"ax",%progbits
 832              		.align	2
 833              		.global	ADC_SetSatMask
 834              		.code	16
 835              		.thumb_func
 836              		.type	ADC_SetSatMask, %function
 837              	ADC_SetSatMask:
 838              	.LFB12:
 610:.\Generated_Source\PSoC4/ADC.c **** 
 611:.\Generated_Source\PSoC4/ADC.c **** 
 612:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 613:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 614:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 617:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 618:.\Generated_Source\PSoC4/ADC.c **** *
 619:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 620:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 621:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 622:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 623:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Return:
 626:.\Generated_Source\PSoC4/ADC.c **** *  None.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 629:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 630:.\Generated_Source\PSoC4/ADC.c **** {
 839              		.loc 1 630 0
 840              		.cfi_startproc
 841 0000 80B5     		push	{r7, lr}
 842              		.cfi_def_cfa_offset 8
 843              		.cfi_offset 7, -8
 844              		.cfi_offset 14, -4
 845 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 27


 846              		.cfi_def_cfa_offset 16
 847 0004 00AF     		add	r7, sp, #0
 848              		.cfi_def_cfa_register 7
 849 0006 7860     		str	r0, [r7, #4]
 631:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 850              		.loc 1 631 0
 851 0008 034B     		ldr	r3, .L58
 852 000a 7968     		ldr	r1, [r7, #4]
 853 000c 0322     		mov	r2, #3
 854 000e 0A40     		and	r2, r1
 855 0010 1A60     		str	r2, [r3]
 632:.\Generated_Source\PSoC4/ADC.c **** }
 856              		.loc 1 632 0
 857 0012 BD46     		mov	sp, r7
 858 0014 02B0     		add	sp, sp, #8
 859              		@ sp needed
 860 0016 80BD     		pop	{r7, pc}
 861              	.L59:
 862              		.align	2
 863              	.L58:
 864 0018 28021A40 		.word	1075446312
 865              		.cfi_endproc
 866              	.LFE12:
 867              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 868              		.section	.text.ADC_SetOffset,"ax",%progbits
 869              		.align	2
 870              		.global	ADC_SetOffset
 871              		.code	16
 872              		.thumb_func
 873              		.type	ADC_SetOffset, %function
 874              	ADC_SetOffset:
 875              	.LFB13:
 633:.\Generated_Source\PSoC4/ADC.c **** 
 634:.\Generated_Source\PSoC4/ADC.c **** 
 635:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 636:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 637:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 638:.\Generated_Source\PSoC4/ADC.c **** *
 639:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 640:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 641:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 642:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 643:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 644:.\Generated_Source\PSoC4/ADC.c **** *
 645:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 646:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 647:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 648:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Return:
 651:.\Generated_Source\PSoC4/ADC.c **** *  None.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 654:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 655:.\Generated_Source\PSoC4/ADC.c **** *
 656:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 657:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 28


 658:.\Generated_Source\PSoC4/ADC.c **** {
 876              		.loc 1 658 0
 877              		.cfi_startproc
 878 0000 80B5     		push	{r7, lr}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 7, -8
 881              		.cfi_offset 14, -4
 882 0002 82B0     		sub	sp, sp, #8
 883              		.cfi_def_cfa_offset 16
 884 0004 00AF     		add	r7, sp, #0
 885              		.cfi_def_cfa_register 7
 886 0006 7860     		str	r0, [r7, #4]
 887 0008 0A1C     		mov	r2, r1
 888 000a BB1C     		add	r3, r7, #2
 889 000c 1A80     		strh	r2, [r3]
 659:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 660:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 890              		.loc 1 660 0
 891 000e 7B68     		ldr	r3, [r7, #4]
 892 0010 012B     		cmp	r3, #1
 893 0012 02D9     		bls	.L61
 894              		.loc 1 660 0 is_stmt 0 discriminator 1
 895 0014 0020     		mov	r0, #0
 896 0016 FFF7FEFF 		bl	CyHalt
 897              	.L61:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 898              		.loc 1 662 0 is_stmt 1
 899 001a 044B     		ldr	r3, .L62
 900 001c 7A68     		ldr	r2, [r7, #4]
 901 001e 5200     		lsl	r2, r2, #1
 902 0020 B91C     		add	r1, r7, #2
 903 0022 0988     		ldrh	r1, [r1]
 904 0024 D152     		strh	r1, [r2, r3]
 663:.\Generated_Source\PSoC4/ADC.c **** }
 905              		.loc 1 663 0
 906 0026 BD46     		mov	sp, r7
 907 0028 02B0     		add	sp, sp, #8
 908              		@ sp needed
 909 002a 80BD     		pop	{r7, pc}
 910              	.L63:
 911              		.align	2
 912              	.L62:
 913 002c 00000000 		.word	ADC_offset
 914              		.cfi_endproc
 915              	.LFE13:
 916              		.size	ADC_SetOffset, .-ADC_SetOffset
 917              		.section	.text.ADC_SetGain,"ax",%progbits
 918              		.align	2
 919              		.global	ADC_SetGain
 920              		.code	16
 921              		.thumb_func
 922              		.type	ADC_SetGain, %function
 923              	ADC_SetGain:
 924              	.LFB14:
 664:.\Generated_Source\PSoC4/ADC.c **** 
 665:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 29


 666:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 667:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 668:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 669:.\Generated_Source\PSoC4/ADC.c **** *
 670:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 671:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 672:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 673:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 674:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 675:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 676:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 677:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 678:.\Generated_Source\PSoC4/ADC.c **** *
 679:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 680:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 681:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC.c **** *
 686:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 688:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 689:.\Generated_Source\PSoC4/ADC.c **** *
 690:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 691:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 692:.\Generated_Source\PSoC4/ADC.c **** {
 925              		.loc 1 692 0
 926              		.cfi_startproc
 927 0000 80B5     		push	{r7, lr}
 928              		.cfi_def_cfa_offset 8
 929              		.cfi_offset 7, -8
 930              		.cfi_offset 14, -4
 931 0002 82B0     		sub	sp, sp, #8
 932              		.cfi_def_cfa_offset 16
 933 0004 00AF     		add	r7, sp, #0
 934              		.cfi_def_cfa_register 7
 935 0006 7860     		str	r0, [r7, #4]
 936 0008 3960     		str	r1, [r7]
 693:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 694:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 937              		.loc 1 694 0
 938 000a 7B68     		ldr	r3, [r7, #4]
 939 000c 012B     		cmp	r3, #1
 940 000e 02D9     		bls	.L65
 941              		.loc 1 694 0 is_stmt 0 discriminator 1
 942 0010 0020     		mov	r0, #0
 943 0012 FFF7FEFF 		bl	CyHalt
 944              	.L65:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 945              		.loc 1 696 0 is_stmt 1
 946 0016 044B     		ldr	r3, .L66
 947 0018 7A68     		ldr	r2, [r7, #4]
 948 001a 9200     		lsl	r2, r2, #2
 949 001c 3968     		ldr	r1, [r7]
 950 001e D150     		str	r1, [r2, r3]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 30


 697:.\Generated_Source\PSoC4/ADC.c **** }
 951              		.loc 1 697 0
 952 0020 BD46     		mov	sp, r7
 953 0022 02B0     		add	sp, sp, #8
 954              		@ sp needed
 955 0024 80BD     		pop	{r7, pc}
 956              	.L67:
 957 0026 C046     		.align	2
 958              	.L66:
 959 0028 00000000 		.word	ADC_countsPer10Volt
 960              		.cfi_endproc
 961              	.LFE14:
 962              		.size	ADC_SetGain, .-ADC_SetGain
 963              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 964              		.align	2
 965              		.global	ADC_CountsTo_mVolts
 966              		.code	16
 967              		.thumb_func
 968              		.type	ADC_CountsTo_mVolts, %function
 969              	ADC_CountsTo_mVolts:
 970              	.LFB15:
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 701:.\Generated_Source\PSoC4/ADC.c **** 
 702:.\Generated_Source\PSoC4/ADC.c **** 
 703:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 704:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 705:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 706:.\Generated_Source\PSoC4/ADC.c ****     *
 707:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 708:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 709:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 710:.\Generated_Source\PSoC4/ADC.c ****     *
 711:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 717:.\Generated_Source\PSoC4/ADC.c ****     *
 718:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 720:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 721:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 722:.\Generated_Source\PSoC4/ADC.c ****     *
 723:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 725:.\Generated_Source\PSoC4/ADC.c ****     {
 971              		.loc 1 725 0
 972              		.cfi_startproc
 973 0000 80B5     		push	{r7, lr}
 974              		.cfi_def_cfa_offset 8
 975              		.cfi_offset 7, -8
 976              		.cfi_offset 14, -4
 977 0002 84B0     		sub	sp, sp, #16
 978              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 31


 979 0004 00AF     		add	r7, sp, #0
 980              		.cfi_def_cfa_register 7
 981 0006 7860     		str	r0, [r7, #4]
 982 0008 0A1C     		mov	r2, r1
 983 000a BB1C     		add	r3, r7, #2
 984 000c 1A80     		strh	r2, [r3]
 726:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 729:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 985              		.loc 1 729 0
 986 000e 7B68     		ldr	r3, [r7, #4]
 987 0010 012B     		cmp	r3, #1
 988 0012 02D9     		bls	.L69
 989              		.loc 1 729 0 is_stmt 0 discriminator 1
 990 0014 0020     		mov	r0, #0
 991 0016 FFF7FEFF 		bl	CyHalt
 992              	.L69:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 732:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 733:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 734:.\Generated_Source\PSoC4/ADC.c ****             {
 735:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 736:.\Generated_Source\PSoC4/ADC.c ****             }
 737:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 740:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 993              		.loc 1 740 0 is_stmt 1
 994 001a BB1C     		add	r3, r7, #2
 995 001c 1A88     		ldrh	r2, [r3]
 996 001e 1E4B     		ldr	r3, .L75
 997 0020 7968     		ldr	r1, [r7, #4]
 998 0022 4900     		lsl	r1, r1, #1
 999 0024 CB5A     		ldrh	r3, [r1, r3]
 1000 0026 9BB2     		uxth	r3, r3
 1001 0028 9BB2     		uxth	r3, r3
 1002 002a D31A     		sub	r3, r2, r3
 1003 002c 9AB2     		uxth	r2, r3
 1004 002e BB1C     		add	r3, r7, #2
 1005 0030 1A80     		strh	r2, [r3]
 741:.\Generated_Source\PSoC4/ADC.c **** 
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1006              		.loc 1 742 0
 1007 0032 BB1C     		add	r3, r7, #2
 1008 0034 0021     		mov	r1, #0
 1009 0036 5B5E     		ldrsh	r3, [r3, r1]
 1010 0038 184A     		ldr	r2, .L75+4
 1011 003a 5A43     		mul	r2, r3
 743:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1012              		.loc 1 743 0
 1013 003c BB1C     		add	r3, r7, #2
 1014 003e 0021     		mov	r1, #0
 1015 0040 5B5E     		ldrsh	r3, [r3, r1]
 1016 0042 002B     		cmp	r3, #0
 1017 0044 08DD     		ble	.L70
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 32


 1018              		.loc 1 743 0 is_stmt 0 discriminator 1
 1019 0046 164B     		ldr	r3, .L75+8
 1020 0048 7968     		ldr	r1, [r7, #4]
 1021 004a 8900     		lsl	r1, r1, #2
 1022 004c CB58     		ldr	r3, [r1, r3]
 1023 004e 002B     		cmp	r3, #0
 1024 0050 00DA     		bge	.L71
 1025 0052 0133     		add	r3, r3, #1
 1026              	.L71:
 1027 0054 5B10     		asr	r3, r3, #1
 1028 0056 08E0     		b	.L72
 1029              	.L70:
 1030              		.loc 1 743 0 discriminator 2
 1031 0058 114B     		ldr	r3, .L75+8
 1032 005a 7968     		ldr	r1, [r7, #4]
 1033 005c 8900     		lsl	r1, r1, #2
 1034 005e CB58     		ldr	r3, [r1, r3]
 1035 0060 002B     		cmp	r3, #0
 1036 0062 00DA     		bge	.L73
 1037 0064 0133     		add	r3, r3, #1
 1038              	.L73:
 1039 0066 5B10     		asr	r3, r3, #1
 1040 0068 5B42     		neg	r3, r3
 1041              	.L72:
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1042              		.loc 1 742 0 is_stmt 1
 1043 006a D218     		add	r2, r2, r3
 744:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1044              		.loc 1 744 0
 1045 006c 0C4B     		ldr	r3, .L75+8
 1046 006e 7968     		ldr	r1, [r7, #4]
 1047 0070 8900     		lsl	r1, r1, #2
 1048 0072 CB58     		ldr	r3, [r1, r3]
 1049 0074 101C     		mov	r0, r2
 1050 0076 191C     		mov	r1, r3
 1051 0078 FFF7FEFF 		bl	__aeabi_idiv
 1052 007c 031C     		mov	r3, r0
 1053 007e 1A1C     		mov	r2, r3
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1054              		.loc 1 742 0
 1055 0080 3B1C     		mov	r3, r7
 1056 0082 0E33     		add	r3, r3, #14
 1057 0084 1A80     		strh	r2, [r3]
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1058              		.loc 1 746 0
 1059 0086 3B1C     		mov	r3, r7
 1060 0088 0E33     		add	r3, r3, #14
 1061 008a 1B88     		ldrh	r3, [r3]
 1062 008c 1BB2     		sxth	r3, r3
 747:.\Generated_Source\PSoC4/ADC.c ****     }
 1063              		.loc 1 747 0
 1064 008e 181C     		mov	r0, r3
 1065 0090 BD46     		mov	sp, r7
 1066 0092 04B0     		add	sp, sp, #16
 1067              		@ sp needed
 1068 0094 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 33


 1069              	.L76:
 1070 0096 C046     		.align	2
 1071              	.L75:
 1072 0098 00000000 		.word	ADC_offset
 1073 009c 10270000 		.word	10000
 1074 00a0 00000000 		.word	ADC_countsPer10Volt
 1075              		.cfi_endproc
 1076              	.LFE15:
 1077              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1078              		.global	__aeabi_lmul
 1079              		.global	__aeabi_ldivmod
 1080              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1081              		.align	2
 1082              		.global	ADC_CountsTo_uVolts
 1083              		.code	16
 1084              		.thumb_func
 1085              		.type	ADC_CountsTo_uVolts, %function
 1086              	ADC_CountsTo_uVolts:
 1087              	.LFB16:
 748:.\Generated_Source\PSoC4/ADC.c **** 
 749:.\Generated_Source\PSoC4/ADC.c **** 
 750:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 751:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 752:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 753:.\Generated_Source\PSoC4/ADC.c ****     *
 754:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 755:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 756:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 757:.\Generated_Source\PSoC4/ADC.c ****     *
 758:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 759:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 760:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 764:.\Generated_Source\PSoC4/ADC.c ****     *
 765:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 766:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 767:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 768:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 769:.\Generated_Source\PSoC4/ADC.c ****     *
 770:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 771:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 772:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 773:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 774:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 775:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 776:.\Generated_Source\PSoC4/ADC.c ****     *
 777:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 778:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 779:.\Generated_Source\PSoC4/ADC.c ****     {
 1088              		.loc 1 779 0
 1089              		.cfi_startproc
 1090 0000 B0B5     		push	{r4, r5, r7, lr}
 1091              		.cfi_def_cfa_offset 16
 1092              		.cfi_offset 4, -16
 1093              		.cfi_offset 5, -12
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 34


 1094              		.cfi_offset 7, -8
 1095              		.cfi_offset 14, -4
 1096 0002 86B0     		sub	sp, sp, #24
 1097              		.cfi_def_cfa_offset 40
 1098 0004 00AF     		add	r7, sp, #0
 1099              		.cfi_def_cfa_register 7
 1100 0006 F860     		str	r0, [r7, #12]
 1101 0008 0A1C     		mov	r2, r1
 1102 000a 3B1C     		mov	r3, r7
 1103 000c 0A33     		add	r3, r3, #10
 1104 000e 1A80     		strh	r2, [r3]
 780:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 783:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1105              		.loc 1 783 0
 1106 0010 FB68     		ldr	r3, [r7, #12]
 1107 0012 012B     		cmp	r3, #1
 1108 0014 02D9     		bls	.L78
 1109              		.loc 1 783 0 is_stmt 0 discriminator 1
 1110 0016 0020     		mov	r0, #0
 1111 0018 FFF7FEFF 		bl	CyHalt
 1112              	.L78:
 784:.\Generated_Source\PSoC4/ADC.c **** 
 785:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 786:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 787:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 788:.\Generated_Source\PSoC4/ADC.c ****             {
 789:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 790:.\Generated_Source\PSoC4/ADC.c ****             }
 791:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 794:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1113              		.loc 1 794 0 is_stmt 1
 1114 001c 3B1C     		mov	r3, r7
 1115 001e 0A33     		add	r3, r3, #10
 1116 0020 1A88     		ldrh	r2, [r3]
 1117 0022 1B4B     		ldr	r3, .L80+8
 1118 0024 F968     		ldr	r1, [r7, #12]
 1119 0026 4900     		lsl	r1, r1, #1
 1120 0028 CB5A     		ldrh	r3, [r1, r3]
 1121 002a 9BB2     		uxth	r3, r3
 1122 002c 9BB2     		uxth	r3, r3
 1123 002e D31A     		sub	r3, r2, r3
 1124 0030 9AB2     		uxth	r2, r3
 1125 0032 3B1C     		mov	r3, r7
 1126 0034 0A33     		add	r3, r3, #10
 1127 0036 1A80     		strh	r2, [r3]
 795:.\Generated_Source\PSoC4/ADC.c **** 
 796:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1128              		.loc 1 796 0
 1129 0038 3B1C     		mov	r3, r7
 1130 003a 0A33     		add	r3, r3, #10
 1131 003c 1B88     		ldrh	r3, [r3]
 1132 003e 1BB2     		sxth	r3, r3
 1133 0040 3B60     		str	r3, [r7]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 35


 1134 0042 DB17     		asr	r3, r3, #31
 1135 0044 7B60     		str	r3, [r7, #4]
 1136 0046 3868     		ldr	r0, [r7]
 1137 0048 7968     		ldr	r1, [r7, #4]
 1138 004a 104B     		ldr	r3, .L80+4
 1139 004c 0E4A     		ldr	r2, .L80
 1140 004e FFF7FEFF 		bl	__aeabi_lmul
 1141 0052 021C     		mov	r2, r0
 1142 0054 0B1C     		mov	r3, r1
 1143 0056 0F49     		ldr	r1, .L80+12
 1144 0058 F868     		ldr	r0, [r7, #12]
 1145 005a 8000     		lsl	r0, r0, #2
 1146 005c 4158     		ldr	r1, [r0, r1]
 1147 005e 0C1C     		mov	r4, r1
 1148 0060 C917     		asr	r1, r1, #31
 1149 0062 0D1C     		mov	r5, r1
 1150 0064 101C     		mov	r0, r2
 1151 0066 191C     		mov	r1, r3
 1152 0068 221C     		mov	r2, r4
 1153 006a 2B1C     		mov	r3, r5
 1154 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1155 0070 031C     		mov	r3, r0
 1156 0072 0C1C     		mov	r4, r1
 1157 0074 3B61     		str	r3, [r7, #16]
 1158 0076 7C61     		str	r4, [r7, #20]
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1159              		.loc 1 798 0
 1160 0078 3B69     		ldr	r3, [r7, #16]
 799:.\Generated_Source\PSoC4/ADC.c ****     }
 1161              		.loc 1 799 0
 1162 007a 181C     		mov	r0, r3
 1163 007c BD46     		mov	sp, r7
 1164 007e 06B0     		add	sp, sp, #24
 1165              		@ sp needed
 1166 0080 B0BD     		pop	{r4, r5, r7, pc}
 1167              	.L81:
 1168 0082 C046C046 		.align	3
 1168      C046
 1169              	.L80:
 1170 0088 80969800 		.word	10000000
 1171 008c 00000000 		.word	0
 1172 0090 00000000 		.word	ADC_offset
 1173 0094 00000000 		.word	ADC_countsPer10Volt
 1174              		.cfi_endproc
 1175              	.LFE16:
 1176              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1177              		.global	__aeabi_i2f
 1178              		.global	__aeabi_fmul
 1179              		.global	__aeabi_fdiv
 1180              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1181              		.align	2
 1182              		.global	ADC_CountsTo_Volts
 1183              		.code	16
 1184              		.thumb_func
 1185              		.type	ADC_CountsTo_Volts, %function
 1186              	ADC_CountsTo_Volts:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 36


 1187              	.LFB17:
 800:.\Generated_Source\PSoC4/ADC.c **** 
 801:.\Generated_Source\PSoC4/ADC.c **** 
 802:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 803:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 804:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 805:.\Generated_Source\PSoC4/ADC.c ****     *
 806:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 807:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 808:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 809:.\Generated_Source\PSoC4/ADC.c ****     *
 810:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 811:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 816:.\Generated_Source\PSoC4/ADC.c ****     *
 817:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 818:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 819:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 820:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 821:.\Generated_Source\PSoC4/ADC.c ****     *
 822:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 823:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 824:.\Generated_Source\PSoC4/ADC.c ****     {
 1188              		.loc 1 824 0
 1189              		.cfi_startproc
 1190 0000 90B5     		push	{r4, r7, lr}
 1191              		.cfi_def_cfa_offset 12
 1192              		.cfi_offset 4, -12
 1193              		.cfi_offset 7, -8
 1194              		.cfi_offset 14, -4
 1195 0002 85B0     		sub	sp, sp, #20
 1196              		.cfi_def_cfa_offset 32
 1197 0004 00AF     		add	r7, sp, #0
 1198              		.cfi_def_cfa_register 7
 1199 0006 7860     		str	r0, [r7, #4]
 1200 0008 0A1C     		mov	r2, r1
 1201 000a BB1C     		add	r3, r7, #2
 1202 000c 1A80     		strh	r2, [r3]
 825:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 828:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1203              		.loc 1 828 0
 1204 000e 7B68     		ldr	r3, [r7, #4]
 1205 0010 012B     		cmp	r3, #1
 1206 0012 02D9     		bls	.L83
 1207              		.loc 1 828 0 is_stmt 0 discriminator 1
 1208 0014 0020     		mov	r0, #0
 1209 0016 FFF7FEFF 		bl	CyHalt
 1210              	.L83:
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 831:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 832:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 37


 833:.\Generated_Source\PSoC4/ADC.c ****             {
 834:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 835:.\Generated_Source\PSoC4/ADC.c ****             }
 836:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 839:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1211              		.loc 1 839 0 is_stmt 1
 1212 001a BB1C     		add	r3, r7, #2
 1213 001c 1A88     		ldrh	r2, [r3]
 1214 001e 154B     		ldr	r3, .L85
 1215 0020 7968     		ldr	r1, [r7, #4]
 1216 0022 4900     		lsl	r1, r1, #1
 1217 0024 CB5A     		ldrh	r3, [r1, r3]
 1218 0026 9BB2     		uxth	r3, r3
 1219 0028 9BB2     		uxth	r3, r3
 1220 002a D31A     		sub	r3, r2, r3
 1221 002c 9AB2     		uxth	r2, r3
 1222 002e BB1C     		add	r3, r7, #2
 1223 0030 1A80     		strh	r2, [r3]
 840:.\Generated_Source\PSoC4/ADC.c **** 
 841:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1224              		.loc 1 841 0
 1225 0032 BB1C     		add	r3, r7, #2
 1226 0034 0022     		mov	r2, #0
 1227 0036 9B5E     		ldrsh	r3, [r3, r2]
 1228 0038 181C     		mov	r0, r3
 1229 003a FFF7FEFF 		bl	__aeabi_i2f
 1230 003e 031C     		add	r3, r0, #0
 1231 0040 181C     		add	r0, r3, #0
 1232 0042 0D49     		ldr	r1, .L85+4
 1233 0044 FFF7FEFF 		bl	__aeabi_fmul
 1234 0048 031C     		add	r3, r0, #0
 1235 004a 1C1C     		add	r4, r3, #0
 1236 004c 0B4B     		ldr	r3, .L85+8
 1237 004e 7A68     		ldr	r2, [r7, #4]
 1238 0050 9200     		lsl	r2, r2, #2
 1239 0052 D358     		ldr	r3, [r2, r3]
 1240 0054 181C     		mov	r0, r3
 1241 0056 FFF7FEFF 		bl	__aeabi_i2f
 1242 005a 031C     		add	r3, r0, #0
 1243 005c 201C     		add	r0, r4, #0
 1244 005e 191C     		add	r1, r3, #0
 1245 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1246 0064 031C     		add	r3, r0, #0
 1247 0066 FB60     		str	r3, [r7, #12]
 842:.\Generated_Source\PSoC4/ADC.c **** 
 843:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1248              		.loc 1 843 0
 1249 0068 FB68     		ldr	r3, [r7, #12]
 844:.\Generated_Source\PSoC4/ADC.c ****     }
 1250              		.loc 1 844 0
 1251 006a 181C     		add	r0, r3, #0
 1252 006c BD46     		mov	sp, r7
 1253 006e 05B0     		add	sp, sp, #20
 1254              		@ sp needed
 1255 0070 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 38


 1256              	.L86:
 1257 0072 C046     		.align	2
 1258              	.L85:
 1259 0074 00000000 		.word	ADC_offset
 1260 0078 00002041 		.word	1092616192
 1261 007c 00000000 		.word	ADC_countsPer10Volt
 1262              		.cfi_endproc
 1263              	.LFE17:
 1264              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1265              		.section	.rodata
 1266              		.align	2
 1267              		.type	ADC_InputsPlacement.4717, %object
 1268              		.size	ADC_InputsPlacement.4717, 2
 1269              	ADC_InputsPlacement.4717:
 1270 0008 13       		.byte	19
 1271 0009 00       		.byte	0
 1272 000a 0000     		.text
 1273              	.Letext0:
 1274              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1275              		.section	.debug_info,"",%progbits
 1276              	.Ldebug_info0:
 1277 0000 96040000 		.4byte	0x496
 1278 0004 0400     		.2byte	0x4
 1279 0006 00000000 		.4byte	.Ldebug_abbrev0
 1280 000a 04       		.byte	0x4
 1281 000b 01       		.uleb128 0x1
 1282 000c EA010000 		.4byte	.LASF60
 1283 0010 01       		.byte	0x1
 1284 0011 D0020000 		.4byte	.LASF61
 1285 0015 66020000 		.4byte	.LASF62
 1286 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1287 001d 00000000 		.4byte	0
 1288 0021 00000000 		.4byte	.Ldebug_line0
 1289 0025 02       		.uleb128 0x2
 1290 0026 01       		.byte	0x1
 1291 0027 06       		.byte	0x6
 1292 0028 7C000000 		.4byte	.LASF0
 1293 002c 02       		.uleb128 0x2
 1294 002d 01       		.byte	0x1
 1295 002e 08       		.byte	0x8
 1296 002f EF020000 		.4byte	.LASF1
 1297 0033 02       		.uleb128 0x2
 1298 0034 02       		.byte	0x2
 1299 0035 05       		.byte	0x5
 1300 0036 08030000 		.4byte	.LASF2
 1301 003a 02       		.uleb128 0x2
 1302 003b 02       		.byte	0x2
 1303 003c 07       		.byte	0x7
 1304 003d 53010000 		.4byte	.LASF3
 1305 0041 02       		.uleb128 0x2
 1306 0042 04       		.byte	0x4
 1307 0043 05       		.byte	0x5
 1308 0044 9F000000 		.4byte	.LASF4
 1309 0048 02       		.uleb128 0x2
 1310 0049 04       		.byte	0x4
 1311 004a 07       		.byte	0x7
 1312 004b 22010000 		.4byte	.LASF5
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 39


 1313 004f 02       		.uleb128 0x2
 1314 0050 08       		.byte	0x8
 1315 0051 05       		.byte	0x5
 1316 0052 6E000000 		.4byte	.LASF6
 1317 0056 02       		.uleb128 0x2
 1318 0057 08       		.byte	0x8
 1319 0058 07       		.byte	0x7
 1320 0059 32000000 		.4byte	.LASF7
 1321 005d 03       		.uleb128 0x3
 1322 005e 04       		.byte	0x4
 1323 005f 05       		.byte	0x5
 1324 0060 696E7400 		.ascii	"int\000"
 1325 0064 02       		.uleb128 0x2
 1326 0065 04       		.byte	0x4
 1327 0066 07       		.byte	0x7
 1328 0067 0E010000 		.4byte	.LASF8
 1329 006b 04       		.uleb128 0x4
 1330 006c D0000000 		.4byte	.LASF9
 1331 0070 02       		.byte	0x2
 1332 0071 A1       		.byte	0xa1
 1333 0072 2C000000 		.4byte	0x2c
 1334 0076 04       		.uleb128 0x4
 1335 0077 00000000 		.4byte	.LASF10
 1336 007b 02       		.byte	0x2
 1337 007c A2       		.byte	0xa2
 1338 007d 3A000000 		.4byte	0x3a
 1339 0081 04       		.uleb128 0x4
 1340 0082 DD000000 		.4byte	.LASF11
 1341 0086 02       		.byte	0x2
 1342 0087 A3       		.byte	0xa3
 1343 0088 48000000 		.4byte	0x48
 1344 008c 04       		.uleb128 0x4
 1345 008d 64030000 		.4byte	.LASF12
 1346 0091 02       		.byte	0x2
 1347 0092 A5       		.byte	0xa5
 1348 0093 33000000 		.4byte	0x33
 1349 0097 04       		.uleb128 0x4
 1350 0098 8F000000 		.4byte	.LASF13
 1351 009c 02       		.byte	0x2
 1352 009d A6       		.byte	0xa6
 1353 009e 41000000 		.4byte	0x41
 1354 00a2 04       		.uleb128 0x4
 1355 00a3 83010000 		.4byte	.LASF14
 1356 00a7 02       		.byte	0x2
 1357 00a8 A7       		.byte	0xa7
 1358 00a9 AD000000 		.4byte	0xad
 1359 00ad 02       		.uleb128 0x2
 1360 00ae 04       		.byte	0x4
 1361 00af 04       		.byte	0x4
 1362 00b0 E4010000 		.4byte	.LASF15
 1363 00b4 02       		.uleb128 0x2
 1364 00b5 08       		.byte	0x8
 1365 00b6 04       		.byte	0x4
 1366 00b7 D6000000 		.4byte	.LASF16
 1367 00bb 04       		.uleb128 0x4
 1368 00bc C2010000 		.4byte	.LASF17
 1369 00c0 02       		.byte	0x2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 40


 1370 00c1 AC       		.byte	0xac
 1371 00c2 4F000000 		.4byte	0x4f
 1372 00c6 02       		.uleb128 0x2
 1373 00c7 01       		.byte	0x1
 1374 00c8 08       		.byte	0x8
 1375 00c9 26030000 		.4byte	.LASF18
 1376 00cd 05       		.uleb128 0x5
 1377 00ce 7D010000 		.4byte	.LASF19
 1378 00d2 02       		.byte	0x2
 1379 00d3 4D01     		.2byte	0x14d
 1380 00d5 D9000000 		.4byte	0xd9
 1381 00d9 06       		.uleb128 0x6
 1382 00da 81000000 		.4byte	0x81
 1383 00de 02       		.uleb128 0x2
 1384 00df 04       		.byte	0x4
 1385 00e0 07       		.byte	0x7
 1386 00e1 8B010000 		.4byte	.LASF20
 1387 00e5 07       		.uleb128 0x7
 1388 00e6 95000000 		.4byte	.LASF25
 1389 00ea 01       		.byte	0x1
 1390 00eb 3F       		.byte	0x3f
 1391 00ec 00000000 		.4byte	.LFB0
 1392 00f0 24000000 		.4byte	.LFE0-.LFB0
 1393 00f4 01       		.uleb128 0x1
 1394 00f5 9C       		.byte	0x9c
 1395 00f6 08       		.uleb128 0x8
 1396 00f7 29000000 		.4byte	.LASF36
 1397 00fb 01       		.byte	0x1
 1398 00fc 5E       		.byte	0x5e
 1399 00fd 00000000 		.4byte	.LFB1
 1400 0101 18020000 		.4byte	.LFE1-.LFB1
 1401 0105 01       		.uleb128 0x1
 1402 0106 9C       		.byte	0x9c
 1403 0107 47010000 		.4byte	0x147
 1404 010b 09       		.uleb128 0x9
 1405 010c 1B030000 		.4byte	.LASF21
 1406 0110 01       		.byte	0x1
 1407 0111 60       		.byte	0x60
 1408 0112 81000000 		.4byte	0x81
 1409 0116 02       		.uleb128 0x2
 1410 0117 91       		.byte	0x91
 1411 0118 6C       		.sleb128 -20
 1412 0119 09       		.uleb128 0x9
 1413 011a 49010000 		.4byte	.LASF22
 1414 011e 01       		.byte	0x1
 1415 011f 61       		.byte	0x61
 1416 0120 81000000 		.4byte	0x81
 1417 0124 02       		.uleb128 0x2
 1418 0125 91       		.byte	0x91
 1419 0126 64       		.sleb128 -28
 1420 0127 09       		.uleb128 0x9
 1421 0128 0F000000 		.4byte	.LASF23
 1422 012c 01       		.byte	0x1
 1423 012d 62       		.byte	0x62
 1424 012e 97000000 		.4byte	0x97
 1425 0132 02       		.uleb128 0x2
 1426 0133 91       		.byte	0x91
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 41


 1427 0134 68       		.sleb128 -24
 1428 0135 09       		.uleb128 0x9
 1429 0136 49000000 		.4byte	.LASF24
 1430 013a 01       		.byte	0x1
 1431 013b 65       		.byte	0x65
 1432 013c 57010000 		.4byte	0x157
 1433 0140 05       		.uleb128 0x5
 1434 0141 03       		.byte	0x3
 1435 0142 08000000 		.4byte	ADC_InputsPlacement.4717
 1436 0146 00       		.byte	0
 1437 0147 0A       		.uleb128 0xa
 1438 0148 6B000000 		.4byte	0x6b
 1439 014c 57010000 		.4byte	0x157
 1440 0150 0B       		.uleb128 0xb
 1441 0151 DE000000 		.4byte	0xde
 1442 0155 01       		.byte	0x1
 1443 0156 00       		.byte	0
 1444 0157 0C       		.uleb128 0xc
 1445 0158 47010000 		.4byte	0x147
 1446 015c 0D       		.uleb128 0xd
 1447 015d 4F030000 		.4byte	.LASF26
 1448 0161 01       		.byte	0x1
 1449 0162 2A01     		.2byte	0x12a
 1450 0164 00000000 		.4byte	.LFB2
 1451 0168 28000000 		.4byte	.LFE2-.LFB2
 1452 016c 01       		.uleb128 0x1
 1453 016d 9C       		.byte	0x9c
 1454 016e 0E       		.uleb128 0xe
 1455 016f 12030000 		.4byte	.LASF27
 1456 0173 01       		.byte	0x1
 1457 0174 4D01     		.2byte	0x14d
 1458 0176 00000000 		.4byte	.LFB3
 1459 017a 18000000 		.4byte	.LFE3-.LFB3
 1460 017e 01       		.uleb128 0x1
 1461 017f 9C       		.byte	0x9c
 1462 0180 0E       		.uleb128 0xe
 1463 0181 5D000000 		.4byte	.LASF28
 1464 0185 01       		.byte	0x1
 1465 0186 6701     		.2byte	0x167
 1466 0188 00000000 		.4byte	.LFB4
 1467 018c 1C000000 		.4byte	.LFE4-.LFB4
 1468 0190 01       		.uleb128 0x1
 1469 0191 9C       		.byte	0x9c
 1470 0192 0E       		.uleb128 0xe
 1471 0193 66010000 		.4byte	.LASF29
 1472 0197 01       		.byte	0x1
 1473 0198 8001     		.2byte	0x180
 1474 019a 00000000 		.4byte	.LFB5
 1475 019e 1C000000 		.4byte	.LFE5-.LFB5
 1476 01a2 01       		.uleb128 0x1
 1477 01a3 9C       		.byte	0x9c
 1478 01a4 0F       		.uleb128 0xf
 1479 01a5 AE010000 		.4byte	.LASF31
 1480 01a9 01       		.byte	0x1
 1481 01aa A201     		.2byte	0x1a2
 1482 01ac 81000000 		.4byte	0x81
 1483 01b0 00000000 		.4byte	.LFB6
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 42


 1484 01b4 48000000 		.4byte	.LFE6-.LFB6
 1485 01b8 01       		.uleb128 0x1
 1486 01b9 9C       		.byte	0x9c
 1487 01ba DD010000 		.4byte	0x1dd
 1488 01be 10       		.uleb128 0x10
 1489 01bf F5000000 		.4byte	.LASF33
 1490 01c3 01       		.byte	0x1
 1491 01c4 A201     		.2byte	0x1a2
 1492 01c6 81000000 		.4byte	0x81
 1493 01ca 02       		.uleb128 0x2
 1494 01cb 91       		.byte	0x91
 1495 01cc 6C       		.sleb128 -20
 1496 01cd 11       		.uleb128 0x11
 1497 01ce 88000000 		.4byte	.LASF30
 1498 01d2 01       		.byte	0x1
 1499 01d3 A401     		.2byte	0x1a4
 1500 01d5 81000000 		.4byte	0x81
 1501 01d9 02       		.uleb128 0x2
 1502 01da 91       		.byte	0x91
 1503 01db 74       		.sleb128 -12
 1504 01dc 00       		.byte	0
 1505 01dd 12       		.uleb128 0x12
 1506 01de 7F030000 		.4byte	.LASF32
 1507 01e2 01       		.byte	0x1
 1508 01e3 D801     		.2byte	0x1d8
 1509 01e5 8C000000 		.4byte	0x8c
 1510 01e9 00000000 		.4byte	.LFB7
 1511 01ed 44000000 		.4byte	.LFE7-.LFB7
 1512 01f1 01       		.uleb128 0x1
 1513 01f2 9C       		.byte	0x9c
 1514 01f3 16020000 		.4byte	0x216
 1515 01f7 10       		.uleb128 0x10
 1516 01f8 21030000 		.4byte	.LASF34
 1517 01fc 01       		.byte	0x1
 1518 01fd D801     		.2byte	0x1d8
 1519 01ff 81000000 		.4byte	0x81
 1520 0203 02       		.uleb128 0x2
 1521 0204 91       		.byte	0x91
 1522 0205 6C       		.sleb128 -20
 1523 0206 11       		.uleb128 0x11
 1524 0207 78030000 		.4byte	.LASF35
 1525 020b 01       		.byte	0x1
 1526 020c DA01     		.2byte	0x1da
 1527 020e 81000000 		.4byte	0x81
 1528 0212 02       		.uleb128 0x2
 1529 0213 91       		.byte	0x91
 1530 0214 74       		.sleb128 -12
 1531 0215 00       		.byte	0
 1532 0216 13       		.uleb128 0x13
 1533 0217 C8010000 		.4byte	.LASF37
 1534 021b 01       		.byte	0x1
 1535 021c 0502     		.2byte	0x205
 1536 021e 00000000 		.4byte	.LFB8
 1537 0222 1C000000 		.4byte	.LFE8-.LFB8
 1538 0226 01       		.uleb128 0x1
 1539 0227 9C       		.byte	0x9c
 1540 0228 3C020000 		.4byte	0x23c
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 43


 1541 022c 10       		.uleb128 0x10
 1542 022d E4000000 		.4byte	.LASF38
 1543 0231 01       		.byte	0x1
 1544 0232 0502     		.2byte	0x205
 1545 0234 81000000 		.4byte	0x81
 1546 0238 02       		.uleb128 0x2
 1547 0239 91       		.byte	0x91
 1548 023a 74       		.sleb128 -12
 1549 023b 00       		.byte	0
 1550 023c 13       		.uleb128 0x13
 1551 023d C0020000 		.4byte	.LASF39
 1552 0241 01       		.byte	0x1
 1553 0242 3102     		.2byte	0x231
 1554 0244 00000000 		.4byte	.LFB9
 1555 0248 30000000 		.4byte	.LFE9-.LFB9
 1556 024c 01       		.uleb128 0x1
 1557 024d 9C       		.byte	0x9c
 1558 024e 62020000 		.4byte	0x262
 1559 0252 10       		.uleb128 0x10
 1560 0253 94010000 		.4byte	.LASF40
 1561 0257 01       		.byte	0x1
 1562 0258 3102     		.2byte	0x231
 1563 025a 81000000 		.4byte	0x81
 1564 025e 02       		.uleb128 0x2
 1565 025f 91       		.byte	0x91
 1566 0260 74       		.sleb128 -12
 1567 0261 00       		.byte	0
 1568 0262 13       		.uleb128 0x13
 1569 0263 9D010000 		.4byte	.LASF41
 1570 0267 01       		.byte	0x1
 1571 0268 4602     		.2byte	0x246
 1572 026a 00000000 		.4byte	.LFB10
 1573 026e 2C000000 		.4byte	.LFE10-.LFB10
 1574 0272 01       		.uleb128 0x1
 1575 0273 9C       		.byte	0x9c
 1576 0274 88020000 		.4byte	0x288
 1577 0278 10       		.uleb128 0x10
 1578 0279 5A030000 		.4byte	.LASF42
 1579 027d 01       		.byte	0x1
 1580 027e 4602     		.2byte	0x246
 1581 0280 81000000 		.4byte	0x81
 1582 0284 02       		.uleb128 0x2
 1583 0285 91       		.byte	0x91
 1584 0286 74       		.sleb128 -12
 1585 0287 00       		.byte	0
 1586 0288 13       		.uleb128 0x13
 1587 0289 FD000000 		.4byte	.LASF43
 1588 028d 01       		.byte	0x1
 1589 028e 5E02     		.2byte	0x25e
 1590 0290 00000000 		.4byte	.LFB11
 1591 0294 1C000000 		.4byte	.LFE11-.LFB11
 1592 0298 01       		.uleb128 0x1
 1593 0299 9C       		.byte	0x9c
 1594 029a AE020000 		.4byte	0x2ae
 1595 029e 10       		.uleb128 0x10
 1596 029f E4000000 		.4byte	.LASF38
 1597 02a3 01       		.byte	0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 44


 1598 02a4 5E02     		.2byte	0x25e
 1599 02a6 81000000 		.4byte	0x81
 1600 02aa 02       		.uleb128 0x2
 1601 02ab 91       		.byte	0x91
 1602 02ac 74       		.sleb128 -12
 1603 02ad 00       		.byte	0
 1604 02ae 13       		.uleb128 0x13
 1605 02af 34010000 		.4byte	.LASF44
 1606 02b3 01       		.byte	0x1
 1607 02b4 7502     		.2byte	0x275
 1608 02b6 00000000 		.4byte	.LFB12
 1609 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1610 02be 01       		.uleb128 0x1
 1611 02bf 9C       		.byte	0x9c
 1612 02c0 D4020000 		.4byte	0x2d4
 1613 02c4 10       		.uleb128 0x10
 1614 02c5 E4000000 		.4byte	.LASF38
 1615 02c9 01       		.byte	0x1
 1616 02ca 7502     		.2byte	0x275
 1617 02cc 81000000 		.4byte	0x81
 1618 02d0 02       		.uleb128 0x2
 1619 02d1 91       		.byte	0x91
 1620 02d2 74       		.sleb128 -12
 1621 02d3 00       		.byte	0
 1622 02d4 14       		.uleb128 0x14
 1623 02d5 6A030000 		.4byte	.LASF45
 1624 02d9 01       		.byte	0x1
 1625 02da 9102     		.2byte	0x291
 1626 02dc 00000000 		.4byte	.LFB13
 1627 02e0 30000000 		.4byte	.LFE13-.LFB13
 1628 02e4 01       		.uleb128 0x1
 1629 02e5 9C       		.byte	0x9c
 1630 02e6 09030000 		.4byte	0x309
 1631 02ea 10       		.uleb128 0x10
 1632 02eb 21030000 		.4byte	.LASF34
 1633 02ef 01       		.byte	0x1
 1634 02f0 9102     		.2byte	0x291
 1635 02f2 81000000 		.4byte	0x81
 1636 02f6 02       		.uleb128 0x2
 1637 02f7 91       		.byte	0x91
 1638 02f8 74       		.sleb128 -12
 1639 02f9 10       		.uleb128 0x10
 1640 02fa 3E030000 		.4byte	.LASF46
 1641 02fe 01       		.byte	0x1
 1642 02ff 9102     		.2byte	0x291
 1643 0301 8C000000 		.4byte	0x8c
 1644 0305 02       		.uleb128 0x2
 1645 0306 91       		.byte	0x91
 1646 0307 72       		.sleb128 -14
 1647 0308 00       		.byte	0
 1648 0309 14       		.uleb128 0x14
 1649 030a D8010000 		.4byte	.LASF47
 1650 030e 01       		.byte	0x1
 1651 030f B302     		.2byte	0x2b3
 1652 0311 00000000 		.4byte	.LFB14
 1653 0315 2C000000 		.4byte	.LFE14-.LFB14
 1654 0319 01       		.uleb128 0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 45


 1655 031a 9C       		.byte	0x9c
 1656 031b 3E030000 		.4byte	0x33e
 1657 031f 10       		.uleb128 0x10
 1658 0320 21030000 		.4byte	.LASF34
 1659 0324 01       		.byte	0x1
 1660 0325 B302     		.2byte	0x2b3
 1661 0327 81000000 		.4byte	0x81
 1662 032b 02       		.uleb128 0x2
 1663 032c 91       		.byte	0x91
 1664 032d 74       		.sleb128 -12
 1665 032e 10       		.uleb128 0x10
 1666 032f 07000000 		.4byte	.LASF48
 1667 0333 01       		.byte	0x1
 1668 0334 B302     		.2byte	0x2b3
 1669 0336 97000000 		.4byte	0x97
 1670 033a 02       		.uleb128 0x2
 1671 033b 91       		.byte	0x91
 1672 033c 70       		.sleb128 -16
 1673 033d 00       		.byte	0
 1674 033e 12       		.uleb128 0x12
 1675 033f AC020000 		.4byte	.LASF49
 1676 0343 01       		.byte	0x1
 1677 0344 D402     		.2byte	0x2d4
 1678 0346 8C000000 		.4byte	0x8c
 1679 034a 00000000 		.4byte	.LFB15
 1680 034e A4000000 		.4byte	.LFE15-.LFB15
 1681 0352 01       		.uleb128 0x1
 1682 0353 9C       		.byte	0x9c
 1683 0354 86030000 		.4byte	0x386
 1684 0358 10       		.uleb128 0x10
 1685 0359 21030000 		.4byte	.LASF34
 1686 035d 01       		.byte	0x1
 1687 035e D402     		.2byte	0x2d4
 1688 0360 81000000 		.4byte	0x81
 1689 0364 02       		.uleb128 0x2
 1690 0365 91       		.byte	0x91
 1691 0366 6C       		.sleb128 -20
 1692 0367 10       		.uleb128 0x10
 1693 0368 45030000 		.4byte	.LASF50
 1694 036c 01       		.byte	0x1
 1695 036d D402     		.2byte	0x2d4
 1696 036f 8C000000 		.4byte	0x8c
 1697 0373 02       		.uleb128 0x2
 1698 0374 91       		.byte	0x91
 1699 0375 6A       		.sleb128 -22
 1700 0376 11       		.uleb128 0x11
 1701 0377 76010000 		.4byte	.LASF51
 1702 037b 01       		.byte	0x1
 1703 037c D602     		.2byte	0x2d6
 1704 037e 8C000000 		.4byte	0x8c
 1705 0382 02       		.uleb128 0x2
 1706 0383 91       		.byte	0x91
 1707 0384 76       		.sleb128 -10
 1708 0385 00       		.byte	0
 1709 0386 12       		.uleb128 0x12
 1710 0387 A8000000 		.4byte	.LASF52
 1711 038b 01       		.byte	0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 46


 1712 038c 0A03     		.2byte	0x30a
 1713 038e 97000000 		.4byte	0x97
 1714 0392 00000000 		.4byte	.LFB16
 1715 0396 98000000 		.4byte	.LFE16-.LFB16
 1716 039a 01       		.uleb128 0x1
 1717 039b 9C       		.byte	0x9c
 1718 039c CE030000 		.4byte	0x3ce
 1719 03a0 10       		.uleb128 0x10
 1720 03a1 21030000 		.4byte	.LASF34
 1721 03a5 01       		.byte	0x1
 1722 03a6 0A03     		.2byte	0x30a
 1723 03a8 81000000 		.4byte	0x81
 1724 03ac 02       		.uleb128 0x2
 1725 03ad 91       		.byte	0x91
 1726 03ae 64       		.sleb128 -28
 1727 03af 10       		.uleb128 0x10
 1728 03b0 45030000 		.4byte	.LASF50
 1729 03b4 01       		.byte	0x1
 1730 03b5 0A03     		.2byte	0x30a
 1731 03b7 8C000000 		.4byte	0x8c
 1732 03bb 02       		.uleb128 0x2
 1733 03bc 91       		.byte	0x91
 1734 03bd 62       		.sleb128 -30
 1735 03be 11       		.uleb128 0x11
 1736 03bf 1B010000 		.4byte	.LASF53
 1737 03c3 01       		.byte	0x1
 1738 03c4 0C03     		.2byte	0x30c
 1739 03c6 BB000000 		.4byte	0xbb
 1740 03ca 02       		.uleb128 0x2
 1741 03cb 91       		.byte	0x91
 1742 03cc 68       		.sleb128 -24
 1743 03cd 00       		.byte	0
 1744 03ce 12       		.uleb128 0x12
 1745 03cf 16000000 		.4byte	.LASF54
 1746 03d3 01       		.byte	0x1
 1747 03d4 3703     		.2byte	0x337
 1748 03d6 A2000000 		.4byte	0xa2
 1749 03da 00000000 		.4byte	.LFB17
 1750 03de 80000000 		.4byte	.LFE17-.LFB17
 1751 03e2 01       		.uleb128 0x1
 1752 03e3 9C       		.byte	0x9c
 1753 03e4 16040000 		.4byte	0x416
 1754 03e8 10       		.uleb128 0x10
 1755 03e9 21030000 		.4byte	.LASF34
 1756 03ed 01       		.byte	0x1
 1757 03ee 3703     		.2byte	0x337
 1758 03f0 81000000 		.4byte	0x81
 1759 03f4 02       		.uleb128 0x2
 1760 03f5 91       		.byte	0x91
 1761 03f6 64       		.sleb128 -28
 1762 03f7 10       		.uleb128 0x10
 1763 03f8 45030000 		.4byte	.LASF50
 1764 03fc 01       		.byte	0x1
 1765 03fd 3703     		.2byte	0x337
 1766 03ff 8C000000 		.4byte	0x8c
 1767 0403 02       		.uleb128 0x2
 1768 0404 91       		.byte	0x91
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 47


 1769 0405 62       		.sleb128 -30
 1770 0406 11       		.uleb128 0x11
 1771 0407 43010000 		.4byte	.LASF55
 1772 040b 01       		.byte	0x1
 1773 040c 3903     		.2byte	0x339
 1774 040e A2000000 		.4byte	0xa2
 1775 0412 02       		.uleb128 0x2
 1776 0413 91       		.byte	0x91
 1777 0414 6C       		.sleb128 -20
 1778 0415 00       		.byte	0
 1779 0416 0A       		.uleb128 0xa
 1780 0417 81000000 		.4byte	0x81
 1781 041b 26040000 		.4byte	0x426
 1782 041f 0B       		.uleb128 0xb
 1783 0420 DE000000 		.4byte	0xde
 1784 0424 01       		.byte	0x1
 1785 0425 00       		.byte	0
 1786 0426 09       		.uleb128 0x9
 1787 0427 2B030000 		.4byte	.LASF56
 1788 042b 01       		.byte	0x1
 1789 042c 21       		.byte	0x21
 1790 042d 37040000 		.4byte	0x437
 1791 0431 05       		.uleb128 0x5
 1792 0432 03       		.byte	0x3
 1793 0433 00000000 		.4byte	ADC_channelsConfig
 1794 0437 0C       		.uleb128 0xc
 1795 0438 16040000 		.4byte	0x416
 1796 043c 15       		.uleb128 0x15
 1797 043d E9000000 		.4byte	.LASF57
 1798 0441 01       		.byte	0x1
 1799 0442 18       		.byte	0x18
 1800 0443 6B000000 		.4byte	0x6b
 1801 0447 05       		.uleb128 0x5
 1802 0448 03       		.byte	0x3
 1803 0449 00000000 		.4byte	ADC_initVar
 1804 044d 0A       		.uleb128 0xa
 1805 044e 8C000000 		.4byte	0x8c
 1806 0452 5D040000 		.4byte	0x45d
 1807 0456 0B       		.uleb128 0xb
 1808 0457 DE000000 		.4byte	0xde
 1809 045b 01       		.byte	0x1
 1810 045c 00       		.byte	0
 1811 045d 15       		.uleb128 0x15
 1812 045e FD020000 		.4byte	.LASF58
 1813 0462 01       		.byte	0x1
 1814 0463 19       		.byte	0x19
 1815 0464 6E040000 		.4byte	0x46e
 1816 0468 05       		.uleb128 0x5
 1817 0469 03       		.byte	0x3
 1818 046a 00000000 		.4byte	ADC_offset
 1819 046e 06       		.uleb128 0x6
 1820 046f 4D040000 		.4byte	0x44d
 1821 0473 0A       		.uleb128 0xa
 1822 0474 97000000 		.4byte	0x97
 1823 0478 83040000 		.4byte	0x483
 1824 047c 0B       		.uleb128 0xb
 1825 047d DE000000 		.4byte	0xde
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 48


 1826 0481 01       		.byte	0x1
 1827 0482 00       		.byte	0
 1828 0483 15       		.uleb128 0x15
 1829 0484 BC000000 		.4byte	.LASF59
 1830 0488 01       		.byte	0x1
 1831 0489 1A       		.byte	0x1a
 1832 048a 94040000 		.4byte	0x494
 1833 048e 05       		.uleb128 0x5
 1834 048f 03       		.byte	0x3
 1835 0490 00000000 		.4byte	ADC_countsPer10Volt
 1836 0494 06       		.uleb128 0x6
 1837 0495 73040000 		.4byte	0x473
 1838 0499 00       		.byte	0
 1839              		.section	.debug_abbrev,"",%progbits
 1840              	.Ldebug_abbrev0:
 1841 0000 01       		.uleb128 0x1
 1842 0001 11       		.uleb128 0x11
 1843 0002 01       		.byte	0x1
 1844 0003 25       		.uleb128 0x25
 1845 0004 0E       		.uleb128 0xe
 1846 0005 13       		.uleb128 0x13
 1847 0006 0B       		.uleb128 0xb
 1848 0007 03       		.uleb128 0x3
 1849 0008 0E       		.uleb128 0xe
 1850 0009 1B       		.uleb128 0x1b
 1851 000a 0E       		.uleb128 0xe
 1852 000b 55       		.uleb128 0x55
 1853 000c 17       		.uleb128 0x17
 1854 000d 11       		.uleb128 0x11
 1855 000e 01       		.uleb128 0x1
 1856 000f 10       		.uleb128 0x10
 1857 0010 17       		.uleb128 0x17
 1858 0011 00       		.byte	0
 1859 0012 00       		.byte	0
 1860 0013 02       		.uleb128 0x2
 1861 0014 24       		.uleb128 0x24
 1862 0015 00       		.byte	0
 1863 0016 0B       		.uleb128 0xb
 1864 0017 0B       		.uleb128 0xb
 1865 0018 3E       		.uleb128 0x3e
 1866 0019 0B       		.uleb128 0xb
 1867 001a 03       		.uleb128 0x3
 1868 001b 0E       		.uleb128 0xe
 1869 001c 00       		.byte	0
 1870 001d 00       		.byte	0
 1871 001e 03       		.uleb128 0x3
 1872 001f 24       		.uleb128 0x24
 1873 0020 00       		.byte	0
 1874 0021 0B       		.uleb128 0xb
 1875 0022 0B       		.uleb128 0xb
 1876 0023 3E       		.uleb128 0x3e
 1877 0024 0B       		.uleb128 0xb
 1878 0025 03       		.uleb128 0x3
 1879 0026 08       		.uleb128 0x8
 1880 0027 00       		.byte	0
 1881 0028 00       		.byte	0
 1882 0029 04       		.uleb128 0x4
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 49


 1883 002a 16       		.uleb128 0x16
 1884 002b 00       		.byte	0
 1885 002c 03       		.uleb128 0x3
 1886 002d 0E       		.uleb128 0xe
 1887 002e 3A       		.uleb128 0x3a
 1888 002f 0B       		.uleb128 0xb
 1889 0030 3B       		.uleb128 0x3b
 1890 0031 0B       		.uleb128 0xb
 1891 0032 49       		.uleb128 0x49
 1892 0033 13       		.uleb128 0x13
 1893 0034 00       		.byte	0
 1894 0035 00       		.byte	0
 1895 0036 05       		.uleb128 0x5
 1896 0037 16       		.uleb128 0x16
 1897 0038 00       		.byte	0
 1898 0039 03       		.uleb128 0x3
 1899 003a 0E       		.uleb128 0xe
 1900 003b 3A       		.uleb128 0x3a
 1901 003c 0B       		.uleb128 0xb
 1902 003d 3B       		.uleb128 0x3b
 1903 003e 05       		.uleb128 0x5
 1904 003f 49       		.uleb128 0x49
 1905 0040 13       		.uleb128 0x13
 1906 0041 00       		.byte	0
 1907 0042 00       		.byte	0
 1908 0043 06       		.uleb128 0x6
 1909 0044 35       		.uleb128 0x35
 1910 0045 00       		.byte	0
 1911 0046 49       		.uleb128 0x49
 1912 0047 13       		.uleb128 0x13
 1913 0048 00       		.byte	0
 1914 0049 00       		.byte	0
 1915 004a 07       		.uleb128 0x7
 1916 004b 2E       		.uleb128 0x2e
 1917 004c 00       		.byte	0
 1918 004d 3F       		.uleb128 0x3f
 1919 004e 19       		.uleb128 0x19
 1920 004f 03       		.uleb128 0x3
 1921 0050 0E       		.uleb128 0xe
 1922 0051 3A       		.uleb128 0x3a
 1923 0052 0B       		.uleb128 0xb
 1924 0053 3B       		.uleb128 0x3b
 1925 0054 0B       		.uleb128 0xb
 1926 0055 27       		.uleb128 0x27
 1927 0056 19       		.uleb128 0x19
 1928 0057 11       		.uleb128 0x11
 1929 0058 01       		.uleb128 0x1
 1930 0059 12       		.uleb128 0x12
 1931 005a 06       		.uleb128 0x6
 1932 005b 40       		.uleb128 0x40
 1933 005c 18       		.uleb128 0x18
 1934 005d 9642     		.uleb128 0x2116
 1935 005f 19       		.uleb128 0x19
 1936 0060 00       		.byte	0
 1937 0061 00       		.byte	0
 1938 0062 08       		.uleb128 0x8
 1939 0063 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 50


 1940 0064 01       		.byte	0x1
 1941 0065 3F       		.uleb128 0x3f
 1942 0066 19       		.uleb128 0x19
 1943 0067 03       		.uleb128 0x3
 1944 0068 0E       		.uleb128 0xe
 1945 0069 3A       		.uleb128 0x3a
 1946 006a 0B       		.uleb128 0xb
 1947 006b 3B       		.uleb128 0x3b
 1948 006c 0B       		.uleb128 0xb
 1949 006d 27       		.uleb128 0x27
 1950 006e 19       		.uleb128 0x19
 1951 006f 11       		.uleb128 0x11
 1952 0070 01       		.uleb128 0x1
 1953 0071 12       		.uleb128 0x12
 1954 0072 06       		.uleb128 0x6
 1955 0073 40       		.uleb128 0x40
 1956 0074 18       		.uleb128 0x18
 1957 0075 9642     		.uleb128 0x2116
 1958 0077 19       		.uleb128 0x19
 1959 0078 01       		.uleb128 0x1
 1960 0079 13       		.uleb128 0x13
 1961 007a 00       		.byte	0
 1962 007b 00       		.byte	0
 1963 007c 09       		.uleb128 0x9
 1964 007d 34       		.uleb128 0x34
 1965 007e 00       		.byte	0
 1966 007f 03       		.uleb128 0x3
 1967 0080 0E       		.uleb128 0xe
 1968 0081 3A       		.uleb128 0x3a
 1969 0082 0B       		.uleb128 0xb
 1970 0083 3B       		.uleb128 0x3b
 1971 0084 0B       		.uleb128 0xb
 1972 0085 49       		.uleb128 0x49
 1973 0086 13       		.uleb128 0x13
 1974 0087 02       		.uleb128 0x2
 1975 0088 18       		.uleb128 0x18
 1976 0089 00       		.byte	0
 1977 008a 00       		.byte	0
 1978 008b 0A       		.uleb128 0xa
 1979 008c 01       		.uleb128 0x1
 1980 008d 01       		.byte	0x1
 1981 008e 49       		.uleb128 0x49
 1982 008f 13       		.uleb128 0x13
 1983 0090 01       		.uleb128 0x1
 1984 0091 13       		.uleb128 0x13
 1985 0092 00       		.byte	0
 1986 0093 00       		.byte	0
 1987 0094 0B       		.uleb128 0xb
 1988 0095 21       		.uleb128 0x21
 1989 0096 00       		.byte	0
 1990 0097 49       		.uleb128 0x49
 1991 0098 13       		.uleb128 0x13
 1992 0099 2F       		.uleb128 0x2f
 1993 009a 0B       		.uleb128 0xb
 1994 009b 00       		.byte	0
 1995 009c 00       		.byte	0
 1996 009d 0C       		.uleb128 0xc
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 51


 1997 009e 26       		.uleb128 0x26
 1998 009f 00       		.byte	0
 1999 00a0 49       		.uleb128 0x49
 2000 00a1 13       		.uleb128 0x13
 2001 00a2 00       		.byte	0
 2002 00a3 00       		.byte	0
 2003 00a4 0D       		.uleb128 0xd
 2004 00a5 2E       		.uleb128 0x2e
 2005 00a6 00       		.byte	0
 2006 00a7 3F       		.uleb128 0x3f
 2007 00a8 19       		.uleb128 0x19
 2008 00a9 03       		.uleb128 0x3
 2009 00aa 0E       		.uleb128 0xe
 2010 00ab 3A       		.uleb128 0x3a
 2011 00ac 0B       		.uleb128 0xb
 2012 00ad 3B       		.uleb128 0x3b
 2013 00ae 05       		.uleb128 0x5
 2014 00af 27       		.uleb128 0x27
 2015 00b0 19       		.uleb128 0x19
 2016 00b1 11       		.uleb128 0x11
 2017 00b2 01       		.uleb128 0x1
 2018 00b3 12       		.uleb128 0x12
 2019 00b4 06       		.uleb128 0x6
 2020 00b5 40       		.uleb128 0x40
 2021 00b6 18       		.uleb128 0x18
 2022 00b7 9642     		.uleb128 0x2116
 2023 00b9 19       		.uleb128 0x19
 2024 00ba 00       		.byte	0
 2025 00bb 00       		.byte	0
 2026 00bc 0E       		.uleb128 0xe
 2027 00bd 2E       		.uleb128 0x2e
 2028 00be 00       		.byte	0
 2029 00bf 3F       		.uleb128 0x3f
 2030 00c0 19       		.uleb128 0x19
 2031 00c1 03       		.uleb128 0x3
 2032 00c2 0E       		.uleb128 0xe
 2033 00c3 3A       		.uleb128 0x3a
 2034 00c4 0B       		.uleb128 0xb
 2035 00c5 3B       		.uleb128 0x3b
 2036 00c6 05       		.uleb128 0x5
 2037 00c7 27       		.uleb128 0x27
 2038 00c8 19       		.uleb128 0x19
 2039 00c9 11       		.uleb128 0x11
 2040 00ca 01       		.uleb128 0x1
 2041 00cb 12       		.uleb128 0x12
 2042 00cc 06       		.uleb128 0x6
 2043 00cd 40       		.uleb128 0x40
 2044 00ce 18       		.uleb128 0x18
 2045 00cf 9742     		.uleb128 0x2117
 2046 00d1 19       		.uleb128 0x19
 2047 00d2 00       		.byte	0
 2048 00d3 00       		.byte	0
 2049 00d4 0F       		.uleb128 0xf
 2050 00d5 2E       		.uleb128 0x2e
 2051 00d6 01       		.byte	0x1
 2052 00d7 3F       		.uleb128 0x3f
 2053 00d8 19       		.uleb128 0x19
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 52


 2054 00d9 03       		.uleb128 0x3
 2055 00da 0E       		.uleb128 0xe
 2056 00db 3A       		.uleb128 0x3a
 2057 00dc 0B       		.uleb128 0xb
 2058 00dd 3B       		.uleb128 0x3b
 2059 00de 05       		.uleb128 0x5
 2060 00df 27       		.uleb128 0x27
 2061 00e0 19       		.uleb128 0x19
 2062 00e1 49       		.uleb128 0x49
 2063 00e2 13       		.uleb128 0x13
 2064 00e3 11       		.uleb128 0x11
 2065 00e4 01       		.uleb128 0x1
 2066 00e5 12       		.uleb128 0x12
 2067 00e6 06       		.uleb128 0x6
 2068 00e7 40       		.uleb128 0x40
 2069 00e8 18       		.uleb128 0x18
 2070 00e9 9742     		.uleb128 0x2117
 2071 00eb 19       		.uleb128 0x19
 2072 00ec 01       		.uleb128 0x1
 2073 00ed 13       		.uleb128 0x13
 2074 00ee 00       		.byte	0
 2075 00ef 00       		.byte	0
 2076 00f0 10       		.uleb128 0x10
 2077 00f1 05       		.uleb128 0x5
 2078 00f2 00       		.byte	0
 2079 00f3 03       		.uleb128 0x3
 2080 00f4 0E       		.uleb128 0xe
 2081 00f5 3A       		.uleb128 0x3a
 2082 00f6 0B       		.uleb128 0xb
 2083 00f7 3B       		.uleb128 0x3b
 2084 00f8 05       		.uleb128 0x5
 2085 00f9 49       		.uleb128 0x49
 2086 00fa 13       		.uleb128 0x13
 2087 00fb 02       		.uleb128 0x2
 2088 00fc 18       		.uleb128 0x18
 2089 00fd 00       		.byte	0
 2090 00fe 00       		.byte	0
 2091 00ff 11       		.uleb128 0x11
 2092 0100 34       		.uleb128 0x34
 2093 0101 00       		.byte	0
 2094 0102 03       		.uleb128 0x3
 2095 0103 0E       		.uleb128 0xe
 2096 0104 3A       		.uleb128 0x3a
 2097 0105 0B       		.uleb128 0xb
 2098 0106 3B       		.uleb128 0x3b
 2099 0107 05       		.uleb128 0x5
 2100 0108 49       		.uleb128 0x49
 2101 0109 13       		.uleb128 0x13
 2102 010a 02       		.uleb128 0x2
 2103 010b 18       		.uleb128 0x18
 2104 010c 00       		.byte	0
 2105 010d 00       		.byte	0
 2106 010e 12       		.uleb128 0x12
 2107 010f 2E       		.uleb128 0x2e
 2108 0110 01       		.byte	0x1
 2109 0111 3F       		.uleb128 0x3f
 2110 0112 19       		.uleb128 0x19
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 53


 2111 0113 03       		.uleb128 0x3
 2112 0114 0E       		.uleb128 0xe
 2113 0115 3A       		.uleb128 0x3a
 2114 0116 0B       		.uleb128 0xb
 2115 0117 3B       		.uleb128 0x3b
 2116 0118 05       		.uleb128 0x5
 2117 0119 27       		.uleb128 0x27
 2118 011a 19       		.uleb128 0x19
 2119 011b 49       		.uleb128 0x49
 2120 011c 13       		.uleb128 0x13
 2121 011d 11       		.uleb128 0x11
 2122 011e 01       		.uleb128 0x1
 2123 011f 12       		.uleb128 0x12
 2124 0120 06       		.uleb128 0x6
 2125 0121 40       		.uleb128 0x40
 2126 0122 18       		.uleb128 0x18
 2127 0123 9642     		.uleb128 0x2116
 2128 0125 19       		.uleb128 0x19
 2129 0126 01       		.uleb128 0x1
 2130 0127 13       		.uleb128 0x13
 2131 0128 00       		.byte	0
 2132 0129 00       		.byte	0
 2133 012a 13       		.uleb128 0x13
 2134 012b 2E       		.uleb128 0x2e
 2135 012c 01       		.byte	0x1
 2136 012d 3F       		.uleb128 0x3f
 2137 012e 19       		.uleb128 0x19
 2138 012f 03       		.uleb128 0x3
 2139 0130 0E       		.uleb128 0xe
 2140 0131 3A       		.uleb128 0x3a
 2141 0132 0B       		.uleb128 0xb
 2142 0133 3B       		.uleb128 0x3b
 2143 0134 05       		.uleb128 0x5
 2144 0135 27       		.uleb128 0x27
 2145 0136 19       		.uleb128 0x19
 2146 0137 11       		.uleb128 0x11
 2147 0138 01       		.uleb128 0x1
 2148 0139 12       		.uleb128 0x12
 2149 013a 06       		.uleb128 0x6
 2150 013b 40       		.uleb128 0x40
 2151 013c 18       		.uleb128 0x18
 2152 013d 9742     		.uleb128 0x2117
 2153 013f 19       		.uleb128 0x19
 2154 0140 01       		.uleb128 0x1
 2155 0141 13       		.uleb128 0x13
 2156 0142 00       		.byte	0
 2157 0143 00       		.byte	0
 2158 0144 14       		.uleb128 0x14
 2159 0145 2E       		.uleb128 0x2e
 2160 0146 01       		.byte	0x1
 2161 0147 3F       		.uleb128 0x3f
 2162 0148 19       		.uleb128 0x19
 2163 0149 03       		.uleb128 0x3
 2164 014a 0E       		.uleb128 0xe
 2165 014b 3A       		.uleb128 0x3a
 2166 014c 0B       		.uleb128 0xb
 2167 014d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 54


 2168 014e 05       		.uleb128 0x5
 2169 014f 27       		.uleb128 0x27
 2170 0150 19       		.uleb128 0x19
 2171 0151 11       		.uleb128 0x11
 2172 0152 01       		.uleb128 0x1
 2173 0153 12       		.uleb128 0x12
 2174 0154 06       		.uleb128 0x6
 2175 0155 40       		.uleb128 0x40
 2176 0156 18       		.uleb128 0x18
 2177 0157 9642     		.uleb128 0x2116
 2178 0159 19       		.uleb128 0x19
 2179 015a 01       		.uleb128 0x1
 2180 015b 13       		.uleb128 0x13
 2181 015c 00       		.byte	0
 2182 015d 00       		.byte	0
 2183 015e 15       		.uleb128 0x15
 2184 015f 34       		.uleb128 0x34
 2185 0160 00       		.byte	0
 2186 0161 03       		.uleb128 0x3
 2187 0162 0E       		.uleb128 0xe
 2188 0163 3A       		.uleb128 0x3a
 2189 0164 0B       		.uleb128 0xb
 2190 0165 3B       		.uleb128 0x3b
 2191 0166 0B       		.uleb128 0xb
 2192 0167 49       		.uleb128 0x49
 2193 0168 13       		.uleb128 0x13
 2194 0169 3F       		.uleb128 0x3f
 2195 016a 19       		.uleb128 0x19
 2196 016b 02       		.uleb128 0x2
 2197 016c 18       		.uleb128 0x18
 2198 016d 00       		.byte	0
 2199 016e 00       		.byte	0
 2200 016f 00       		.byte	0
 2201              		.section	.debug_aranges,"",%progbits
 2202 0000 A4000000 		.4byte	0xa4
 2203 0004 0200     		.2byte	0x2
 2204 0006 00000000 		.4byte	.Ldebug_info0
 2205 000a 04       		.byte	0x4
 2206 000b 00       		.byte	0
 2207 000c 0000     		.2byte	0
 2208 000e 0000     		.2byte	0
 2209 0010 00000000 		.4byte	.LFB0
 2210 0014 24000000 		.4byte	.LFE0-.LFB0
 2211 0018 00000000 		.4byte	.LFB1
 2212 001c 18020000 		.4byte	.LFE1-.LFB1
 2213 0020 00000000 		.4byte	.LFB2
 2214 0024 28000000 		.4byte	.LFE2-.LFB2
 2215 0028 00000000 		.4byte	.LFB3
 2216 002c 18000000 		.4byte	.LFE3-.LFB3
 2217 0030 00000000 		.4byte	.LFB4
 2218 0034 1C000000 		.4byte	.LFE4-.LFB4
 2219 0038 00000000 		.4byte	.LFB5
 2220 003c 1C000000 		.4byte	.LFE5-.LFB5
 2221 0040 00000000 		.4byte	.LFB6
 2222 0044 48000000 		.4byte	.LFE6-.LFB6
 2223 0048 00000000 		.4byte	.LFB7
 2224 004c 44000000 		.4byte	.LFE7-.LFB7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 55


 2225 0050 00000000 		.4byte	.LFB8
 2226 0054 1C000000 		.4byte	.LFE8-.LFB8
 2227 0058 00000000 		.4byte	.LFB9
 2228 005c 30000000 		.4byte	.LFE9-.LFB9
 2229 0060 00000000 		.4byte	.LFB10
 2230 0064 2C000000 		.4byte	.LFE10-.LFB10
 2231 0068 00000000 		.4byte	.LFB11
 2232 006c 1C000000 		.4byte	.LFE11-.LFB11
 2233 0070 00000000 		.4byte	.LFB12
 2234 0074 1C000000 		.4byte	.LFE12-.LFB12
 2235 0078 00000000 		.4byte	.LFB13
 2236 007c 30000000 		.4byte	.LFE13-.LFB13
 2237 0080 00000000 		.4byte	.LFB14
 2238 0084 2C000000 		.4byte	.LFE14-.LFB14
 2239 0088 00000000 		.4byte	.LFB15
 2240 008c A4000000 		.4byte	.LFE15-.LFB15
 2241 0090 00000000 		.4byte	.LFB16
 2242 0094 98000000 		.4byte	.LFE16-.LFB16
 2243 0098 00000000 		.4byte	.LFB17
 2244 009c 80000000 		.4byte	.LFE17-.LFB17
 2245 00a0 00000000 		.4byte	0
 2246 00a4 00000000 		.4byte	0
 2247              		.section	.debug_ranges,"",%progbits
 2248              	.Ldebug_ranges0:
 2249 0000 00000000 		.4byte	.LFB0
 2250 0004 24000000 		.4byte	.LFE0
 2251 0008 00000000 		.4byte	.LFB1
 2252 000c 18020000 		.4byte	.LFE1
 2253 0010 00000000 		.4byte	.LFB2
 2254 0014 28000000 		.4byte	.LFE2
 2255 0018 00000000 		.4byte	.LFB3
 2256 001c 18000000 		.4byte	.LFE3
 2257 0020 00000000 		.4byte	.LFB4
 2258 0024 1C000000 		.4byte	.LFE4
 2259 0028 00000000 		.4byte	.LFB5
 2260 002c 1C000000 		.4byte	.LFE5
 2261 0030 00000000 		.4byte	.LFB6
 2262 0034 48000000 		.4byte	.LFE6
 2263 0038 00000000 		.4byte	.LFB7
 2264 003c 44000000 		.4byte	.LFE7
 2265 0040 00000000 		.4byte	.LFB8
 2266 0044 1C000000 		.4byte	.LFE8
 2267 0048 00000000 		.4byte	.LFB9
 2268 004c 30000000 		.4byte	.LFE9
 2269 0050 00000000 		.4byte	.LFB10
 2270 0054 2C000000 		.4byte	.LFE10
 2271 0058 00000000 		.4byte	.LFB11
 2272 005c 1C000000 		.4byte	.LFE11
 2273 0060 00000000 		.4byte	.LFB12
 2274 0064 1C000000 		.4byte	.LFE12
 2275 0068 00000000 		.4byte	.LFB13
 2276 006c 30000000 		.4byte	.LFE13
 2277 0070 00000000 		.4byte	.LFB14
 2278 0074 2C000000 		.4byte	.LFE14
 2279 0078 00000000 		.4byte	.LFB15
 2280 007c A4000000 		.4byte	.LFE15
 2281 0080 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 56


 2282 0084 98000000 		.4byte	.LFE16
 2283 0088 00000000 		.4byte	.LFB17
 2284 008c 80000000 		.4byte	.LFE17
 2285 0090 00000000 		.4byte	0
 2286 0094 00000000 		.4byte	0
 2287              		.section	.debug_line,"",%progbits
 2288              	.Ldebug_line0:
 2289 0000 88020000 		.section	.debug_str,"MS",%progbits,1
 2289      02004200 
 2289      00000201 
 2289      FB0E0D00 
 2289      01010101 
 2290              	.LASF10:
 2291 0000 75696E74 		.ascii	"uint16\000"
 2291      313600
 2292              	.LASF48:
 2293 0007 61646347 		.ascii	"adcGain\000"
 2293      61696E00 
 2294              	.LASF23:
 2295 000f 636F756E 		.ascii	"counts\000"
 2295      747300
 2296              	.LASF54:
 2297 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2297      436F756E 
 2297      7473546F 
 2297      5F566F6C 
 2297      747300
 2298              	.LASF36:
 2299 0029 4144435F 		.ascii	"ADC_Init\000"
 2299      496E6974 
 2299      00
 2300              	.LASF7:
 2301 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2301      206C6F6E 
 2301      6720756E 
 2301      7369676E 
 2301      65642069 
 2302              	.LASF24:
 2303 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2303      496E7075 
 2303      7473506C 
 2303      6163656D 
 2303      656E7400 
 2304              	.LASF28:
 2305 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2305      53746172 
 2305      74436F6E 
 2305      76657274 
 2305      00
 2306              	.LASF6:
 2307 006e 6C6F6E67 		.ascii	"long long int\000"
 2307      206C6F6E 
 2307      6720696E 
 2307      7400
 2308              	.LASF0:
 2309 007c 7369676E 		.ascii	"signed char\000"
 2309      65642063 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 57


 2309      68617200 
 2310              	.LASF30:
 2311 0088 73746174 		.ascii	"status\000"
 2311      757300
 2312              	.LASF13:
 2313 008f 696E7433 		.ascii	"int32\000"
 2313      3200
 2314              	.LASF25:
 2315 0095 4144435F 		.ascii	"ADC_Start\000"
 2315      53746172 
 2315      7400
 2316              	.LASF4:
 2317 009f 6C6F6E67 		.ascii	"long int\000"
 2317      20696E74 
 2317      00
 2318              	.LASF52:
 2319 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2319      436F756E 
 2319      7473546F 
 2319      5F75566F 
 2319      6C747300 
 2320              	.LASF59:
 2321 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2321      636F756E 
 2321      74735065 
 2321      72313056 
 2321      6F6C7400 
 2322              	.LASF9:
 2323 00d0 75696E74 		.ascii	"uint8\000"
 2323      3800
 2324              	.LASF16:
 2325 00d6 646F7562 		.ascii	"double\000"
 2325      6C6500
 2326              	.LASF11:
 2327 00dd 75696E74 		.ascii	"uint32\000"
 2327      333200
 2328              	.LASF38:
 2329 00e4 6D61736B 		.ascii	"mask\000"
 2329      00
 2330              	.LASF57:
 2331 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2331      696E6974 
 2331      56617200 
 2332              	.LASF33:
 2333 00f5 7265744D 		.ascii	"retMode\000"
 2333      6F646500 
 2334              	.LASF43:
 2335 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2335      5365744C 
 2335      696D6974 
 2335      4D61736B 
 2335      00
 2336              	.LASF8:
 2337 010e 756E7369 		.ascii	"unsigned int\000"
 2337      676E6564 
 2337      20696E74 
 2337      00
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 58


 2338              	.LASF53:
 2339 011b 75566F6C 		.ascii	"uVolts\000"
 2339      747300
 2340              	.LASF5:
 2341 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2341      20756E73 
 2341      69676E65 
 2341      6420696E 
 2341      7400
 2342              	.LASF44:
 2343 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2343      53657453 
 2343      61744D61 
 2343      736B00
 2344              	.LASF55:
 2345 0143 766F6C74 		.ascii	"volts\000"
 2345      7300
 2346              	.LASF22:
 2347 0149 746D7052 		.ascii	"tmpRegVal\000"
 2347      65675661 
 2347      6C00
 2348              	.LASF3:
 2349 0153 73686F72 		.ascii	"short unsigned int\000"
 2349      7420756E 
 2349      7369676E 
 2349      65642069 
 2349      6E7400
 2350              	.LASF29:
 2351 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2351      53746F70 
 2351      436F6E76 
 2351      65727400 
 2352              	.LASF51:
 2353 0176 6D566F6C 		.ascii	"mVolts\000"
 2353      747300
 2354              	.LASF19:
 2355 017d 72656733 		.ascii	"reg32\000"
 2355      3200
 2356              	.LASF14:
 2357 0183 666C6F61 		.ascii	"float32\000"
 2357      74333200 
 2358              	.LASF20:
 2359 018b 73697A65 		.ascii	"sizetype\000"
 2359      74797065 
 2359      00
 2360              	.LASF40:
 2361 0194 6C6F774C 		.ascii	"lowLimit\000"
 2361      696D6974 
 2361      00
 2362              	.LASF41:
 2363 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2363      53657448 
 2363      6967684C 
 2363      696D6974 
 2363      00
 2364              	.LASF31:
 2365 01ae 4144435F 		.ascii	"ADC_IsEndConversion\000"
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 59


 2365      4973456E 
 2365      64436F6E 
 2365      76657273 
 2365      696F6E00 
 2366              	.LASF17:
 2367 01c2 696E7436 		.ascii	"int64\000"
 2367      3400
 2368              	.LASF37:
 2369 01c8 4144435F 		.ascii	"ADC_SetChanMask\000"
 2369      53657443 
 2369      68616E4D 
 2369      61736B00 
 2370              	.LASF47:
 2371 01d8 4144435F 		.ascii	"ADC_SetGain\000"
 2371      53657447 
 2371      61696E00 
 2372              	.LASF15:
 2373 01e4 666C6F61 		.ascii	"float\000"
 2373      7400
 2374              	.LASF60:
 2375 01ea 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2375      4320342E 
 2375      382E3420 
 2375      32303134 
 2375      30353236 
 2376 021d 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2376      20726576 
 2376      6973696F 
 2376      6E203231 
 2376      31333538 
 2377 0250 30202D66 		.ascii	"0 -ffunction-sections\000"
 2377      66756E63 
 2377      74696F6E 
 2377      2D736563 
 2377      74696F6E 
 2378              	.LASF62:
 2379 0266 433A5C55 		.ascii	"C:\\Users\\Snufkin\\Documents\\GitHub\\KingFunk2\\C"
 2379      73657273 
 2379      5C536E75 
 2379      666B696E 
 2379      5C446F63 
 2380 0293 52545F74 		.ascii	"RT_timer\\CRT_timer.cydsn\000"
 2380      696D6572 
 2380      5C435254 
 2380      5F74696D 
 2380      65722E63 
 2381              	.LASF49:
 2382 02ac 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2382      436F756E 
 2382      7473546F 
 2382      5F6D566F 
 2382      6C747300 
 2383              	.LASF39:
 2384 02c0 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2384      5365744C 
 2384      6F774C69 
 2384      6D697400 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 60


 2385              	.LASF61:
 2386 02d0 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2386      6E657261 
 2386      7465645F 
 2386      536F7572 
 2386      63655C50 
 2387              	.LASF1:
 2388 02ef 756E7369 		.ascii	"unsigned char\000"
 2388      676E6564 
 2388      20636861 
 2388      7200
 2389              	.LASF58:
 2390 02fd 4144435F 		.ascii	"ADC_offset\000"
 2390      6F666673 
 2390      657400
 2391              	.LASF2:
 2392 0308 73686F72 		.ascii	"short int\000"
 2392      7420696E 
 2392      7400
 2393              	.LASF27:
 2394 0312 4144435F 		.ascii	"ADC_Stop\000"
 2394      53746F70 
 2394      00
 2395              	.LASF21:
 2396 031b 63684E75 		.ascii	"chNum\000"
 2396      6D00
 2397              	.LASF34:
 2398 0321 6368616E 		.ascii	"chan\000"
 2398      00
 2399              	.LASF18:
 2400 0326 63686172 		.ascii	"char\000"
 2400      00
 2401              	.LASF56:
 2402 032b 4144435F 		.ascii	"ADC_channelsConfig\000"
 2402      6368616E 
 2402      6E656C73 
 2402      436F6E66 
 2402      696700
 2403              	.LASF46:
 2404 033e 6F666673 		.ascii	"offset\000"
 2404      657400
 2405              	.LASF50:
 2406 0345 61646343 		.ascii	"adcCounts\000"
 2406      6F756E74 
 2406      7300
 2407              	.LASF26:
 2408 034f 4144435F 		.ascii	"ADC_Enable\000"
 2408      456E6162 
 2408      6C6500
 2409              	.LASF42:
 2410 035a 68696768 		.ascii	"highLimit\000"
 2410      4C696D69 
 2410      7400
 2411              	.LASF12:
 2412 0364 696E7431 		.ascii	"int16\000"
 2412      3600
 2413              	.LASF45:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\cc9zYhzN.s 			page 61


 2414 036a 4144435F 		.ascii	"ADC_SetOffset\000"
 2414      5365744F 
 2414      66667365 
 2414      7400
 2415              	.LASF35:
 2416 0378 72657375 		.ascii	"result\000"
 2416      6C7400
 2417              	.LASF32:
 2418 037f 4144435F 		.ascii	"ADC_GetResult16\000"
 2418      47657452 
 2418      6573756C 
 2418      74313600 
 2419              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
