ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_Seq_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_Seq_1_initVar
  18              		.bss
  19              		.type	ADC_SAR_Seq_1_initVar, %object
  20              		.size	ADC_SAR_Seq_1_initVar, 1
  21              	ADC_SAR_Seq_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_Seq_1_offset,2,4
  24              		.comm	ADC_SAR_Seq_1_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_Seq_1_channelsConfig, %object
  28              		.size	ADC_SAR_Seq_1_channelsConfig, 4
  29              	ADC_SAR_Seq_1_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_Seq_1_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_Seq_1_Start, %function
  37              	ADC_SAR_Seq_1_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 2


  19:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000000u };
  34:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  35:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  38:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  40:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  45:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  48:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  51:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  62:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  64:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  68:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  71:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_Seq_1_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_SAR_Seq_1_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_SAR_Seq_1_Init, %function
  80              	ADC_SAR_Seq_1_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  74:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  77:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  79:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  83:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  84:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  87:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  90:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 4


  91:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  93:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  95:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 100:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 103:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 136:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 5


 137:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 138:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0E20     		mov	r0, #14
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
  97              		.loc 1 141 0
  98 000e 504B     		ldr	r3, .L15
  99 0010 0E20     		mov	r0, #14
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 144:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 4E4B     		ldr	r3, .L15+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 4E4B     		ldr	r3, .L15+8
 108 0020 4E4A     		ldr	r2, .L15+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 4E4B     		ldr	r3, .L15+16
 112 0026 4F4A     		ldr	r2, .L15+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 4F4B     		ldr	r3, .L15+24
 116 002c 4F4A     		ldr	r2, .L15+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 4F4B     		ldr	r3, .L15+32
 120 0032 0022     		mov	r2, #0
 121 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 122              		.loc 1 150 0
 123 0036 4F4B     		ldr	r3, .L15+36
 124 0038 4F4A     		ldr	r2, .L15+40
 125 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 126              		.loc 1 151 0
 127 003c 4F4B     		ldr	r3, .L15+44
 128 003e 4E4A     		ldr	r2, .L15+40
 129 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 153:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 130              		.loc 1 155 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 6


 131 0042 4F4B     		ldr	r3, .L15+48
 132 0044 4E4A     		ldr	r2, .L15+48
 133 0046 1268     		ldr	r2, [r2]
 134 0048 8021     		mov	r1, #128
 135 004a 4902     		lsl	r1, r1, #9
 136 004c 0A43     		orr	r2, r1
 137 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 159:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 162:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 138              		.loc 1 162 0
 139 0050 4C4B     		ldr	r3, .L15+52
 140 0052 0022     		mov	r2, #0
 141 0054 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
 142              		.loc 1 163 0
 143 0056 4C4B     		ldr	r3, .L15+56
 144 0058 0022     		mov	r2, #0
 145 005a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
 146              		.loc 1 164 0
 147 005c 4B4B     		ldr	r3, .L15+60
 148 005e 0122     		mov	r2, #1
 149 0060 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 166:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
 150              		.loc 1 167 0
 151 0062 4B4B     		ldr	r3, .L15+64
 152 0064 0222     		mov	r2, #2
 153 0066 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 170:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
 154              		.loc 1 171 0
 155 0068 4A4B     		ldr	r3, .L15+68
 156 006a 1B68     		ldr	r3, [r3]
 157 006c 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 158              		.loc 1 172 0
 159 006e 7A68     		ldr	r2, [r7, #4]
 160 0070 494B     		ldr	r3, .L15+72
 161 0072 1340     		and	r3, r2
 162 0074 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 174:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 163              		.loc 1 178 0
 164 0076 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 7


 165 0078 0122     		mov	r2, #1
 166 007a 1343     		orr	r3, r2
 167 007c 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 185:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 186:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 191:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 168              		.loc 1 191 0
 169 007e 454B     		ldr	r3, .L15+68
 170 0080 7A68     		ldr	r2, [r7, #4]
 171 0082 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 193:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 172              		.loc 1 197 0
 173 0084 0023     		mov	r3, #0
 174 0086 FB60     		str	r3, [r7, #12]
 175 0088 5CE0     		b	.L6
 176              	.L14:
 198:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 199:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 177              		.loc 1 199 0
 178 008a 0022     		mov	r2, #0
 179 008c DC23     		mov	r3, #220
 180 008e 9B01     		lsl	r3, r3, #6
 181 0090 1340     		and	r3, r2
 182 0092 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
 202:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 204:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 205:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
 209:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 214:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 8


 218:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 183              		.loc 1 218 0
 184 0094 FB68     		ldr	r3, [r7, #12]
 185 0096 9B00     		lsl	r3, r3, #2
 186 0098 404A     		ldr	r2, .L15+76
 187 009a 9B18     		add	r3, r3, r2
 188 009c 7A68     		ldr	r2, [r7, #4]
 189 009e 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 220:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 190              		.loc 1 220 0
 191 00a0 0022     		mov	r2, #0
 192 00a2 0123     		mov	r3, #1
 193 00a4 1340     		and	r3, r2
 194 00a6 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 222:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 195              		.loc 1 222 0
 196 00a8 364B     		ldr	r3, .L15+52
 197 00aa 364A     		ldr	r2, .L15+52
 198 00ac 1168     		ldr	r1, [r2]
 199 00ae FA68     		ldr	r2, [r7, #12]
 200 00b0 0120     		mov	r0, #1
 201 00b2 041C     		mov	r4, r0
 202 00b4 9440     		lsl	r4, r4, r2
 203 00b6 221C     		mov	r2, r4
 204 00b8 92B2     		uxth	r2, r2
 205 00ba 0A43     		orr	r2, r1
 206 00bc 1A60     		str	r2, [r3]
 207              	.L7:
 223:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 224:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 225:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 208              		.loc 1 225 0
 209 00be 0022     		mov	r2, #0
 210 00c0 0223     		mov	r3, #2
 211 00c2 1340     		and	r3, r2
 212 00c4 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 227:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 213              		.loc 1 227 0
 214 00c6 304B     		ldr	r3, .L15+56
 215 00c8 2F4A     		ldr	r2, .L15+56
 216 00ca 1168     		ldr	r1, [r2]
 217 00cc FA68     		ldr	r2, [r7, #12]
 218 00ce 0120     		mov	r0, #1
 219 00d0 041C     		mov	r4, r0
 220 00d2 9440     		lsl	r4, r4, r2
 221 00d4 221C     		mov	r2, r4
 222 00d6 92B2     		uxth	r2, r2
 223 00d8 0A43     		orr	r2, r1
 224 00da 1A60     		str	r2, [r3]
 225              	.L8:
 228:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 229:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 230:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 9


 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 234:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 235:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 237:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 239:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 240:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 241:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 242:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 244:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 245:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 247:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 226              		.loc 1 247 0
 227 00dc 0022     		mov	r2, #0
 228 00de 8023     		mov	r3, #128
 229 00e0 9B00     		lsl	r3, r3, #2
 230 00e2 1340     		and	r3, r2
 231 00e4 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 249:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
 232              		.loc 1 249 0
 233 00e6 8023     		mov	r3, #128
 234 00e8 5B00     		lsl	r3, r3, #1
 235 00ea BB60     		str	r3, [r7, #8]
 236 00ec 02E0     		b	.L10
 237              	.L9:
 250:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 251:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 252:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 253:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 238              		.loc 1 253 0
 239 00ee 8023     		mov	r3, #128
 240 00f0 5B01     		lsl	r3, r3, #5
 241 00f2 BB60     		str	r3, [r7, #8]
 242              	.L10:
 254:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 255:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 256:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 243              		.loc 1 256 0
 244 00f4 0022     		mov	r2, #0
 245 00f6 8023     		mov	r3, #128
 246 00f8 5B00     		lsl	r3, r3, #1
 247 00fa 1340     		and	r3, r2
 248 00fc 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 260:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 263:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 249              		.loc 1 263 0
 250 00fe 284B     		ldr	r3, .L15+80
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 10


 251 0100 FA68     		ldr	r2, [r7, #12]
 252 0102 5200     		lsl	r2, r2, #1
 253 0104 0021     		mov	r1, #0
 254 0106 D152     		strh	r1, [r2, r3]
 255 0108 09E0     		b	.L12
 256              	.L11:
 264:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 266:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 268:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 257              		.loc 1 270 0
 258 010a BB68     		ldr	r3, [r7, #8]
 259 010c 002B     		cmp	r3, #0
 260 010e 00DA     		bge	.L13
 261 0110 0133     		add	r3, r3, #1
 262              	.L13:
 263 0112 5B10     		asr	r3, r3, #1
 264 0114 99B2     		uxth	r1, r3
 265 0116 224B     		ldr	r3, .L15+80
 266 0118 FA68     		ldr	r2, [r7, #12]
 267 011a 5200     		lsl	r2, r2, #1
 268 011c D152     		strh	r1, [r2, r3]
 269              	.L12:
 271:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 272:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 273:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 274:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 275:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 270              		.loc 1 276 0
 271 011e BB68     		ldr	r3, [r7, #8]
 272 0120 204A     		ldr	r2, .L15+84
 273 0122 5343     		mul	r3, r2
 274 0124 204A     		ldr	r2, .L15+88
 275 0126 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 276              		.loc 1 277 0
 277 0128 181C     		mov	r0, r3
 278 012a 2049     		ldr	r1, .L15+92
 279 012c FFF7FEFF 		bl	__aeabi_idiv
 280 0130 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 281              		.loc 1 276 0
 282 0132 9BB2     		uxth	r3, r3
 283 0134 19B2     		sxth	r1, r3
 284 0136 1E4B     		ldr	r3, .L15+96
 285 0138 FA68     		ldr	r2, [r7, #12]
 286 013a 9200     		lsl	r2, r2, #2
 287 013c D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 288              		.loc 1 197 0
 289 013e FB68     		ldr	r3, [r7, #12]
 290 0140 0133     		add	r3, r3, #1
 291 0142 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 11


 292              	.L6:
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 293              		.loc 1 197 0 is_stmt 0 discriminator 1
 294 0144 FB68     		ldr	r3, [r7, #12]
 295 0146 002B     		cmp	r3, #0
 296 0148 9FD0     		beq	.L14
 278:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 279:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 297              		.loc 1 279 0 is_stmt 1
 298 014a BD46     		mov	sp, r7
 299 014c 05B0     		add	sp, sp, #20
 300              		@ sp needed
 301 014e 90BD     		pop	{r4, r7, pc}
 302              	.L16:
 303              		.align	2
 304              	.L15:
 305 0150 00000000 		.word	ADC_SAR_Seq_1_ISR
 306 0154 20001A40 		.word	1075445792
 307 0158 00001A40 		.word	1075445760
 308 015c 70020051 		.word	1358955120
 309 0160 04001A40 		.word	1075445764
 310 0164 84000080 		.word	-2147483516
 311 0168 18001A40 		.word	1075445784
 312 016c 0000FF07 		.word	134152192
 313 0170 1C001A40 		.word	1075445788
 314 0174 10001A40 		.word	1075445776
 315 0178 02000200 		.word	131074
 316 017c 14001A40 		.word	1075445780
 317 0180 00031A40 		.word	1075446528
 318 0184 28021A40 		.word	1075446312
 319 0188 38021A40 		.word	1075446328
 320 018c 18021A40 		.word	1075446296
 321 0190 000F1A40 		.word	1075449600
 322 0194 30001A40 		.word	1075445808
 323 0198 FFFFFFDF 		.word	-536870913
 324 019c 80001A40 		.word	1075445888
 325 01a0 00000000 		.word	ADC_SAR_Seq_1_offset
 326 01a4 10270000 		.word	10000
 327 01a8 E40C0000 		.word	3300
 328 01ac C8190000 		.word	6600
 329 01b0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 330              		.cfi_endproc
 331              	.LFE1:
 332              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 333              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 334              		.align	2
 335              		.global	ADC_SAR_Seq_1_Enable
 336              		.code	16
 337              		.thumb_func
 338              		.type	ADC_SAR_Seq_1_Enable, %function
 339              	ADC_SAR_Seq_1_Enable:
 340              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 281:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 12


 285:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 288:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 291:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 294:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 296:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 341              		.loc 1 296 0
 342              		.cfi_startproc
 343 0000 80B5     		push	{r7, lr}
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 7, -8
 346              		.cfi_offset 14, -4
 347 0002 00AF     		add	r7, sp, #0
 348              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 349              		.loc 1 297 0
 350 0004 074B     		ldr	r3, .L19
 351 0006 1B68     		ldr	r3, [r3]
 352 0008 002B     		cmp	r3, #0
 353 000a 09DB     		blt	.L17
 298:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 299:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 301:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 303:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 305:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 307:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 354              		.loc 1 307 0
 355 000c 054B     		ldr	r3, .L19
 356 000e 054A     		ldr	r2, .L19
 357 0010 1268     		ldr	r2, [r2]
 358 0012 8021     		mov	r1, #128
 359 0014 0906     		lsl	r1, r1, #24
 360 0016 0A43     		orr	r2, r1
 361 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 309:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 362              		.loc 1 310 0
 363 001a 0A20     		mov	r0, #10
 364 001c FFF7FEFF 		bl	CyDelayUs
 365              	.L17:
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 366              		.loc 1 312 0
 367 0020 BD46     		mov	sp, r7
 368              		@ sp needed
 369 0022 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 13


 370              	.L20:
 371              		.align	2
 372              	.L19:
 373 0024 00001A40 		.word	1075445760
 374              		.cfi_endproc
 375              	.LFE2:
 376              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 377              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 378              		.align	2
 379              		.global	ADC_SAR_Seq_1_Stop
 380              		.code	16
 381              		.thumb_func
 382              		.type	ADC_SAR_Seq_1_Stop, %function
 383              	ADC_SAR_Seq_1_Stop:
 384              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 314:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 315:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 317:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 319:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 323:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 326:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 329:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
 331:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 385              		.loc 1 331 0
 386              		.cfi_startproc
 387 0000 80B5     		push	{r7, lr}
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 7, -8
 390              		.cfi_offset 14, -4
 391 0002 00AF     		add	r7, sp, #0
 392              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
 393              		.loc 1 332 0
 394 0004 034B     		ldr	r3, .L22
 395 0006 034A     		ldr	r2, .L22
 396 0008 1268     		ldr	r2, [r2]
 397 000a 5200     		lsl	r2, r2, #1
 398 000c 5208     		lsr	r2, r2, #1
 399 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 400              		.loc 1 333 0
 401 0010 BD46     		mov	sp, r7
 402              		@ sp needed
 403 0012 80BD     		pop	{r7, pc}
 404              	.L23:
 405              		.align	2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 14


 406              	.L22:
 407 0014 00001A40 		.word	1075445760
 408              		.cfi_endproc
 409              	.LFE3:
 410              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
 411              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 412              		.align	2
 413              		.global	ADC_SAR_Seq_1_StartConvert
 414              		.code	16
 415              		.thumb_func
 416              		.type	ADC_SAR_Seq_1_StartConvert, %function
 417              	ADC_SAR_Seq_1_StartConvert:
 418              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 335:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 338:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 340:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 345:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 349:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 352:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 355:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 419              		.loc 1 357 0
 420              		.cfi_startproc
 421 0000 80B5     		push	{r7, lr}
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 7, -8
 424              		.cfi_offset 14, -4
 425 0002 00AF     		add	r7, sp, #0
 426              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 427              		.loc 1 359 0
 428 0004 044B     		ldr	r3, .L25
 429 0006 044A     		ldr	r2, .L25
 430 0008 1268     		ldr	r2, [r2]
 431 000a 8021     		mov	r1, #128
 432 000c 4902     		lsl	r1, r1, #9
 433 000e 0A43     		orr	r2, r1
 434 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 15


 362:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 364:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 435              		.loc 1 364 0
 436 0012 BD46     		mov	sp, r7
 437              		@ sp needed
 438 0014 80BD     		pop	{r7, pc}
 439              	.L26:
 440 0016 C046     		.align	2
 441              	.L25:
 442 0018 04001A40 		.word	1075445764
 443              		.cfi_endproc
 444              	.LFE4:
 445              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 446              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 447              		.align	2
 448              		.global	ADC_SAR_Seq_1_StopConvert
 449              		.code	16
 450              		.thumb_func
 451              		.type	ADC_SAR_Seq_1_StopConvert, %function
 452              	ADC_SAR_Seq_1_StopConvert:
 453              	.LFB5:
 365:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 366:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 367:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 369:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 371:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 374:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 377:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 454              		.loc 1 382 0
 455              		.cfi_startproc
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 00AF     		add	r7, sp, #0
 461              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 462              		.loc 1 384 0
 463 0004 034B     		ldr	r3, .L28
 464 0006 034A     		ldr	r2, .L28
 465 0008 1168     		ldr	r1, [r2]
 466 000a 034A     		ldr	r2, .L28+4
 467 000c 0A40     		and	r2, r1
 468 000e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 16


 385:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 469              		.loc 1 386 0
 470 0010 BD46     		mov	sp, r7
 471              		@ sp needed
 472 0012 80BD     		pop	{r7, pc}
 473              	.L29:
 474              		.align	2
 475              	.L28:
 476 0014 04001A40 		.word	1075445764
 477 0018 FFFFFEFF 		.word	-65537
 478              		.cfi_endproc
 479              	.LFE5:
 480              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 481              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 482              		.align	2
 483              		.global	ADC_SAR_Seq_1_IsEndConversion
 484              		.code	16
 485              		.thumb_func
 486              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 487              	ADC_SAR_Seq_1_IsEndConversion:
 488              	.LFB6:
 387:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 388:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 389:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 393:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 402:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 410:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 414:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 489              		.loc 1 416 0
 490              		.cfi_startproc
 491 0000 80B5     		push	{r7, lr}
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 7, -8
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 17


 494              		.cfi_offset 14, -4
 495 0002 84B0     		sub	sp, sp, #16
 496              		.cfi_def_cfa_offset 24
 497 0004 00AF     		add	r7, sp, #0
 498              		.cfi_def_cfa_register 7
 499 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 500              		.loc 1 417 0
 501 0008 0023     		mov	r3, #0
 502 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 419:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 503              		.loc 1 419 0
 504 000c 7A68     		ldr	r2, [r7, #4]
 505 000e 0323     		mov	r3, #3
 506 0010 1340     		and	r3, r2
 507 0012 11D0     		beq	.L31
 508              	.L33:
 420:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 421:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 422:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 423:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
 509              		.loc 1 423 0 discriminator 1
 510 0014 0B4B     		ldr	r3, .L35
 511 0016 1A68     		ldr	r2, [r3]
 512 0018 0123     		mov	r3, #1
 513 001a 1340     		and	r3, r2
 514 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 515              		.loc 1 424 0 discriminator 1
 516 001e FB68     		ldr	r3, [r7, #12]
 517 0020 002B     		cmp	r3, #0
 518 0022 03D1     		bne	.L32
 519 0024 7A68     		ldr	r2, [r7, #4]
 520 0026 0223     		mov	r3, #2
 521 0028 1340     		and	r3, r2
 522 002a F3D1     		bne	.L33
 523              	.L32:
 425:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 426:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 524              		.loc 1 426 0
 525 002c FB68     		ldr	r3, [r7, #12]
 526 002e 002B     		cmp	r3, #0
 527 0030 02D0     		beq	.L31
 427:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 428:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 528              		.loc 1 429 0
 529 0032 044B     		ldr	r3, .L35
 530 0034 0122     		mov	r2, #1
 531 0036 1A60     		str	r2, [r3]
 532              	.L31:
 430:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 431:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 432:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 433:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 18


 435:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 436:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 437:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 438:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 442:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 444:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 447:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 448:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 450:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
 533              		.loc 1 450 0
 534 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 535              		.loc 1 451 0
 536 003a 181C     		mov	r0, r3
 537 003c BD46     		mov	sp, r7
 538 003e 04B0     		add	sp, sp, #16
 539              		@ sp needed
 540 0040 80BD     		pop	{r7, pc}
 541              	.L36:
 542 0042 C046     		.align	2
 543              	.L35:
 544 0044 10021A40 		.word	1075446288
 545              		.cfi_endproc
 546              	.LFE6:
 547              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 548              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 549              		.align	2
 550              		.global	ADC_SAR_Seq_1_GetResult16
 551              		.code	16
 552              		.thumb_func
 553              		.type	ADC_SAR_Seq_1_GetResult16, %function
 554              	ADC_SAR_Seq_1_GetResult16:
 555              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 454:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 456:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 458:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 461:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 465:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 468:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 19


 469:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 556              		.loc 1 470 0
 557              		.cfi_startproc
 558 0000 80B5     		push	{r7, lr}
 559              		.cfi_def_cfa_offset 8
 560              		.cfi_offset 7, -8
 561              		.cfi_offset 14, -4
 562 0002 84B0     		sub	sp, sp, #16
 563              		.cfi_def_cfa_offset 24
 564 0004 00AF     		add	r7, sp, #0
 565              		.cfi_def_cfa_register 7
 566 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 473:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 567              		.loc 1 474 0
 568 0008 7B68     		ldr	r3, [r7, #4]
 569 000a 002B     		cmp	r3, #0
 570 000c 02D0     		beq	.L38
 571              		.loc 1 474 0 is_stmt 0 discriminator 1
 572 000e 0020     		mov	r0, #0
 573 0010 FFF7FEFF 		bl	CyHalt
 574              	.L38:
 475:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 476:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 575              		.loc 1 476 0 is_stmt 1
 576 0014 7B68     		ldr	r3, [r7, #4]
 577 0016 002B     		cmp	r3, #0
 578 0018 08D1     		bne	.L39
 477:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 478:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 579              		.loc 1 478 0
 580 001a 7B68     		ldr	r3, [r7, #4]
 581 001c 9B00     		lsl	r3, r3, #2
 582 001e 084A     		ldr	r2, .L42
 583 0020 9B18     		add	r3, r3, r2
 584 0022 1B68     		ldr	r3, [r3]
 585 0024 1B04     		lsl	r3, r3, #16
 586 0026 1B0C     		lsr	r3, r3, #16
 587 0028 FB60     		str	r3, [r7, #12]
 588 002a 01E0     		b	.L40
 589              	.L39:
 479:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 481:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
 482:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 483:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 486:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 590              		.loc 1 486 0
 591 002c 0023     		mov	r3, #0
 592 002e FB60     		str	r3, [r7, #12]
 593              	.L40:
 487:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 20


 488:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 489:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 490:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 594              		.loc 1 490 0
 595 0030 FB68     		ldr	r3, [r7, #12]
 596 0032 9BB2     		uxth	r3, r3
 597 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 598              		.loc 1 491 0
 599 0036 181C     		mov	r0, r3
 600 0038 BD46     		mov	sp, r7
 601 003a 04B0     		add	sp, sp, #16
 602              		@ sp needed
 603 003c 80BD     		pop	{r7, pc}
 604              	.L43:
 605 003e C046     		.align	2
 606              	.L42:
 607 0040 80011A40 		.word	1075446144
 608              		.cfi_endproc
 609              	.LFE7:
 610              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 611              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 612              		.align	2
 613              		.global	ADC_SAR_Seq_1_SetChanMask
 614              		.code	16
 615              		.thumb_func
 616              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 617              	ADC_SAR_Seq_1_SetChanMask:
 618              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 493:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 494:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 496:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 498:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 501:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 510:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 513:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 619              		.loc 1 515 0
 620              		.cfi_startproc
 621 0000 80B5     		push	{r7, lr}
 622              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 21


 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 0002 82B0     		sub	sp, sp, #8
 626              		.cfi_def_cfa_offset 16
 627 0004 00AF     		add	r7, sp, #0
 628              		.cfi_def_cfa_register 7
 629 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 630              		.loc 1 516 0
 631 0008 034B     		ldr	r3, .L45
 632 000a 7968     		ldr	r1, [r7, #4]
 633 000c 0122     		mov	r2, #1
 634 000e 0A40     		and	r2, r1
 635 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 636              		.loc 1 517 0
 637 0012 BD46     		mov	sp, r7
 638 0014 02B0     		add	sp, sp, #8
 639              		@ sp needed
 640 0016 80BD     		pop	{r7, pc}
 641              	.L46:
 642              		.align	2
 643              	.L45:
 644 0018 20001A40 		.word	1075445792
 645              		.cfi_endproc
 646              	.LFE8:
 647              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 648              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 649              		.align	2
 650              		.global	ADC_SAR_Seq_1_SetLowLimit
 651              		.code	16
 652              		.thumb_func
 653              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 654              	ADC_SAR_Seq_1_SetLowLimit:
 655              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 519:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 521:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 522:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
 524:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 526:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 529:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 532:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 535:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 538:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 22


 540:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 541:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 543:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 544:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 551:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 554:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 557:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 656              		.loc 1 559 0
 657              		.cfi_startproc
 658 0000 80B5     		push	{r7, lr}
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 7, -8
 661              		.cfi_offset 14, -4
 662 0002 82B0     		sub	sp, sp, #8
 663              		.cfi_def_cfa_offset 16
 664 0004 00AF     		add	r7, sp, #0
 665              		.cfi_def_cfa_register 7
 666 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 667              		.loc 1 560 0
 668 0008 084B     		ldr	r3, .L48
 669 000a 084A     		ldr	r2, .L48
 670 000c 1268     		ldr	r2, [r2]
 671 000e 120C     		lsr	r2, r2, #16
 672 0010 1204     		lsl	r2, r2, #16
 673 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 674              		.loc 1 561 0
 675 0014 054B     		ldr	r3, .L48
 676 0016 054A     		ldr	r2, .L48
 677 0018 1168     		ldr	r1, [r2]
 678 001a 7A68     		ldr	r2, [r7, #4]
 679 001c 1204     		lsl	r2, r2, #16
 680 001e 120C     		lsr	r2, r2, #16
 681 0020 0A43     		orr	r2, r1
 682 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 683              		.loc 1 562 0
 684 0024 BD46     		mov	sp, r7
 685 0026 02B0     		add	sp, sp, #8
 686              		@ sp needed
 687 0028 80BD     		pop	{r7, pc}
 688              	.L49:
 689 002a C046     		.align	2
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 23


 690              	.L48:
 691 002c 18001A40 		.word	1075445784
 692              		.cfi_endproc
 693              	.LFE9:
 694              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
 695              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 696              		.align	2
 697              		.global	ADC_SAR_Seq_1_SetHighLimit
 698              		.code	16
 699              		.thumb_func
 700              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
 701              	ADC_SAR_Seq_1_SetHighLimit:
 702              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 564:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 565:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 569:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 572:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 575:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 578:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 703              		.loc 1 580 0
 704              		.cfi_startproc
 705 0000 80B5     		push	{r7, lr}
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709 0002 82B0     		sub	sp, sp, #8
 710              		.cfi_def_cfa_offset 16
 711 0004 00AF     		add	r7, sp, #0
 712              		.cfi_def_cfa_register 7
 713 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 714              		.loc 1 581 0
 715 0008 074B     		ldr	r3, .L51
 716 000a 074A     		ldr	r2, .L51
 717 000c 1268     		ldr	r2, [r2]
 718 000e 1204     		lsl	r2, r2, #16
 719 0010 120C     		lsr	r2, r2, #16
 720 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 721              		.loc 1 582 0
 722 0014 044B     		ldr	r3, .L51
 723 0016 044A     		ldr	r2, .L51
 724 0018 1168     		ldr	r1, [r2]
 725 001a 7A68     		ldr	r2, [r7, #4]
 726 001c 1204     		lsl	r2, r2, #16
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 24


 727 001e 0A43     		orr	r2, r1
 728 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 729              		.loc 1 583 0
 730 0022 BD46     		mov	sp, r7
 731 0024 02B0     		add	sp, sp, #8
 732              		@ sp needed
 733 0026 80BD     		pop	{r7, pc}
 734              	.L52:
 735              		.align	2
 736              	.L51:
 737 0028 18001A40 		.word	1075445784
 738              		.cfi_endproc
 739              	.LFE10:
 740              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 741              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
 742              		.align	2
 743              		.global	ADC_SAR_Seq_1_SetLimitMask
 744              		.code	16
 745              		.thumb_func
 746              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
 747              	ADC_SAR_Seq_1_SetLimitMask:
 748              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 585:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 586:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 590:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 593:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 599:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 602:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 749              		.loc 1 604 0
 750              		.cfi_startproc
 751 0000 80B5     		push	{r7, lr}
 752              		.cfi_def_cfa_offset 8
 753              		.cfi_offset 7, -8
 754              		.cfi_offset 14, -4
 755 0002 82B0     		sub	sp, sp, #8
 756              		.cfi_def_cfa_offset 16
 757 0004 00AF     		add	r7, sp, #0
 758              		.cfi_def_cfa_register 7
 759 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 760              		.loc 1 605 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 25


 761 0008 034B     		ldr	r3, .L54
 762 000a 7968     		ldr	r1, [r7, #4]
 763 000c 0122     		mov	r2, #1
 764 000e 0A40     		and	r2, r1
 765 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 766              		.loc 1 606 0
 767 0012 BD46     		mov	sp, r7
 768 0014 02B0     		add	sp, sp, #8
 769              		@ sp needed
 770 0016 80BD     		pop	{r7, pc}
 771              	.L55:
 772              		.align	2
 773              	.L54:
 774 0018 38021A40 		.word	1075446328
 775              		.cfi_endproc
 776              	.LFE11:
 777              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 778              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 779              		.align	2
 780              		.global	ADC_SAR_Seq_1_SetSatMask
 781              		.code	16
 782              		.thumb_func
 783              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 784              	ADC_SAR_Seq_1_SetSatMask:
 785              	.LFB12:
 607:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 608:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 609:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 611:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 613:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 616:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 622:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 625:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 786              		.loc 1 627 0
 787              		.cfi_startproc
 788 0000 80B5     		push	{r7, lr}
 789              		.cfi_def_cfa_offset 8
 790              		.cfi_offset 7, -8
 791              		.cfi_offset 14, -4
 792 0002 82B0     		sub	sp, sp, #8
 793              		.cfi_def_cfa_offset 16
 794 0004 00AF     		add	r7, sp, #0
 795              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 26


 796 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 797              		.loc 1 628 0
 798 0008 034B     		ldr	r3, .L57
 799 000a 7968     		ldr	r1, [r7, #4]
 800 000c 0122     		mov	r2, #1
 801 000e 0A40     		and	r2, r1
 802 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 803              		.loc 1 629 0
 804 0012 BD46     		mov	sp, r7
 805 0014 02B0     		add	sp, sp, #8
 806              		@ sp needed
 807 0016 80BD     		pop	{r7, pc}
 808              	.L58:
 809              		.align	2
 810              	.L57:
 811 0018 28021A40 		.word	1075446312
 812              		.cfi_endproc
 813              	.LFE12:
 814              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 815              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 816              		.align	2
 817              		.global	ADC_SAR_Seq_1_SetOffset
 818              		.code	16
 819              		.thumb_func
 820              		.type	ADC_SAR_Seq_1_SetOffset, %function
 821              	ADC_SAR_Seq_1_SetOffset:
 822              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 631:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 632:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 634:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 636:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 642:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 647:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 650:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 653:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 823              		.loc 1 655 0
 824              		.cfi_startproc
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 27


 825 0000 80B5     		push	{r7, lr}
 826              		.cfi_def_cfa_offset 8
 827              		.cfi_offset 7, -8
 828              		.cfi_offset 14, -4
 829 0002 82B0     		sub	sp, sp, #8
 830              		.cfi_def_cfa_offset 16
 831 0004 00AF     		add	r7, sp, #0
 832              		.cfi_def_cfa_register 7
 833 0006 7860     		str	r0, [r7, #4]
 834 0008 0A1C     		mov	r2, r1
 835 000a BB1C     		add	r3, r7, #2
 836 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 837              		.loc 1 657 0
 838 000e 7B68     		ldr	r3, [r7, #4]
 839 0010 002B     		cmp	r3, #0
 840 0012 02D0     		beq	.L60
 841              		.loc 1 657 0 is_stmt 0 discriminator 1
 842 0014 0020     		mov	r0, #0
 843 0016 FFF7FEFF 		bl	CyHalt
 844              	.L60:
 658:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 659:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 845              		.loc 1 659 0 is_stmt 1
 846 001a 044B     		ldr	r3, .L61
 847 001c 7A68     		ldr	r2, [r7, #4]
 848 001e 5200     		lsl	r2, r2, #1
 849 0020 B91C     		add	r1, r7, #2
 850 0022 0988     		ldrh	r1, [r1]
 851 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 852              		.loc 1 660 0
 853 0026 BD46     		mov	sp, r7
 854 0028 02B0     		add	sp, sp, #8
 855              		@ sp needed
 856 002a 80BD     		pop	{r7, pc}
 857              	.L62:
 858              		.align	2
 859              	.L61:
 860 002c 00000000 		.word	ADC_SAR_Seq_1_offset
 861              		.cfi_endproc
 862              	.LFE13:
 863              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 864              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 865              		.align	2
 866              		.global	ADC_SAR_Seq_1_SetGain
 867              		.code	16
 868              		.thumb_func
 869              		.type	ADC_SAR_Seq_1_SetGain, %function
 870              	ADC_SAR_Seq_1_SetGain:
 871              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 662:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 663:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 665:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 28


 666:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 667:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 676:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 680:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 683:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 687:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 872              		.loc 1 689 0
 873              		.cfi_startproc
 874 0000 80B5     		push	{r7, lr}
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 878 0002 82B0     		sub	sp, sp, #8
 879              		.cfi_def_cfa_offset 16
 880 0004 00AF     		add	r7, sp, #0
 881              		.cfi_def_cfa_register 7
 882 0006 7860     		str	r0, [r7, #4]
 883 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 884              		.loc 1 691 0
 885 000a 7B68     		ldr	r3, [r7, #4]
 886 000c 002B     		cmp	r3, #0
 887 000e 02D0     		beq	.L64
 888              		.loc 1 691 0 is_stmt 0 discriminator 1
 889 0010 0020     		mov	r0, #0
 890 0012 FFF7FEFF 		bl	CyHalt
 891              	.L64:
 692:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 693:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 892              		.loc 1 693 0 is_stmt 1
 893 0016 044B     		ldr	r3, .L65
 894 0018 7A68     		ldr	r2, [r7, #4]
 895 001a 9200     		lsl	r2, r2, #2
 896 001c 3968     		ldr	r1, [r7]
 897 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 898              		.loc 1 694 0
 899 0020 BD46     		mov	sp, r7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 29


 900 0022 02B0     		add	sp, sp, #8
 901              		@ sp needed
 902 0024 80BD     		pop	{r7, pc}
 903              	.L66:
 904 0026 C046     		.align	2
 905              	.L65:
 906 0028 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 907              		.cfi_endproc
 908              	.LFE14:
 909              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 910              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 911              		.align	2
 912              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 913              		.code	16
 914              		.thumb_func
 915              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
 916              	ADC_SAR_Seq_1_CountsTo_mVolts:
 917              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 696:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 697:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 698:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 699:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 700:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 704:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 708:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 712:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 715:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 720:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 918              		.loc 1 722 0
 919              		.cfi_startproc
 920 0000 80B5     		push	{r7, lr}
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 84B0     		sub	sp, sp, #16
 925              		.cfi_def_cfa_offset 24
 926 0004 00AF     		add	r7, sp, #0
 927              		.cfi_def_cfa_register 7
 928 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 30


 929 0008 0A1C     		mov	r2, r1
 930 000a BB1C     		add	r3, r7, #2
 931 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 725:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 932              		.loc 1 726 0
 933 000e 7B68     		ldr	r3, [r7, #4]
 934 0010 002B     		cmp	r3, #0
 935 0012 02D0     		beq	.L68
 936              		.loc 1 726 0 is_stmt 0 discriminator 1
 937 0014 0020     		mov	r0, #0
 938 0016 FFF7FEFF 		bl	CyHalt
 939              	.L68:
 727:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 728:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 732:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 734:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 736:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 940              		.loc 1 737 0 is_stmt 1
 941 001a BB1C     		add	r3, r7, #2
 942 001c 1A88     		ldrh	r2, [r3]
 943 001e 1E4B     		ldr	r3, .L74
 944 0020 7968     		ldr	r1, [r7, #4]
 945 0022 4900     		lsl	r1, r1, #1
 946 0024 CB5A     		ldrh	r3, [r1, r3]
 947 0026 9BB2     		uxth	r3, r3
 948 0028 9BB2     		uxth	r3, r3
 949 002a D31A     		sub	r3, r2, r3
 950 002c 9AB2     		uxth	r2, r3
 951 002e BB1C     		add	r3, r7, #2
 952 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 953              		.loc 1 739 0
 954 0032 BB1C     		add	r3, r7, #2
 955 0034 0021     		mov	r1, #0
 956 0036 5B5E     		ldrsh	r3, [r3, r1]
 957 0038 184A     		ldr	r2, .L74+4
 958 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 959              		.loc 1 740 0
 960 003c BB1C     		add	r3, r7, #2
 961 003e 0021     		mov	r1, #0
 962 0040 5B5E     		ldrsh	r3, [r3, r1]
 963 0042 002B     		cmp	r3, #0
 964 0044 08DD     		ble	.L69
 965              		.loc 1 740 0 is_stmt 0 discriminator 1
 966 0046 164B     		ldr	r3, .L74+8
 967 0048 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 31


 968 004a 8900     		lsl	r1, r1, #2
 969 004c CB58     		ldr	r3, [r1, r3]
 970 004e 002B     		cmp	r3, #0
 971 0050 00DA     		bge	.L70
 972 0052 0133     		add	r3, r3, #1
 973              	.L70:
 974 0054 5B10     		asr	r3, r3, #1
 975 0056 08E0     		b	.L71
 976              	.L69:
 977              		.loc 1 740 0 discriminator 2
 978 0058 114B     		ldr	r3, .L74+8
 979 005a 7968     		ldr	r1, [r7, #4]
 980 005c 8900     		lsl	r1, r1, #2
 981 005e CB58     		ldr	r3, [r1, r3]
 982 0060 002B     		cmp	r3, #0
 983 0062 00DA     		bge	.L72
 984 0064 0133     		add	r3, r3, #1
 985              	.L72:
 986 0066 5B10     		asr	r3, r3, #1
 987 0068 5B42     		neg	r3, r3
 988              	.L71:
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 989              		.loc 1 739 0 is_stmt 1
 990 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 991              		.loc 1 741 0
 992 006c 0C4B     		ldr	r3, .L74+8
 993 006e 7968     		ldr	r1, [r7, #4]
 994 0070 8900     		lsl	r1, r1, #2
 995 0072 CB58     		ldr	r3, [r1, r3]
 996 0074 101C     		mov	r0, r2
 997 0076 191C     		mov	r1, r3
 998 0078 FFF7FEFF 		bl	__aeabi_idiv
 999 007c 031C     		mov	r3, r0
 1000 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1001              		.loc 1 739 0
 1002 0080 3B1C     		mov	r3, r7
 1003 0082 0E33     		add	r3, r3, #14
 1004 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 743:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 1005              		.loc 1 743 0
 1006 0086 3B1C     		mov	r3, r7
 1007 0088 0E33     		add	r3, r3, #14
 1008 008a 1B88     		ldrh	r3, [r3]
 1009 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1010              		.loc 1 744 0
 1011 008e 181C     		mov	r0, r3
 1012 0090 BD46     		mov	sp, r7
 1013 0092 04B0     		add	sp, sp, #16
 1014              		@ sp needed
 1015 0094 80BD     		pop	{r7, pc}
 1016              	.L75:
 1017 0096 C046     		.align	2
 1018              	.L74:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 32


 1019 0098 00000000 		.word	ADC_SAR_Seq_1_offset
 1020 009c 10270000 		.word	10000
 1021 00a0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1022              		.cfi_endproc
 1023              	.LFE15:
 1024              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 1025              		.global	__aeabi_lmul
 1026              		.global	__aeabi_ldivmod
 1027              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
 1028              		.align	2
 1029              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 1030              		.code	16
 1031              		.thumb_func
 1032              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 1033              	ADC_SAR_Seq_1_CountsTo_uVolts:
 1034              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 746:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 747:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 751:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 755:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 759:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 762:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 767:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1035              		.loc 1 776 0
 1036              		.cfi_startproc
 1037 0000 B0B5     		push	{r4, r5, r7, lr}
 1038              		.cfi_def_cfa_offset 16
 1039              		.cfi_offset 4, -16
 1040              		.cfi_offset 5, -12
 1041              		.cfi_offset 7, -8
 1042              		.cfi_offset 14, -4
 1043 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 33


 1044              		.cfi_def_cfa_offset 40
 1045 0004 00AF     		add	r7, sp, #0
 1046              		.cfi_def_cfa_register 7
 1047 0006 F860     		str	r0, [r7, #12]
 1048 0008 0A1C     		mov	r2, r1
 1049 000a 3B1C     		mov	r3, r7
 1050 000c 0A33     		add	r3, r3, #10
 1051 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 779:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1052              		.loc 1 780 0
 1053 0010 FB68     		ldr	r3, [r7, #12]
 1054 0012 002B     		cmp	r3, #0
 1055 0014 02D0     		beq	.L77
 1056              		.loc 1 780 0 is_stmt 0 discriminator 1
 1057 0016 0020     		mov	r0, #0
 1058 0018 FFF7FEFF 		bl	CyHalt
 1059              	.L77:
 781:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 786:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 788:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 790:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1060              		.loc 1 791 0 is_stmt 1
 1061 001c 3B1C     		mov	r3, r7
 1062 001e 0A33     		add	r3, r3, #10
 1063 0020 1A88     		ldrh	r2, [r3]
 1064 0022 1B4B     		ldr	r3, .L79+8
 1065 0024 F968     		ldr	r1, [r7, #12]
 1066 0026 4900     		lsl	r1, r1, #1
 1067 0028 CB5A     		ldrh	r3, [r1, r3]
 1068 002a 9BB2     		uxth	r3, r3
 1069 002c 9BB2     		uxth	r3, r3
 1070 002e D31A     		sub	r3, r2, r3
 1071 0030 9AB2     		uxth	r2, r3
 1072 0032 3B1C     		mov	r3, r7
 1073 0034 0A33     		add	r3, r3, #10
 1074 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 793:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 1075              		.loc 1 793 0
 1076 0038 3B1C     		mov	r3, r7
 1077 003a 0A33     		add	r3, r3, #10
 1078 003c 1B88     		ldrh	r3, [r3]
 1079 003e 1BB2     		sxth	r3, r3
 1080 0040 3B60     		str	r3, [r7]
 1081 0042 DB17     		asr	r3, r3, #31
 1082 0044 7B60     		str	r3, [r7, #4]
 1083 0046 3868     		ldr	r0, [r7]
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 34


 1084 0048 7968     		ldr	r1, [r7, #4]
 1085 004a 104B     		ldr	r3, .L79+4
 1086 004c 0E4A     		ldr	r2, .L79
 1087 004e FFF7FEFF 		bl	__aeabi_lmul
 1088 0052 021C     		mov	r2, r0
 1089 0054 0B1C     		mov	r3, r1
 1090 0056 0F49     		ldr	r1, .L79+12
 1091 0058 F868     		ldr	r0, [r7, #12]
 1092 005a 8000     		lsl	r0, r0, #2
 1093 005c 4158     		ldr	r1, [r0, r1]
 1094 005e 0C1C     		mov	r4, r1
 1095 0060 C917     		asr	r1, r1, #31
 1096 0062 0D1C     		mov	r5, r1
 1097 0064 101C     		mov	r0, r2
 1098 0066 191C     		mov	r1, r3
 1099 0068 221C     		mov	r2, r4
 1100 006a 2B1C     		mov	r3, r5
 1101 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1102 0070 031C     		mov	r3, r0
 1103 0072 0C1C     		mov	r4, r1
 1104 0074 3B61     		str	r3, [r7, #16]
 1105 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 795:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 1106              		.loc 1 795 0
 1107 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1108              		.loc 1 796 0
 1109 007a 181C     		mov	r0, r3
 1110 007c BD46     		mov	sp, r7
 1111 007e 06B0     		add	sp, sp, #24
 1112              		@ sp needed
 1113 0080 B0BD     		pop	{r4, r5, r7, pc}
 1114              	.L80:
 1115 0082 C046C046 		.align	3
 1115      C046
 1116              	.L79:
 1117 0088 80969800 		.word	10000000
 1118 008c 00000000 		.word	0
 1119 0090 00000000 		.word	ADC_SAR_Seq_1_offset
 1120 0094 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1121              		.cfi_endproc
 1122              	.LFE16:
 1123              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
 1124              		.global	__aeabi_i2f
 1125              		.global	__aeabi_fmul
 1126              		.global	__aeabi_fdiv
 1127              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 1128              		.align	2
 1129              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 1130              		.code	16
 1131              		.thumb_func
 1132              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 1133              	ADC_SAR_Seq_1_CountsTo_Volts:
 1134              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 798:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 35


 799:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 803:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 807:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 811:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 814:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 819:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1135              		.loc 1 821 0
 1136              		.cfi_startproc
 1137 0000 90B5     		push	{r4, r7, lr}
 1138              		.cfi_def_cfa_offset 12
 1139              		.cfi_offset 4, -12
 1140              		.cfi_offset 7, -8
 1141              		.cfi_offset 14, -4
 1142 0002 85B0     		sub	sp, sp, #20
 1143              		.cfi_def_cfa_offset 32
 1144 0004 00AF     		add	r7, sp, #0
 1145              		.cfi_def_cfa_register 7
 1146 0006 7860     		str	r0, [r7, #4]
 1147 0008 0A1C     		mov	r2, r1
 1148 000a BB1C     		add	r3, r7, #2
 1149 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 824:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1150              		.loc 1 825 0
 1151 000e 7B68     		ldr	r3, [r7, #4]
 1152 0010 002B     		cmp	r3, #0
 1153 0012 02D0     		beq	.L82
 1154              		.loc 1 825 0 is_stmt 0 discriminator 1
 1155 0014 0020     		mov	r0, #0
 1156 0016 FFF7FEFF 		bl	CyHalt
 1157              	.L82:
 826:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 827:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 831:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 36


 833:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 835:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1158              		.loc 1 836 0 is_stmt 1
 1159 001a BB1C     		add	r3, r7, #2
 1160 001c 1A88     		ldrh	r2, [r3]
 1161 001e 154B     		ldr	r3, .L84
 1162 0020 7968     		ldr	r1, [r7, #4]
 1163 0022 4900     		lsl	r1, r1, #1
 1164 0024 CB5A     		ldrh	r3, [r1, r3]
 1165 0026 9BB2     		uxth	r3, r3
 1166 0028 9BB2     		uxth	r3, r3
 1167 002a D31A     		sub	r3, r2, r3
 1168 002c 9AB2     		uxth	r2, r3
 1169 002e BB1C     		add	r3, r7, #2
 1170 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 838:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 1171              		.loc 1 838 0
 1172 0032 BB1C     		add	r3, r7, #2
 1173 0034 0022     		mov	r2, #0
 1174 0036 9B5E     		ldrsh	r3, [r3, r2]
 1175 0038 181C     		mov	r0, r3
 1176 003a FFF7FEFF 		bl	__aeabi_i2f
 1177 003e 031C     		add	r3, r0, #0
 1178 0040 181C     		add	r0, r3, #0
 1179 0042 0D49     		ldr	r1, .L84+4
 1180 0044 FFF7FEFF 		bl	__aeabi_fmul
 1181 0048 031C     		add	r3, r0, #0
 1182 004a 1C1C     		add	r4, r3, #0
 1183 004c 0B4B     		ldr	r3, .L84+8
 1184 004e 7A68     		ldr	r2, [r7, #4]
 1185 0050 9200     		lsl	r2, r2, #2
 1186 0052 D358     		ldr	r3, [r2, r3]
 1187 0054 181C     		mov	r0, r3
 1188 0056 FFF7FEFF 		bl	__aeabi_i2f
 1189 005a 031C     		add	r3, r0, #0
 1190 005c 201C     		add	r0, r4, #0
 1191 005e 191C     		add	r1, r3, #0
 1192 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1193 0064 031C     		add	r3, r0, #0
 1194 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 840:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 1195              		.loc 1 840 0
 1196 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1197              		.loc 1 841 0
 1198 006a 181C     		add	r0, r3, #0
 1199 006c BD46     		mov	sp, r7
 1200 006e 05B0     		add	sp, sp, #20
 1201              		@ sp needed
 1202 0070 90BD     		pop	{r4, r7, pc}
 1203              	.L85:
 1204 0072 C046     		.align	2
 1205              	.L84:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 37


 1206 0074 00000000 		.word	ADC_SAR_Seq_1_offset
 1207 0078 00002041 		.word	1092616192
 1208 007c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1209              		.cfi_endproc
 1210              	.LFE17:
 1211              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 1212              		.text
 1213              	.Letext0:
 1214              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1215              		.section	.debug_info,"",%progbits
 1216              	.Ldebug_info0:
 1217 0000 70040000 		.4byte	0x470
 1218 0004 0400     		.2byte	0x4
 1219 0006 00000000 		.4byte	.Ldebug_abbrev0
 1220 000a 04       		.byte	0x4
 1221 000b 01       		.uleb128 0x1
 1222 000c 06010000 		.4byte	.LASF59
 1223 0010 01       		.byte	0x1
 1224 0011 20000000 		.4byte	.LASF60
 1225 0015 0E020000 		.4byte	.LASF61
 1226 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1227 001d 00000000 		.4byte	0
 1228 0021 00000000 		.4byte	.Ldebug_line0
 1229 0025 02       		.uleb128 0x2
 1230 0026 01       		.byte	0x1
 1231 0027 06       		.byte	0x6
 1232 0028 04040000 		.4byte	.LASF0
 1233 002c 02       		.uleb128 0x2
 1234 002d 01       		.byte	0x1
 1235 002e 08       		.byte	0x8
 1236 002f 82010000 		.4byte	.LASF1
 1237 0033 02       		.uleb128 0x2
 1238 0034 02       		.byte	0x2
 1239 0035 05       		.byte	0x5
 1240 0036 B2030000 		.4byte	.LASF2
 1241 003a 02       		.uleb128 0x2
 1242 003b 02       		.byte	0x2
 1243 003c 07       		.byte	0x7
 1244 003d 10040000 		.4byte	.LASF3
 1245 0041 02       		.uleb128 0x2
 1246 0042 04       		.byte	0x4
 1247 0043 05       		.byte	0x5
 1248 0044 DD030000 		.4byte	.LASF4
 1249 0048 02       		.uleb128 0x2
 1250 0049 04       		.byte	0x4
 1251 004a 07       		.byte	0x7
 1252 004b C4010000 		.4byte	.LASF5
 1253 004f 02       		.uleb128 0x2
 1254 0050 08       		.byte	0x8
 1255 0051 05       		.byte	0x5
 1256 0052 73030000 		.4byte	.LASF6
 1257 0056 02       		.uleb128 0x2
 1258 0057 08       		.byte	0x8
 1259 0058 07       		.byte	0x7
 1260 0059 0F030000 		.4byte	.LASF7
 1261 005d 03       		.uleb128 0x3
 1262 005e 04       		.byte	0x4
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 38


 1263 005f 05       		.byte	0x5
 1264 0060 696E7400 		.ascii	"int\000"
 1265 0064 02       		.uleb128 0x2
 1266 0065 04       		.byte	0x4
 1267 0066 07       		.byte	0x7
 1268 0067 E0020000 		.4byte	.LASF8
 1269 006b 04       		.uleb128 0x4
 1270 006c BC030000 		.4byte	.LASF9
 1271 0070 02       		.byte	0x2
 1272 0071 A1       		.byte	0xa1
 1273 0072 2C000000 		.4byte	0x2c
 1274 0076 04       		.uleb128 0x4
 1275 0077 AF020000 		.4byte	.LASF10
 1276 007b 02       		.byte	0x2
 1277 007c A2       		.byte	0xa2
 1278 007d 3A000000 		.4byte	0x3a
 1279 0081 04       		.uleb128 0x4
 1280 0082 C0020000 		.4byte	.LASF11
 1281 0086 02       		.byte	0x2
 1282 0087 A3       		.byte	0xa3
 1283 0088 48000000 		.4byte	0x48
 1284 008c 04       		.uleb128 0x4
 1285 008d BE010000 		.4byte	.LASF12
 1286 0091 02       		.byte	0x2
 1287 0092 A5       		.byte	0xa5
 1288 0093 33000000 		.4byte	0x33
 1289 0097 04       		.uleb128 0x4
 1290 0098 D6010000 		.4byte	.LASF13
 1291 009c 02       		.byte	0x2
 1292 009d A6       		.byte	0xa6
 1293 009e 41000000 		.4byte	0x41
 1294 00a2 04       		.uleb128 0x4
 1295 00a3 F4000000 		.4byte	.LASF14
 1296 00a7 02       		.byte	0x2
 1297 00a8 A7       		.byte	0xa7
 1298 00a9 AD000000 		.4byte	0xad
 1299 00ad 02       		.uleb128 0x2
 1300 00ae 04       		.byte	0x4
 1301 00af 04       		.byte	0x4
 1302 00b0 65000000 		.4byte	.LASF15
 1303 00b4 02       		.uleb128 0x2
 1304 00b5 08       		.byte	0x8
 1305 00b6 04       		.byte	0x4
 1306 00b7 64020000 		.4byte	.LASF16
 1307 00bb 04       		.uleb128 0x4
 1308 00bc 2A040000 		.4byte	.LASF17
 1309 00c0 02       		.byte	0x2
 1310 00c1 AC       		.byte	0xac
 1311 00c2 4F000000 		.4byte	0x4f
 1312 00c6 02       		.uleb128 0x2
 1313 00c7 01       		.byte	0x1
 1314 00c8 08       		.byte	0x8
 1315 00c9 CA000000 		.4byte	.LASF18
 1316 00cd 05       		.uleb128 0x5
 1317 00ce 1A000000 		.4byte	.LASF19
 1318 00d2 02       		.byte	0x2
 1319 00d3 4D01     		.2byte	0x14d
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 39


 1320 00d5 D9000000 		.4byte	0xd9
 1321 00d9 06       		.uleb128 0x6
 1322 00da 81000000 		.4byte	0x81
 1323 00de 02       		.uleb128 0x2
 1324 00df 04       		.byte	0x4
 1325 00e0 07       		.byte	0x7
 1326 00e1 6A030000 		.4byte	.LASF20
 1327 00e5 07       		.uleb128 0x7
 1328 00e6 50020000 		.4byte	.LASF24
 1329 00ea 01       		.byte	0x1
 1330 00eb 3F       		.byte	0x3f
 1331 00ec 00000000 		.4byte	.LFB0
 1332 00f0 24000000 		.4byte	.LFE0-.LFB0
 1333 00f4 01       		.uleb128 0x1
 1334 00f5 9C       		.byte	0x9c
 1335 00f6 08       		.uleb128 0x8
 1336 00f7 30040000 		.4byte	.LASF35
 1337 00fb 01       		.byte	0x1
 1338 00fc 5E       		.byte	0x5e
 1339 00fd 00000000 		.4byte	.LFB1
 1340 0101 B4010000 		.4byte	.LFE1-.LFB1
 1341 0105 01       		.uleb128 0x1
 1342 0106 9C       		.byte	0x9c
 1343 0107 36010000 		.4byte	0x136
 1344 010b 09       		.uleb128 0x9
 1345 010c 86030000 		.4byte	.LASF21
 1346 0110 01       		.byte	0x1
 1347 0111 60       		.byte	0x60
 1348 0112 81000000 		.4byte	0x81
 1349 0116 02       		.uleb128 0x2
 1350 0117 91       		.byte	0x91
 1351 0118 6C       		.sleb128 -20
 1352 0119 09       		.uleb128 0x9
 1353 011a FC000000 		.4byte	.LASF22
 1354 011e 01       		.byte	0x1
 1355 011f 61       		.byte	0x61
 1356 0120 81000000 		.4byte	0x81
 1357 0124 02       		.uleb128 0x2
 1358 0125 91       		.byte	0x91
 1359 0126 64       		.sleb128 -28
 1360 0127 09       		.uleb128 0x9
 1361 0128 08030000 		.4byte	.LASF23
 1362 012c 01       		.byte	0x1
 1363 012d 62       		.byte	0x62
 1364 012e 97000000 		.4byte	0x97
 1365 0132 02       		.uleb128 0x2
 1366 0133 91       		.byte	0x91
 1367 0134 68       		.sleb128 -24
 1368 0135 00       		.byte	0
 1369 0136 0A       		.uleb128 0xa
 1370 0137 DC010000 		.4byte	.LASF25
 1371 013b 01       		.byte	0x1
 1372 013c 2701     		.2byte	0x127
 1373 013e 00000000 		.4byte	.LFB2
 1374 0142 28000000 		.4byte	.LFE2-.LFB2
 1375 0146 01       		.uleb128 0x1
 1376 0147 9C       		.byte	0x9c
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 40


 1377 0148 0B       		.uleb128 0xb
 1378 0149 90010000 		.4byte	.LASF26
 1379 014d 01       		.byte	0x1
 1380 014e 4A01     		.2byte	0x14a
 1381 0150 00000000 		.4byte	.LFB3
 1382 0154 18000000 		.4byte	.LFE3-.LFB3
 1383 0158 01       		.uleb128 0x1
 1384 0159 9C       		.byte	0x9c
 1385 015a 0B       		.uleb128 0xb
 1386 015b ED020000 		.4byte	.LASF27
 1387 015f 01       		.byte	0x1
 1388 0160 6401     		.2byte	0x164
 1389 0162 00000000 		.4byte	.LFB4
 1390 0166 1C000000 		.4byte	.LFE4-.LFB4
 1391 016a 01       		.uleb128 0x1
 1392 016b 9C       		.byte	0x9c
 1393 016c 0B       		.uleb128 0xb
 1394 016d 00000000 		.4byte	.LASF28
 1395 0171 01       		.byte	0x1
 1396 0172 7D01     		.2byte	0x17d
 1397 0174 00000000 		.4byte	.LFB5
 1398 0178 1C000000 		.4byte	.LFE5-.LFB5
 1399 017c 01       		.uleb128 0x1
 1400 017d 9C       		.byte	0x9c
 1401 017e 0C       		.uleb128 0xc
 1402 017f E6030000 		.4byte	.LASF30
 1403 0183 01       		.byte	0x1
 1404 0184 9F01     		.2byte	0x19f
 1405 0186 81000000 		.4byte	0x81
 1406 018a 00000000 		.4byte	.LFB6
 1407 018e 48000000 		.4byte	.LFE6-.LFB6
 1408 0192 01       		.uleb128 0x1
 1409 0193 9C       		.byte	0x9c
 1410 0194 B7010000 		.4byte	0x1b7
 1411 0198 0D       		.uleb128 0xd
 1412 0199 AA030000 		.4byte	.LASF32
 1413 019d 01       		.byte	0x1
 1414 019e 9F01     		.2byte	0x19f
 1415 01a0 81000000 		.4byte	0x81
 1416 01a4 02       		.uleb128 0x2
 1417 01a5 91       		.byte	0x91
 1418 01a6 6C       		.sleb128 -20
 1419 01a7 0E       		.uleb128 0xe
 1420 01a8 CF000000 		.4byte	.LASF29
 1421 01ac 01       		.byte	0x1
 1422 01ad A101     		.2byte	0x1a1
 1423 01af 81000000 		.4byte	0x81
 1424 01b3 02       		.uleb128 0x2
 1425 01b4 91       		.byte	0x91
 1426 01b5 74       		.sleb128 -12
 1427 01b6 00       		.byte	0
 1428 01b7 0F       		.uleb128 0xf
 1429 01b8 43040000 		.4byte	.LASF31
 1430 01bc 01       		.byte	0x1
 1431 01bd D501     		.2byte	0x1d5
 1432 01bf 8C000000 		.4byte	0x8c
 1433 01c3 00000000 		.4byte	.LFB7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 41


 1434 01c7 44000000 		.4byte	.LFE7-.LFB7
 1435 01cb 01       		.uleb128 0x1
 1436 01cc 9C       		.byte	0x9c
 1437 01cd F0010000 		.4byte	0x1f0
 1438 01d1 0D       		.uleb128 0xd
 1439 01d2 5E030000 		.4byte	.LASF33
 1440 01d6 01       		.byte	0x1
 1441 01d7 D501     		.2byte	0x1d5
 1442 01d9 81000000 		.4byte	0x81
 1443 01dd 02       		.uleb128 0x2
 1444 01de 91       		.byte	0x91
 1445 01df 6C       		.sleb128 -20
 1446 01e0 0E       		.uleb128 0xe
 1447 01e1 23040000 		.4byte	.LASF34
 1448 01e5 01       		.byte	0x1
 1449 01e6 D701     		.2byte	0x1d7
 1450 01e8 81000000 		.4byte	0x81
 1451 01ec 02       		.uleb128 0x2
 1452 01ed 91       		.byte	0x91
 1453 01ee 74       		.sleb128 -12
 1454 01ef 00       		.byte	0
 1455 01f0 10       		.uleb128 0x10
 1456 01f1 3E030000 		.4byte	.LASF36
 1457 01f5 01       		.byte	0x1
 1458 01f6 0202     		.2byte	0x202
 1459 01f8 00000000 		.4byte	.LFB8
 1460 01fc 1C000000 		.4byte	.LFE8-.LFB8
 1461 0200 01       		.uleb128 0x1
 1462 0201 9C       		.byte	0x9c
 1463 0202 16020000 		.4byte	0x216
 1464 0206 0D       		.uleb128 0xd
 1465 0207 81030000 		.4byte	.LASF37
 1466 020b 01       		.byte	0x1
 1467 020c 0202     		.2byte	0x202
 1468 020e 81000000 		.4byte	0x81
 1469 0212 02       		.uleb128 0x2
 1470 0213 91       		.byte	0x91
 1471 0214 74       		.sleb128 -12
 1472 0215 00       		.byte	0
 1473 0216 10       		.uleb128 0x10
 1474 0217 75000000 		.4byte	.LASF38
 1475 021b 01       		.byte	0x1
 1476 021c 2E02     		.2byte	0x22e
 1477 021e 00000000 		.4byte	.LFB9
 1478 0222 30000000 		.4byte	.LFE9-.LFB9
 1479 0226 01       		.uleb128 0x1
 1480 0227 9C       		.byte	0x9c
 1481 0228 3C020000 		.4byte	0x23c
 1482 022c 0D       		.uleb128 0xd
 1483 022d 9E020000 		.4byte	.LASF39
 1484 0231 01       		.byte	0x1
 1485 0232 2E02     		.2byte	0x22e
 1486 0234 81000000 		.4byte	0x81
 1487 0238 02       		.uleb128 0x2
 1488 0239 91       		.byte	0x91
 1489 023a 74       		.sleb128 -12
 1490 023b 00       		.byte	0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 42


 1491 023c 10       		.uleb128 0x10
 1492 023d A3010000 		.4byte	.LASF40
 1493 0241 01       		.byte	0x1
 1494 0242 4302     		.2byte	0x243
 1495 0244 00000000 		.4byte	.LFB10
 1496 0248 2C000000 		.4byte	.LFE10-.LFB10
 1497 024c 01       		.uleb128 0x1
 1498 024d 9C       		.byte	0x9c
 1499 024e 62020000 		.4byte	0x262
 1500 0252 0D       		.uleb128 0xd
 1501 0253 6B000000 		.4byte	.LASF41
 1502 0257 01       		.byte	0x1
 1503 0258 4302     		.2byte	0x243
 1504 025a 81000000 		.4byte	0x81
 1505 025e 02       		.uleb128 0x2
 1506 025f 91       		.byte	0x91
 1507 0260 74       		.sleb128 -12
 1508 0261 00       		.byte	0
 1509 0262 10       		.uleb128 0x10
 1510 0263 C2030000 		.4byte	.LASF42
 1511 0267 01       		.byte	0x1
 1512 0268 5B02     		.2byte	0x25b
 1513 026a 00000000 		.4byte	.LFB11
 1514 026e 1C000000 		.4byte	.LFE11-.LFB11
 1515 0272 01       		.uleb128 0x1
 1516 0273 9C       		.byte	0x9c
 1517 0274 88020000 		.4byte	0x288
 1518 0278 0D       		.uleb128 0xd
 1519 0279 81030000 		.4byte	.LASF37
 1520 027d 01       		.byte	0x1
 1521 027e 5B02     		.2byte	0x25b
 1522 0280 81000000 		.4byte	0x81
 1523 0284 02       		.uleb128 0x2
 1524 0285 91       		.byte	0x91
 1525 0286 74       		.sleb128 -12
 1526 0287 00       		.byte	0
 1527 0288 10       		.uleb128 0x10
 1528 0289 C7020000 		.4byte	.LASF43
 1529 028d 01       		.byte	0x1
 1530 028e 7202     		.2byte	0x272
 1531 0290 00000000 		.4byte	.LFB12
 1532 0294 1C000000 		.4byte	.LFE12-.LFB12
 1533 0298 01       		.uleb128 0x1
 1534 0299 9C       		.byte	0x9c
 1535 029a AE020000 		.4byte	0x2ae
 1536 029e 0D       		.uleb128 0xd
 1537 029f 81030000 		.4byte	.LASF37
 1538 02a3 01       		.byte	0x1
 1539 02a4 7202     		.2byte	0x272
 1540 02a6 81000000 		.4byte	0x81
 1541 02aa 02       		.uleb128 0x2
 1542 02ab 91       		.byte	0x91
 1543 02ac 74       		.sleb128 -12
 1544 02ad 00       		.byte	0
 1545 02ae 11       		.uleb128 0x11
 1546 02af 26030000 		.4byte	.LASF44
 1547 02b3 01       		.byte	0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 43


 1548 02b4 8E02     		.2byte	0x28e
 1549 02b6 00000000 		.4byte	.LFB13
 1550 02ba 30000000 		.4byte	.LFE13-.LFB13
 1551 02be 01       		.uleb128 0x1
 1552 02bf 9C       		.byte	0x9c
 1553 02c0 E3020000 		.4byte	0x2e3
 1554 02c4 0D       		.uleb128 0xd
 1555 02c5 5E030000 		.4byte	.LASF33
 1556 02c9 01       		.byte	0x1
 1557 02ca 8E02     		.2byte	0x28e
 1558 02cc 81000000 		.4byte	0x81
 1559 02d0 02       		.uleb128 0x2
 1560 02d1 91       		.byte	0x91
 1561 02d2 74       		.sleb128 -12
 1562 02d3 0D       		.uleb128 0xd
 1563 02d4 5E000000 		.4byte	.LASF45
 1564 02d8 01       		.byte	0x1
 1565 02d9 8E02     		.2byte	0x28e
 1566 02db 8C000000 		.4byte	0x8c
 1567 02df 02       		.uleb128 0x2
 1568 02e0 91       		.byte	0x91
 1569 02e1 72       		.sleb128 -14
 1570 02e2 00       		.byte	0
 1571 02e3 11       		.uleb128 0x11
 1572 02e4 88020000 		.4byte	.LASF46
 1573 02e8 01       		.byte	0x1
 1574 02e9 B002     		.2byte	0x2b0
 1575 02eb 00000000 		.4byte	.LFB14
 1576 02ef 2C000000 		.4byte	.LFE14-.LFB14
 1577 02f3 01       		.uleb128 0x1
 1578 02f4 9C       		.byte	0x9c
 1579 02f5 18030000 		.4byte	0x318
 1580 02f9 0D       		.uleb128 0xd
 1581 02fa 5E030000 		.4byte	.LASF33
 1582 02fe 01       		.byte	0x1
 1583 02ff B002     		.2byte	0x2b0
 1584 0301 81000000 		.4byte	0x81
 1585 0305 02       		.uleb128 0x2
 1586 0306 91       		.byte	0x91
 1587 0307 74       		.sleb128 -12
 1588 0308 0D       		.uleb128 0xd
 1589 0309 A7020000 		.4byte	.LASF47
 1590 030d 01       		.byte	0x1
 1591 030e B002     		.2byte	0x2b0
 1592 0310 97000000 		.4byte	0x97
 1593 0314 02       		.uleb128 0x2
 1594 0315 91       		.byte	0x91
 1595 0316 70       		.sleb128 -16
 1596 0317 00       		.byte	0
 1597 0318 0F       		.uleb128 0xf
 1598 0319 8C030000 		.4byte	.LASF48
 1599 031d 01       		.byte	0x1
 1600 031e D102     		.2byte	0x2d1
 1601 0320 8C000000 		.4byte	0x8c
 1602 0324 00000000 		.4byte	.LFB15
 1603 0328 A4000000 		.4byte	.LFE15-.LFB15
 1604 032c 01       		.uleb128 0x1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 44


 1605 032d 9C       		.byte	0x9c
 1606 032e 60030000 		.4byte	0x360
 1607 0332 0D       		.uleb128 0xd
 1608 0333 5E030000 		.4byte	.LASF33
 1609 0337 01       		.byte	0x1
 1610 0338 D102     		.2byte	0x2d1
 1611 033a 81000000 		.4byte	0x81
 1612 033e 02       		.uleb128 0x2
 1613 033f 91       		.byte	0x91
 1614 0340 6C       		.sleb128 -20
 1615 0341 0D       		.uleb128 0xd
 1616 0342 B6020000 		.4byte	.LASF49
 1617 0346 01       		.byte	0x1
 1618 0347 D102     		.2byte	0x2d1
 1619 0349 8C000000 		.4byte	0x8c
 1620 034d 02       		.uleb128 0x2
 1621 034e 91       		.byte	0x91
 1622 034f 6A       		.sleb128 -22
 1623 0350 0E       		.uleb128 0xe
 1624 0351 63030000 		.4byte	.LASF50
 1625 0355 01       		.byte	0x1
 1626 0356 D302     		.2byte	0x2d3
 1627 0358 8C000000 		.4byte	0x8c
 1628 035c 02       		.uleb128 0x2
 1629 035d 91       		.byte	0x91
 1630 035e 76       		.sleb128 -10
 1631 035f 00       		.byte	0
 1632 0360 0F       		.uleb128 0xf
 1633 0361 D6000000 		.4byte	.LASF51
 1634 0365 01       		.byte	0x1
 1635 0366 0703     		.2byte	0x307
 1636 0368 97000000 		.4byte	0x97
 1637 036c 00000000 		.4byte	.LFB16
 1638 0370 98000000 		.4byte	.LFE16-.LFB16
 1639 0374 01       		.uleb128 0x1
 1640 0375 9C       		.byte	0x9c
 1641 0376 A8030000 		.4byte	0x3a8
 1642 037a 0D       		.uleb128 0xd
 1643 037b 5E030000 		.4byte	.LASF33
 1644 037f 01       		.byte	0x1
 1645 0380 0703     		.2byte	0x307
 1646 0382 81000000 		.4byte	0x81
 1647 0386 02       		.uleb128 0x2
 1648 0387 91       		.byte	0x91
 1649 0388 64       		.sleb128 -28
 1650 0389 0D       		.uleb128 0xd
 1651 038a B6020000 		.4byte	.LASF49
 1652 038e 01       		.byte	0x1
 1653 038f 0703     		.2byte	0x307
 1654 0391 8C000000 		.4byte	0x8c
 1655 0395 02       		.uleb128 0x2
 1656 0396 91       		.byte	0x91
 1657 0397 62       		.sleb128 -30
 1658 0398 0E       		.uleb128 0xe
 1659 0399 AD000000 		.4byte	.LASF52
 1660 039d 01       		.byte	0x1
 1661 039e 0903     		.2byte	0x309
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 45


 1662 03a0 BB000000 		.4byte	0xbb
 1663 03a4 02       		.uleb128 0x2
 1664 03a5 91       		.byte	0x91
 1665 03a6 68       		.sleb128 -24
 1666 03a7 00       		.byte	0
 1667 03a8 0F       		.uleb128 0xf
 1668 03a9 6B020000 		.4byte	.LASF53
 1669 03ad 01       		.byte	0x1
 1670 03ae 3403     		.2byte	0x334
 1671 03b0 A2000000 		.4byte	0xa2
 1672 03b4 00000000 		.4byte	.LFB17
 1673 03b8 80000000 		.4byte	.LFE17-.LFB17
 1674 03bc 01       		.uleb128 0x1
 1675 03bd 9C       		.byte	0x9c
 1676 03be F0030000 		.4byte	0x3f0
 1677 03c2 0D       		.uleb128 0xd
 1678 03c3 5E030000 		.4byte	.LASF33
 1679 03c7 01       		.byte	0x1
 1680 03c8 3403     		.2byte	0x334
 1681 03ca 81000000 		.4byte	0x81
 1682 03ce 02       		.uleb128 0x2
 1683 03cf 91       		.byte	0x91
 1684 03d0 64       		.sleb128 -28
 1685 03d1 0D       		.uleb128 0xd
 1686 03d2 B6020000 		.4byte	.LASF49
 1687 03d6 01       		.byte	0x1
 1688 03d7 3403     		.2byte	0x334
 1689 03d9 8C000000 		.4byte	0x8c
 1690 03dd 02       		.uleb128 0x2
 1691 03de 91       		.byte	0x91
 1692 03df 62       		.sleb128 -30
 1693 03e0 0E       		.uleb128 0xe
 1694 03e1 58030000 		.4byte	.LASF54
 1695 03e5 01       		.byte	0x1
 1696 03e6 3603     		.2byte	0x336
 1697 03e8 A2000000 		.4byte	0xa2
 1698 03ec 02       		.uleb128 0x2
 1699 03ed 91       		.byte	0x91
 1700 03ee 6C       		.sleb128 -20
 1701 03ef 00       		.byte	0
 1702 03f0 12       		.uleb128 0x12
 1703 03f1 81000000 		.4byte	0x81
 1704 03f5 00040000 		.4byte	0x400
 1705 03f9 13       		.uleb128 0x13
 1706 03fa DE000000 		.4byte	0xde
 1707 03fe 00       		.byte	0
 1708 03ff 00       		.byte	0
 1709 0400 09       		.uleb128 0x9
 1710 0401 F1010000 		.4byte	.LASF55
 1711 0405 01       		.byte	0x1
 1712 0406 21       		.byte	0x21
 1713 0407 11040000 		.4byte	0x411
 1714 040b 05       		.uleb128 0x5
 1715 040c 03       		.byte	0x3
 1716 040d 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1717 0411 14       		.uleb128 0x14
 1718 0412 F0030000 		.4byte	0x3f0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 46


 1719 0416 15       		.uleb128 0x15
 1720 0417 B4000000 		.4byte	.LASF56
 1721 041b 01       		.byte	0x1
 1722 041c 18       		.byte	0x18
 1723 041d 6B000000 		.4byte	0x6b
 1724 0421 05       		.uleb128 0x5
 1725 0422 03       		.byte	0x3
 1726 0423 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1727 0427 12       		.uleb128 0x12
 1728 0428 8C000000 		.4byte	0x8c
 1729 042c 37040000 		.4byte	0x437
 1730 0430 13       		.uleb128 0x13
 1731 0431 DE000000 		.4byte	0xde
 1732 0435 00       		.byte	0
 1733 0436 00       		.byte	0
 1734 0437 15       		.uleb128 0x15
 1735 0438 49000000 		.4byte	.LASF57
 1736 043c 01       		.byte	0x1
 1737 043d 19       		.byte	0x19
 1738 043e 48040000 		.4byte	0x448
 1739 0442 05       		.uleb128 0x5
 1740 0443 03       		.byte	0x3
 1741 0444 00000000 		.4byte	ADC_SAR_Seq_1_offset
 1742 0448 06       		.uleb128 0x6
 1743 0449 27040000 		.4byte	0x427
 1744 044d 12       		.uleb128 0x12
 1745 044e 97000000 		.4byte	0x97
 1746 0452 5D040000 		.4byte	0x45d
 1747 0456 13       		.uleb128 0x13
 1748 0457 DE000000 		.4byte	0xde
 1749 045b 00       		.byte	0
 1750 045c 00       		.byte	0
 1751 045d 15       		.uleb128 0x15
 1752 045e 8F000000 		.4byte	.LASF58
 1753 0462 01       		.byte	0x1
 1754 0463 1A       		.byte	0x1a
 1755 0464 6E040000 		.4byte	0x46e
 1756 0468 05       		.uleb128 0x5
 1757 0469 03       		.byte	0x3
 1758 046a 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1759 046e 06       		.uleb128 0x6
 1760 046f 4D040000 		.4byte	0x44d
 1761 0473 00       		.byte	0
 1762              		.section	.debug_abbrev,"",%progbits
 1763              	.Ldebug_abbrev0:
 1764 0000 01       		.uleb128 0x1
 1765 0001 11       		.uleb128 0x11
 1766 0002 01       		.byte	0x1
 1767 0003 25       		.uleb128 0x25
 1768 0004 0E       		.uleb128 0xe
 1769 0005 13       		.uleb128 0x13
 1770 0006 0B       		.uleb128 0xb
 1771 0007 03       		.uleb128 0x3
 1772 0008 0E       		.uleb128 0xe
 1773 0009 1B       		.uleb128 0x1b
 1774 000a 0E       		.uleb128 0xe
 1775 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 47


 1776 000c 17       		.uleb128 0x17
 1777 000d 11       		.uleb128 0x11
 1778 000e 01       		.uleb128 0x1
 1779 000f 10       		.uleb128 0x10
 1780 0010 17       		.uleb128 0x17
 1781 0011 00       		.byte	0
 1782 0012 00       		.byte	0
 1783 0013 02       		.uleb128 0x2
 1784 0014 24       		.uleb128 0x24
 1785 0015 00       		.byte	0
 1786 0016 0B       		.uleb128 0xb
 1787 0017 0B       		.uleb128 0xb
 1788 0018 3E       		.uleb128 0x3e
 1789 0019 0B       		.uleb128 0xb
 1790 001a 03       		.uleb128 0x3
 1791 001b 0E       		.uleb128 0xe
 1792 001c 00       		.byte	0
 1793 001d 00       		.byte	0
 1794 001e 03       		.uleb128 0x3
 1795 001f 24       		.uleb128 0x24
 1796 0020 00       		.byte	0
 1797 0021 0B       		.uleb128 0xb
 1798 0022 0B       		.uleb128 0xb
 1799 0023 3E       		.uleb128 0x3e
 1800 0024 0B       		.uleb128 0xb
 1801 0025 03       		.uleb128 0x3
 1802 0026 08       		.uleb128 0x8
 1803 0027 00       		.byte	0
 1804 0028 00       		.byte	0
 1805 0029 04       		.uleb128 0x4
 1806 002a 16       		.uleb128 0x16
 1807 002b 00       		.byte	0
 1808 002c 03       		.uleb128 0x3
 1809 002d 0E       		.uleb128 0xe
 1810 002e 3A       		.uleb128 0x3a
 1811 002f 0B       		.uleb128 0xb
 1812 0030 3B       		.uleb128 0x3b
 1813 0031 0B       		.uleb128 0xb
 1814 0032 49       		.uleb128 0x49
 1815 0033 13       		.uleb128 0x13
 1816 0034 00       		.byte	0
 1817 0035 00       		.byte	0
 1818 0036 05       		.uleb128 0x5
 1819 0037 16       		.uleb128 0x16
 1820 0038 00       		.byte	0
 1821 0039 03       		.uleb128 0x3
 1822 003a 0E       		.uleb128 0xe
 1823 003b 3A       		.uleb128 0x3a
 1824 003c 0B       		.uleb128 0xb
 1825 003d 3B       		.uleb128 0x3b
 1826 003e 05       		.uleb128 0x5
 1827 003f 49       		.uleb128 0x49
 1828 0040 13       		.uleb128 0x13
 1829 0041 00       		.byte	0
 1830 0042 00       		.byte	0
 1831 0043 06       		.uleb128 0x6
 1832 0044 35       		.uleb128 0x35
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 48


 1833 0045 00       		.byte	0
 1834 0046 49       		.uleb128 0x49
 1835 0047 13       		.uleb128 0x13
 1836 0048 00       		.byte	0
 1837 0049 00       		.byte	0
 1838 004a 07       		.uleb128 0x7
 1839 004b 2E       		.uleb128 0x2e
 1840 004c 00       		.byte	0
 1841 004d 3F       		.uleb128 0x3f
 1842 004e 19       		.uleb128 0x19
 1843 004f 03       		.uleb128 0x3
 1844 0050 0E       		.uleb128 0xe
 1845 0051 3A       		.uleb128 0x3a
 1846 0052 0B       		.uleb128 0xb
 1847 0053 3B       		.uleb128 0x3b
 1848 0054 0B       		.uleb128 0xb
 1849 0055 27       		.uleb128 0x27
 1850 0056 19       		.uleb128 0x19
 1851 0057 11       		.uleb128 0x11
 1852 0058 01       		.uleb128 0x1
 1853 0059 12       		.uleb128 0x12
 1854 005a 06       		.uleb128 0x6
 1855 005b 40       		.uleb128 0x40
 1856 005c 18       		.uleb128 0x18
 1857 005d 9642     		.uleb128 0x2116
 1858 005f 19       		.uleb128 0x19
 1859 0060 00       		.byte	0
 1860 0061 00       		.byte	0
 1861 0062 08       		.uleb128 0x8
 1862 0063 2E       		.uleb128 0x2e
 1863 0064 01       		.byte	0x1
 1864 0065 3F       		.uleb128 0x3f
 1865 0066 19       		.uleb128 0x19
 1866 0067 03       		.uleb128 0x3
 1867 0068 0E       		.uleb128 0xe
 1868 0069 3A       		.uleb128 0x3a
 1869 006a 0B       		.uleb128 0xb
 1870 006b 3B       		.uleb128 0x3b
 1871 006c 0B       		.uleb128 0xb
 1872 006d 27       		.uleb128 0x27
 1873 006e 19       		.uleb128 0x19
 1874 006f 11       		.uleb128 0x11
 1875 0070 01       		.uleb128 0x1
 1876 0071 12       		.uleb128 0x12
 1877 0072 06       		.uleb128 0x6
 1878 0073 40       		.uleb128 0x40
 1879 0074 18       		.uleb128 0x18
 1880 0075 9642     		.uleb128 0x2116
 1881 0077 19       		.uleb128 0x19
 1882 0078 01       		.uleb128 0x1
 1883 0079 13       		.uleb128 0x13
 1884 007a 00       		.byte	0
 1885 007b 00       		.byte	0
 1886 007c 09       		.uleb128 0x9
 1887 007d 34       		.uleb128 0x34
 1888 007e 00       		.byte	0
 1889 007f 03       		.uleb128 0x3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 49


 1890 0080 0E       		.uleb128 0xe
 1891 0081 3A       		.uleb128 0x3a
 1892 0082 0B       		.uleb128 0xb
 1893 0083 3B       		.uleb128 0x3b
 1894 0084 0B       		.uleb128 0xb
 1895 0085 49       		.uleb128 0x49
 1896 0086 13       		.uleb128 0x13
 1897 0087 02       		.uleb128 0x2
 1898 0088 18       		.uleb128 0x18
 1899 0089 00       		.byte	0
 1900 008a 00       		.byte	0
 1901 008b 0A       		.uleb128 0xa
 1902 008c 2E       		.uleb128 0x2e
 1903 008d 00       		.byte	0
 1904 008e 3F       		.uleb128 0x3f
 1905 008f 19       		.uleb128 0x19
 1906 0090 03       		.uleb128 0x3
 1907 0091 0E       		.uleb128 0xe
 1908 0092 3A       		.uleb128 0x3a
 1909 0093 0B       		.uleb128 0xb
 1910 0094 3B       		.uleb128 0x3b
 1911 0095 05       		.uleb128 0x5
 1912 0096 27       		.uleb128 0x27
 1913 0097 19       		.uleb128 0x19
 1914 0098 11       		.uleb128 0x11
 1915 0099 01       		.uleb128 0x1
 1916 009a 12       		.uleb128 0x12
 1917 009b 06       		.uleb128 0x6
 1918 009c 40       		.uleb128 0x40
 1919 009d 18       		.uleb128 0x18
 1920 009e 9642     		.uleb128 0x2116
 1921 00a0 19       		.uleb128 0x19
 1922 00a1 00       		.byte	0
 1923 00a2 00       		.byte	0
 1924 00a3 0B       		.uleb128 0xb
 1925 00a4 2E       		.uleb128 0x2e
 1926 00a5 00       		.byte	0
 1927 00a6 3F       		.uleb128 0x3f
 1928 00a7 19       		.uleb128 0x19
 1929 00a8 03       		.uleb128 0x3
 1930 00a9 0E       		.uleb128 0xe
 1931 00aa 3A       		.uleb128 0x3a
 1932 00ab 0B       		.uleb128 0xb
 1933 00ac 3B       		.uleb128 0x3b
 1934 00ad 05       		.uleb128 0x5
 1935 00ae 27       		.uleb128 0x27
 1936 00af 19       		.uleb128 0x19
 1937 00b0 11       		.uleb128 0x11
 1938 00b1 01       		.uleb128 0x1
 1939 00b2 12       		.uleb128 0x12
 1940 00b3 06       		.uleb128 0x6
 1941 00b4 40       		.uleb128 0x40
 1942 00b5 18       		.uleb128 0x18
 1943 00b6 9742     		.uleb128 0x2117
 1944 00b8 19       		.uleb128 0x19
 1945 00b9 00       		.byte	0
 1946 00ba 00       		.byte	0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 50


 1947 00bb 0C       		.uleb128 0xc
 1948 00bc 2E       		.uleb128 0x2e
 1949 00bd 01       		.byte	0x1
 1950 00be 3F       		.uleb128 0x3f
 1951 00bf 19       		.uleb128 0x19
 1952 00c0 03       		.uleb128 0x3
 1953 00c1 0E       		.uleb128 0xe
 1954 00c2 3A       		.uleb128 0x3a
 1955 00c3 0B       		.uleb128 0xb
 1956 00c4 3B       		.uleb128 0x3b
 1957 00c5 05       		.uleb128 0x5
 1958 00c6 27       		.uleb128 0x27
 1959 00c7 19       		.uleb128 0x19
 1960 00c8 49       		.uleb128 0x49
 1961 00c9 13       		.uleb128 0x13
 1962 00ca 11       		.uleb128 0x11
 1963 00cb 01       		.uleb128 0x1
 1964 00cc 12       		.uleb128 0x12
 1965 00cd 06       		.uleb128 0x6
 1966 00ce 40       		.uleb128 0x40
 1967 00cf 18       		.uleb128 0x18
 1968 00d0 9742     		.uleb128 0x2117
 1969 00d2 19       		.uleb128 0x19
 1970 00d3 01       		.uleb128 0x1
 1971 00d4 13       		.uleb128 0x13
 1972 00d5 00       		.byte	0
 1973 00d6 00       		.byte	0
 1974 00d7 0D       		.uleb128 0xd
 1975 00d8 05       		.uleb128 0x5
 1976 00d9 00       		.byte	0
 1977 00da 03       		.uleb128 0x3
 1978 00db 0E       		.uleb128 0xe
 1979 00dc 3A       		.uleb128 0x3a
 1980 00dd 0B       		.uleb128 0xb
 1981 00de 3B       		.uleb128 0x3b
 1982 00df 05       		.uleb128 0x5
 1983 00e0 49       		.uleb128 0x49
 1984 00e1 13       		.uleb128 0x13
 1985 00e2 02       		.uleb128 0x2
 1986 00e3 18       		.uleb128 0x18
 1987 00e4 00       		.byte	0
 1988 00e5 00       		.byte	0
 1989 00e6 0E       		.uleb128 0xe
 1990 00e7 34       		.uleb128 0x34
 1991 00e8 00       		.byte	0
 1992 00e9 03       		.uleb128 0x3
 1993 00ea 0E       		.uleb128 0xe
 1994 00eb 3A       		.uleb128 0x3a
 1995 00ec 0B       		.uleb128 0xb
 1996 00ed 3B       		.uleb128 0x3b
 1997 00ee 05       		.uleb128 0x5
 1998 00ef 49       		.uleb128 0x49
 1999 00f0 13       		.uleb128 0x13
 2000 00f1 02       		.uleb128 0x2
 2001 00f2 18       		.uleb128 0x18
 2002 00f3 00       		.byte	0
 2003 00f4 00       		.byte	0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 51


 2004 00f5 0F       		.uleb128 0xf
 2005 00f6 2E       		.uleb128 0x2e
 2006 00f7 01       		.byte	0x1
 2007 00f8 3F       		.uleb128 0x3f
 2008 00f9 19       		.uleb128 0x19
 2009 00fa 03       		.uleb128 0x3
 2010 00fb 0E       		.uleb128 0xe
 2011 00fc 3A       		.uleb128 0x3a
 2012 00fd 0B       		.uleb128 0xb
 2013 00fe 3B       		.uleb128 0x3b
 2014 00ff 05       		.uleb128 0x5
 2015 0100 27       		.uleb128 0x27
 2016 0101 19       		.uleb128 0x19
 2017 0102 49       		.uleb128 0x49
 2018 0103 13       		.uleb128 0x13
 2019 0104 11       		.uleb128 0x11
 2020 0105 01       		.uleb128 0x1
 2021 0106 12       		.uleb128 0x12
 2022 0107 06       		.uleb128 0x6
 2023 0108 40       		.uleb128 0x40
 2024 0109 18       		.uleb128 0x18
 2025 010a 9642     		.uleb128 0x2116
 2026 010c 19       		.uleb128 0x19
 2027 010d 01       		.uleb128 0x1
 2028 010e 13       		.uleb128 0x13
 2029 010f 00       		.byte	0
 2030 0110 00       		.byte	0
 2031 0111 10       		.uleb128 0x10
 2032 0112 2E       		.uleb128 0x2e
 2033 0113 01       		.byte	0x1
 2034 0114 3F       		.uleb128 0x3f
 2035 0115 19       		.uleb128 0x19
 2036 0116 03       		.uleb128 0x3
 2037 0117 0E       		.uleb128 0xe
 2038 0118 3A       		.uleb128 0x3a
 2039 0119 0B       		.uleb128 0xb
 2040 011a 3B       		.uleb128 0x3b
 2041 011b 05       		.uleb128 0x5
 2042 011c 27       		.uleb128 0x27
 2043 011d 19       		.uleb128 0x19
 2044 011e 11       		.uleb128 0x11
 2045 011f 01       		.uleb128 0x1
 2046 0120 12       		.uleb128 0x12
 2047 0121 06       		.uleb128 0x6
 2048 0122 40       		.uleb128 0x40
 2049 0123 18       		.uleb128 0x18
 2050 0124 9742     		.uleb128 0x2117
 2051 0126 19       		.uleb128 0x19
 2052 0127 01       		.uleb128 0x1
 2053 0128 13       		.uleb128 0x13
 2054 0129 00       		.byte	0
 2055 012a 00       		.byte	0
 2056 012b 11       		.uleb128 0x11
 2057 012c 2E       		.uleb128 0x2e
 2058 012d 01       		.byte	0x1
 2059 012e 3F       		.uleb128 0x3f
 2060 012f 19       		.uleb128 0x19
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 52


 2061 0130 03       		.uleb128 0x3
 2062 0131 0E       		.uleb128 0xe
 2063 0132 3A       		.uleb128 0x3a
 2064 0133 0B       		.uleb128 0xb
 2065 0134 3B       		.uleb128 0x3b
 2066 0135 05       		.uleb128 0x5
 2067 0136 27       		.uleb128 0x27
 2068 0137 19       		.uleb128 0x19
 2069 0138 11       		.uleb128 0x11
 2070 0139 01       		.uleb128 0x1
 2071 013a 12       		.uleb128 0x12
 2072 013b 06       		.uleb128 0x6
 2073 013c 40       		.uleb128 0x40
 2074 013d 18       		.uleb128 0x18
 2075 013e 9642     		.uleb128 0x2116
 2076 0140 19       		.uleb128 0x19
 2077 0141 01       		.uleb128 0x1
 2078 0142 13       		.uleb128 0x13
 2079 0143 00       		.byte	0
 2080 0144 00       		.byte	0
 2081 0145 12       		.uleb128 0x12
 2082 0146 01       		.uleb128 0x1
 2083 0147 01       		.byte	0x1
 2084 0148 49       		.uleb128 0x49
 2085 0149 13       		.uleb128 0x13
 2086 014a 01       		.uleb128 0x1
 2087 014b 13       		.uleb128 0x13
 2088 014c 00       		.byte	0
 2089 014d 00       		.byte	0
 2090 014e 13       		.uleb128 0x13
 2091 014f 21       		.uleb128 0x21
 2092 0150 00       		.byte	0
 2093 0151 49       		.uleb128 0x49
 2094 0152 13       		.uleb128 0x13
 2095 0153 2F       		.uleb128 0x2f
 2096 0154 0B       		.uleb128 0xb
 2097 0155 00       		.byte	0
 2098 0156 00       		.byte	0
 2099 0157 14       		.uleb128 0x14
 2100 0158 26       		.uleb128 0x26
 2101 0159 00       		.byte	0
 2102 015a 49       		.uleb128 0x49
 2103 015b 13       		.uleb128 0x13
 2104 015c 00       		.byte	0
 2105 015d 00       		.byte	0
 2106 015e 15       		.uleb128 0x15
 2107 015f 34       		.uleb128 0x34
 2108 0160 00       		.byte	0
 2109 0161 03       		.uleb128 0x3
 2110 0162 0E       		.uleb128 0xe
 2111 0163 3A       		.uleb128 0x3a
 2112 0164 0B       		.uleb128 0xb
 2113 0165 3B       		.uleb128 0x3b
 2114 0166 0B       		.uleb128 0xb
 2115 0167 49       		.uleb128 0x49
 2116 0168 13       		.uleb128 0x13
 2117 0169 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 53


 2118 016a 19       		.uleb128 0x19
 2119 016b 02       		.uleb128 0x2
 2120 016c 18       		.uleb128 0x18
 2121 016d 00       		.byte	0
 2122 016e 00       		.byte	0
 2123 016f 00       		.byte	0
 2124              		.section	.debug_aranges,"",%progbits
 2125 0000 A4000000 		.4byte	0xa4
 2126 0004 0200     		.2byte	0x2
 2127 0006 00000000 		.4byte	.Ldebug_info0
 2128 000a 04       		.byte	0x4
 2129 000b 00       		.byte	0
 2130 000c 0000     		.2byte	0
 2131 000e 0000     		.2byte	0
 2132 0010 00000000 		.4byte	.LFB0
 2133 0014 24000000 		.4byte	.LFE0-.LFB0
 2134 0018 00000000 		.4byte	.LFB1
 2135 001c B4010000 		.4byte	.LFE1-.LFB1
 2136 0020 00000000 		.4byte	.LFB2
 2137 0024 28000000 		.4byte	.LFE2-.LFB2
 2138 0028 00000000 		.4byte	.LFB3
 2139 002c 18000000 		.4byte	.LFE3-.LFB3
 2140 0030 00000000 		.4byte	.LFB4
 2141 0034 1C000000 		.4byte	.LFE4-.LFB4
 2142 0038 00000000 		.4byte	.LFB5
 2143 003c 1C000000 		.4byte	.LFE5-.LFB5
 2144 0040 00000000 		.4byte	.LFB6
 2145 0044 48000000 		.4byte	.LFE6-.LFB6
 2146 0048 00000000 		.4byte	.LFB7
 2147 004c 44000000 		.4byte	.LFE7-.LFB7
 2148 0050 00000000 		.4byte	.LFB8
 2149 0054 1C000000 		.4byte	.LFE8-.LFB8
 2150 0058 00000000 		.4byte	.LFB9
 2151 005c 30000000 		.4byte	.LFE9-.LFB9
 2152 0060 00000000 		.4byte	.LFB10
 2153 0064 2C000000 		.4byte	.LFE10-.LFB10
 2154 0068 00000000 		.4byte	.LFB11
 2155 006c 1C000000 		.4byte	.LFE11-.LFB11
 2156 0070 00000000 		.4byte	.LFB12
 2157 0074 1C000000 		.4byte	.LFE12-.LFB12
 2158 0078 00000000 		.4byte	.LFB13
 2159 007c 30000000 		.4byte	.LFE13-.LFB13
 2160 0080 00000000 		.4byte	.LFB14
 2161 0084 2C000000 		.4byte	.LFE14-.LFB14
 2162 0088 00000000 		.4byte	.LFB15
 2163 008c A4000000 		.4byte	.LFE15-.LFB15
 2164 0090 00000000 		.4byte	.LFB16
 2165 0094 98000000 		.4byte	.LFE16-.LFB16
 2166 0098 00000000 		.4byte	.LFB17
 2167 009c 80000000 		.4byte	.LFE17-.LFB17
 2168 00a0 00000000 		.4byte	0
 2169 00a4 00000000 		.4byte	0
 2170              		.section	.debug_ranges,"",%progbits
 2171              	.Ldebug_ranges0:
 2172 0000 00000000 		.4byte	.LFB0
 2173 0004 24000000 		.4byte	.LFE0
 2174 0008 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 54


 2175 000c B4010000 		.4byte	.LFE1
 2176 0010 00000000 		.4byte	.LFB2
 2177 0014 28000000 		.4byte	.LFE2
 2178 0018 00000000 		.4byte	.LFB3
 2179 001c 18000000 		.4byte	.LFE3
 2180 0020 00000000 		.4byte	.LFB4
 2181 0024 1C000000 		.4byte	.LFE4
 2182 0028 00000000 		.4byte	.LFB5
 2183 002c 1C000000 		.4byte	.LFE5
 2184 0030 00000000 		.4byte	.LFB6
 2185 0034 48000000 		.4byte	.LFE6
 2186 0038 00000000 		.4byte	.LFB7
 2187 003c 44000000 		.4byte	.LFE7
 2188 0040 00000000 		.4byte	.LFB8
 2189 0044 1C000000 		.4byte	.LFE8
 2190 0048 00000000 		.4byte	.LFB9
 2191 004c 30000000 		.4byte	.LFE9
 2192 0050 00000000 		.4byte	.LFB10
 2193 0054 2C000000 		.4byte	.LFE10
 2194 0058 00000000 		.4byte	.LFB11
 2195 005c 1C000000 		.4byte	.LFE11
 2196 0060 00000000 		.4byte	.LFB12
 2197 0064 1C000000 		.4byte	.LFE12
 2198 0068 00000000 		.4byte	.LFB13
 2199 006c 30000000 		.4byte	.LFE13
 2200 0070 00000000 		.4byte	.LFB14
 2201 0074 2C000000 		.4byte	.LFE14
 2202 0078 00000000 		.4byte	.LFB15
 2203 007c A4000000 		.4byte	.LFE15
 2204 0080 00000000 		.4byte	.LFB16
 2205 0084 98000000 		.4byte	.LFE16
 2206 0088 00000000 		.4byte	.LFB17
 2207 008c 80000000 		.4byte	.LFE17
 2208 0090 00000000 		.4byte	0
 2209 0094 00000000 		.4byte	0
 2210              		.section	.debug_line,"",%progbits
 2211              	.Ldebug_line0:
 2212 0000 36020000 		.section	.debug_str,"MS",%progbits,1
 2212      02004C00 
 2212      00000201 
 2212      FB0E0D00 
 2212      01010101 
 2213              	.LASF28:
 2214 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2214      5341525F 
 2214      5365715F 
 2214      315F5374 
 2214      6F70436F 
 2215              	.LASF19:
 2216 001a 72656733 		.ascii	"reg32\000"
 2216      3200
 2217              	.LASF60:
 2218 0020 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2218      6E657261 
 2218      7465645F 
 2218      536F7572 
 2218      63655C50 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 55


 2219              	.LASF57:
 2220 0049 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2220      5341525F 
 2220      5365715F 
 2220      315F6F66 
 2220      66736574 
 2221              	.LASF45:
 2222 005e 6F666673 		.ascii	"offset\000"
 2222      657400
 2223              	.LASF15:
 2224 0065 666C6F61 		.ascii	"float\000"
 2224      7400
 2225              	.LASF41:
 2226 006b 68696768 		.ascii	"highLimit\000"
 2226      4C696D69 
 2226      7400
 2227              	.LASF38:
 2228 0075 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2228      5341525F 
 2228      5365715F 
 2228      315F5365 
 2228      744C6F77 
 2229              	.LASF58:
 2230 008f 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2230      5341525F 
 2230      5365715F 
 2230      315F636F 
 2230      756E7473 
 2231              	.LASF52:
 2232 00ad 75566F6C 		.ascii	"uVolts\000"
 2232      747300
 2233              	.LASF56:
 2234 00b4 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2234      5341525F 
 2234      5365715F 
 2234      315F696E 
 2234      69745661 
 2235              	.LASF18:
 2236 00ca 63686172 		.ascii	"char\000"
 2236      00
 2237              	.LASF29:
 2238 00cf 73746174 		.ascii	"status\000"
 2238      757300
 2239              	.LASF51:
 2240 00d6 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2240      5341525F 
 2240      5365715F 
 2240      315F436F 
 2240      756E7473 
 2241              	.LASF14:
 2242 00f4 666C6F61 		.ascii	"float32\000"
 2242      74333200 
 2243              	.LASF22:
 2244 00fc 746D7052 		.ascii	"tmpRegVal\000"
 2244      65675661 
 2244      6C00
 2245              	.LASF59:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 56


 2246 0106 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2246      4320342E 
 2246      382E3420 
 2246      32303134 
 2246      30353236 
 2247 0139 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2247      20726576 
 2247      6973696F 
 2247      6E203231 
 2247      31333538 
 2248 016c 30202D66 		.ascii	"0 -ffunction-sections\000"
 2248      66756E63 
 2248      74696F6E 
 2248      2D736563 
 2248      74696F6E 
 2249              	.LASF1:
 2250 0182 756E7369 		.ascii	"unsigned char\000"
 2250      676E6564 
 2250      20636861 
 2250      7200
 2251              	.LASF26:
 2252 0190 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
 2252      5341525F 
 2252      5365715F 
 2252      315F5374 
 2252      6F7000
 2253              	.LASF40:
 2254 01a3 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2254      5341525F 
 2254      5365715F 
 2254      315F5365 
 2254      74486967 
 2255              	.LASF12:
 2256 01be 696E7431 		.ascii	"int16\000"
 2256      3600
 2257              	.LASF5:
 2258 01c4 6C6F6E67 		.ascii	"long unsigned int\000"
 2258      20756E73 
 2258      69676E65 
 2258      6420696E 
 2258      7400
 2259              	.LASF13:
 2260 01d6 696E7433 		.ascii	"int32\000"
 2260      3200
 2261              	.LASF25:
 2262 01dc 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2262      5341525F 
 2262      5365715F 
 2262      315F456E 
 2262      61626C65 
 2263              	.LASF55:
 2264 01f1 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2264      5341525F 
 2264      5365715F 
 2264      315F6368 
 2264      616E6E65 
 2265              	.LASF61:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 57


 2266 020e 433A5C55 		.ascii	"C:\\Users\\Snufkin\\Documents\\PSoC Creator\\CRT_ti"
 2266      73657273 
 2266      5C536E75 
 2266      666B696E 
 2266      5C446F63 
 2267 023c 6D65725C 		.ascii	"mer\\CRT_timer.cydsn\000"
 2267      4352545F 
 2267      74696D65 
 2267      722E6379 
 2267      64736E00 
 2268              	.LASF24:
 2269 0250 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2269      5341525F 
 2269      5365715F 
 2269      315F5374 
 2269      61727400 
 2270              	.LASF16:
 2271 0264 646F7562 		.ascii	"double\000"
 2271      6C6500
 2272              	.LASF53:
 2273 026b 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2273      5341525F 
 2273      5365715F 
 2273      315F436F 
 2273      756E7473 
 2274              	.LASF46:
 2275 0288 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2275      5341525F 
 2275      5365715F 
 2275      315F5365 
 2275      74476169 
 2276              	.LASF39:
 2277 029e 6C6F774C 		.ascii	"lowLimit\000"
 2277      696D6974 
 2277      00
 2278              	.LASF47:
 2279 02a7 61646347 		.ascii	"adcGain\000"
 2279      61696E00 
 2280              	.LASF10:
 2281 02af 75696E74 		.ascii	"uint16\000"
 2281      313600
 2282              	.LASF49:
 2283 02b6 61646343 		.ascii	"adcCounts\000"
 2283      6F756E74 
 2283      7300
 2284              	.LASF11:
 2285 02c0 75696E74 		.ascii	"uint32\000"
 2285      333200
 2286              	.LASF43:
 2287 02c7 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2287      5341525F 
 2287      5365715F 
 2287      315F5365 
 2287      74536174 
 2288              	.LASF8:
 2289 02e0 756E7369 		.ascii	"unsigned int\000"
 2289      676E6564 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 58


 2289      20696E74 
 2289      00
 2290              	.LASF27:
 2291 02ed 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 2291      5341525F 
 2291      5365715F 
 2291      315F5374 
 2291      61727443 
 2292              	.LASF23:
 2293 0308 636F756E 		.ascii	"counts\000"
 2293      747300
 2294              	.LASF7:
 2295 030f 6C6F6E67 		.ascii	"long long unsigned int\000"
 2295      206C6F6E 
 2295      6720756E 
 2295      7369676E 
 2295      65642069 
 2296              	.LASF44:
 2297 0326 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2297      5341525F 
 2297      5365715F 
 2297      315F5365 
 2297      744F6666 
 2298              	.LASF36:
 2299 033e 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2299      5341525F 
 2299      5365715F 
 2299      315F5365 
 2299      74436861 
 2300              	.LASF54:
 2301 0358 766F6C74 		.ascii	"volts\000"
 2301      7300
 2302              	.LASF33:
 2303 035e 6368616E 		.ascii	"chan\000"
 2303      00
 2304              	.LASF50:
 2305 0363 6D566F6C 		.ascii	"mVolts\000"
 2305      747300
 2306              	.LASF20:
 2307 036a 73697A65 		.ascii	"sizetype\000"
 2307      74797065 
 2307      00
 2308              	.LASF6:
 2309 0373 6C6F6E67 		.ascii	"long long int\000"
 2309      206C6F6E 
 2309      6720696E 
 2309      7400
 2310              	.LASF37:
 2311 0381 6D61736B 		.ascii	"mask\000"
 2311      00
 2312              	.LASF21:
 2313 0386 63684E75 		.ascii	"chNum\000"
 2313      6D00
 2314              	.LASF48:
 2315 038c 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2315      5341525F 
 2315      5365715F 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 59


 2315      315F436F 
 2315      756E7473 
 2316              	.LASF32:
 2317 03aa 7265744D 		.ascii	"retMode\000"
 2317      6F646500 
 2318              	.LASF2:
 2319 03b2 73686F72 		.ascii	"short int\000"
 2319      7420696E 
 2319      7400
 2320              	.LASF9:
 2321 03bc 75696E74 		.ascii	"uint8\000"
 2321      3800
 2322              	.LASF42:
 2323 03c2 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2323      5341525F 
 2323      5365715F 
 2323      315F5365 
 2323      744C696D 
 2324              	.LASF4:
 2325 03dd 6C6F6E67 		.ascii	"long int\000"
 2325      20696E74 
 2325      00
 2326              	.LASF30:
 2327 03e6 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 2327      5341525F 
 2327      5365715F 
 2327      315F4973 
 2327      456E6443 
 2328              	.LASF0:
 2329 0404 7369676E 		.ascii	"signed char\000"
 2329      65642063 
 2329      68617200 
 2330              	.LASF3:
 2331 0410 73686F72 		.ascii	"short unsigned int\000"
 2331      7420756E 
 2331      7369676E 
 2331      65642069 
 2331      6E7400
 2332              	.LASF34:
 2333 0423 72657375 		.ascii	"result\000"
 2333      6C7400
 2334              	.LASF17:
 2335 042a 696E7436 		.ascii	"int64\000"
 2335      3400
 2336              	.LASF35:
 2337 0430 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2337      5341525F 
 2337      5365715F 
 2337      315F496E 
 2337      697400
 2338              	.LASF31:
 2339 0443 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2339      5341525F 
 2339      5365715F 
 2339      315F4765 
 2339      74526573 
 2340              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccxT0dPd.s 			page 60


